{
    "project": {
        "name": "IBM v18 (Northstar) common Javascript documentation",
        "description": "Official source code documentation for IBM v18 (Northstar) common Javascript.",
        "version": "IBM v18 (Northstar)"
    },
    "files": {
        "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js": {
            "name": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js": {
            "name": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js": {
            "name": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore-ibmcustom.js": {
            "name": "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore-ibmcustom.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js": {
            "name": "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/browser.js": {
            "name": "src/js/sources/ibm/common/lib/browser.js",
            "modules": {
                "jQuery.browser": 1
            },
            "classes": {
                "jQuery.browser": 1,
                "jQuery.layout": 1,
                "jQuery.os": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/datatables-bundle.js": {
            "name": "src/js/sources/ibm/common/lib/datatables-bundle.js",
            "modules": {
                "jQuery.dataTable": 1
            },
            "classes": {
                "jQuery.fn.dataTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/imagesloaded.js": {
            "name": "src/js/sources/ibm/common/lib/imagesloaded.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/masonry.js": {
            "name": "src/js/sources/ibm/common/lib/masonry.js",
            "modules": {
                "Masonry": 1
            },
            "classes": {
                "Masonry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/modernizr.js": {
            "name": "src/js/sources/ibm/common/lib/modernizr.js",
            "modules": {
                "Modernizr": 1
            },
            "classes": {
                "Modernizr": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/mustache.js": {
            "name": "src/js/sources/ibm/common/lib/mustache.js",
            "modules": {
                "Mustache": 1
            },
            "classes": {
                "Mustache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/nanoscroller.js": {
            "name": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "modules": {
                "Nanoscroller": 1
            },
            "classes": {
                "NanoScroll": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/picker.date.js": {
            "name": "src/js/sources/ibm/common/lib/picker.date.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/picker.js": {
            "name": "src/js/sources/ibm/common/lib/picker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/select2.js": {
            "name": "src/js/sources/ibm/common/lib/select2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/slick.js": {
            "name": "src/js/sources/ibm/common/lib/slick.js",
            "modules": {
                "jQuery.slick": 1
            },
            "classes": {
                "jQuery.fn.slick": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/lib/ustream-embedapi.js": {
            "name": "src/js/sources/ibm/common/lib/ustream-embedapi.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/backtotop.js": {
            "name": "src/js/sources/ibm/common/modules/backtotop.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.backtotop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/canada-notice-loader.js": {
            "name": "src/js/sources/ibm/common/modules/canada-notice-loader.js",
            "modules": {},
            "classes": {
                "Other IBM - Canada notice loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/canada-notice.js": {
            "name": "src/js/sources/ibm/common/modules/canada-notice.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.canadanotice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/contact-module.js": {
            "name": "src/js/sources/ibm/common/modules/contact-module.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.contactmodule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/feedbacklink.js": {
            "name": "src/js/sources/ibm/common/modules/feedbacklink.js",
            "modules": {},
            "classes": {
                "Other IBM - footer feedback link": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/footer.js": {
            "name": "src/js/sources/ibm/common/modules/footer.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.footer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/footermenu.js": {
            "name": "src/js/sources/ibm/common/modules/footermenu.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.footermenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/leftnav.js": {
            "name": "src/js/sources/ibm/common/modules/leftnav.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.leftnav": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/liveperson-loader.js": {
            "name": "src/js/sources/ibm/common/modules/liveperson-loader.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.liveperson": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/localeselector.js": {
            "name": "src/js/sources/ibm/common/modules/localeselector.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.localeselector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/localized-page-notification.js": {
            "name": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.localpagenotification": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/masthead-banner.js": {
            "name": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.mastheadbanner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/masthead-search.js": {
            "name": "src/js/sources/ibm/common/modules/masthead-search.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.mastheadsearch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/masthead-sticky.js": {
            "name": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.masthead.sticky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/masthead.js": {
            "name": "src/js/sources/ibm/common/modules/masthead.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.masthead": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/mobilemenu.js": {
            "name": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.mobilemenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/mte.js": {
            "name": "src/js/sources/ibm/common/modules/mte.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.merchandising": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/sharethiscontent.js": {
            "name": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.sharethiscontent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/sharethispage.js": {
            "name": "src/js/sources/ibm/common/modules/sharethispage.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.sharethispage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/sitenav-menu.js": {
            "name": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.sitenavmenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/modules/urx-loader.js": {
            "name": "src/js/sources/ibm/common/modules/urx-loader.js",
            "modules": {},
            "classes": {
                "IBMCore.common.module.urx": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/accessibility.js": {
            "name": "src/js/sources/ibm/common/util/accessibility.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.a11y": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/anchorlink-adjustment.js": {
            "name": "src/js/sources/ibm/common/util/anchorlink-adjustment.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.anchorlinkAdjustment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/color.js": {
            "name": "src/js/sources/ibm/common/util/color.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.color": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/config.js": {
            "name": "src/js/sources/ibm/common/util/config.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/console.js": {
            "name": "src/js/sources/ibm/common/util/console.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/cookie.js": {
            "name": "src/js/sources/ibm/common/util/cookie.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.cookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/coreservices.js": {
            "name": "src/js/sources/ibm/common/util/coreservices.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.coreservices": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/data.js": {
            "name": "src/js/sources/ibm/common/util/data.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.data": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/debug.js": {
            "name": "src/js/sources/ibm/common/util/debug.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/event-coordinator.js": {
            "name": "src/js/sources/ibm/common/util/event-coordinator.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.eventCoordinator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/freezescrollbars.js": {
            "name": "src/js/sources/ibm/common/util/freezescrollbars.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.freezeScrollbars": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/gatekeeper.js": {
            "name": "src/js/sources/ibm/common/util/gatekeeper.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.gatekeeper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/grid.js": {
            "name": "src/js/sources/ibm/common/util/grid.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.getCurrentGridSize": 1,
                "Other IBM - grid change": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/meta.js": {
            "name": "src/js/sources/ibm/common/util/meta.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.meta": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/misc.js": {
            "name": "src/js/sources/ibm/common/util/misc.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.addCssRule": 1,
                "IBMCore.common.util.convertSecondsToHMS": 1,
                "IBMCore.common.util.generateId": 1,
                "IBMCore.common.util.getDataAttributes": 1,
                "IBMCore.common.util.getScrollbarWidth": 1,
                "IBMCore.common.util.has12grid": 1,
                "IBMCore.common.util.hasScrollbars": 1,
                "IBMCore.common.util.setIpcCookie": 1,
                "IBMCore.common.util.string.htmlspecialchars": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/queue.js": {
            "name": "src/js/sources/ibm/common/util/queue.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.queue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/scrolledintoview.js": {
            "name": "src/js/sources/ibm/common/util/scrolledintoview.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.scrolledintoview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/scrolltracker.js": {
            "name": "src/js/sources/ibm/common/util/scrolltracker.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.scrolltracker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/statshelper.js": {
            "name": "src/js/sources/ibm/common/util/statshelper.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.statshelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/storage.js": {
            "name": "src/js/sources/ibm/common/util/storage.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.storage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/translations.js": {
            "name": "src/js/sources/ibm/common/util/translations.js",
            "modules": {},
            "classes": {
                "IBMCore.common.translations": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/url.js": {
            "name": "src/js/sources/ibm/common/util/url.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.url": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/user.js": {
            "name": "src/js/sources/ibm/common/util/user.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.user": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/util/v18pagetracker.js": {
            "name": "src/js/sources/ibm/common/util/v18pagetracker.js",
            "modules": {},
            "classes": {
                "Other IBM - common v18 page tracker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/vendor/alexa-tracking.js": {
            "name": "src/js/sources/ibm/common/vendor/alexa-tracking.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/vendor/bitly.js": {
            "name": "src/js/sources/ibm/common/vendor/bitly.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.bitly": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/vendor/jquery-extensions.js": {
            "name": "src/js/sources/ibm/common/vendor/jquery-extensions.js",
            "modules": {},
            "classes": {
                "jQuery:focusable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/vendor/modernizr-extensions.js": {
            "name": "src/js/sources/ibm/common/vendor/modernizr-extensions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/vendor/survey-ccfintercept.js": {
            "name": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.ccfintercept": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/carousel.js": {
            "name": "src/js/sources/ibm/common/widgets/carousel.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.carousel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/datatable.js": {
            "name": "src/js/sources/ibm/common/widgets/datatable.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.datatable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/datepicker.js": {
            "name": "src/js/sources/ibm/common/widgets/datepicker.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.datepicker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/dyntabs.js": {
            "name": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.dyntabs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/expertise.js": {
            "name": "src/js/sources/ibm/common/widgets/expertise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/fileinput.js": {
            "name": "src/js/sources/ibm/common/widgets/fileinput.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.fileinput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/forms-misc.js": {
            "name": "src/js/sources/ibm/common/widgets/forms-misc.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.forms": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/formvalidator.js": {
            "name": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.formvalidator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/hiresimageswap.js": {
            "name": "src/js/sources/ibm/common/widgets/hiresimageswap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/leavingibm.js": {
            "name": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.leavingibm": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/masonry.js": {
            "name": "src/js/sources/ibm/common/widgets/masonry.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.masonry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/overlay.js": {
            "name": "src/js/sources/ibm/common/widgets/overlay.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.overlay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/parallaxscroll.js": {
            "name": "src/js/sources/ibm/common/widgets/parallaxscroll.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.parallaxscroll": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/rssdisplay.js": {
            "name": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.rssdisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/sameheight.js": {
            "name": "src/js/sources/ibm/common/widgets/sameheight.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.setsameheight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/scrollable.js": {
            "name": "src/js/sources/ibm/common/widgets/scrollable.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.scrollable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/selectlist.js": {
            "name": "src/js/sources/ibm/common/widgets/selectlist.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.selectlist": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/selectlistnav.js": {
            "name": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.selectlistnav": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/show-hide.js": {
            "name": "src/js/sources/ibm/common/widgets/show-hide.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.showhide": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/stepindicator.js": {
            "name": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.stepindicator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/stickytabs.js": {
            "name": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.stickytabs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/syntaxhighlighter.js": {
            "name": "src/js/sources/ibm/common/widgets/syntaxhighlighter.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.syntaxhighlighter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/tablerowselector.js": {
            "name": "src/js/sources/ibm/common/widgets/tablerowselector.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.tablerowselector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/tooltip.js": {
            "name": "src/js/sources/ibm/common/widgets/tooltip.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.tooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/twisty.js": {
            "name": "src/js/sources/ibm/common/widgets/twisty.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.twisty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/videolooper.js": {
            "name": "src/js/sources/ibm/common/widgets/videolooper.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.videolooper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js": {
            "name": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.videoplayer.kaltura": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/videoplayer-ustream.js": {
            "name": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.videoplayer.ustream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/videoplayer-youtube.js": {
            "name": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.videoplayer.youtube": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/videoplayer.js": {
            "name": "src/js/sources/ibm/common/widgets/videoplayer.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.videoplayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/widgets/widget-manager.js": {
            "name": "src/js/sources/ibm/common/widgets/widget-manager.js",
            "modules": {},
            "classes": {
                "IBMCore.common.widget.manager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/base.js": {
            "name": "src/js/sources/ibm/common/base.js",
            "modules": {
                "IBMCore": 1
            },
            "classes": {
                "IBMCore.namespace": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/init.js": {
            "name": "src/js/sources/ibm/common/init.js",
            "modules": {},
            "classes": {
                "Other IBM - common init": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/common/setconfig.js": {
            "name": "src/js/sources/ibm/common/setconfig.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/www/modules/dynamic-contact-module.js": {
            "name": "src/js/sources/ibm/www/modules/dynamic-contact-module.js",
            "modules": {},
            "classes": {
                "IBMCore.www.module.dynamiccontactmodule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/www/modules/notice-choice-loader.js": {
            "name": "src/js/sources/ibm/www/modules/notice-choice-loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/www/vendor/truste.js": {
            "name": "src/js/sources/ibm/www/vendor/truste.js",
            "modules": {},
            "classes": {
                "IBMCore.www.module.truste": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/errorchecking.js": {
            "name": "src/js/sources/ibm/errorchecking.js",
            "modules": {},
            "classes": {
                "Other IBM - errorchecking": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/jstimer-end.js": {
            "name": "src/js/sources/ibm/jstimer-end.js",
            "modules": {},
            "classes": {
                "Other IBM - jstimer-end": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/jstimer-start.js": {
            "name": "src/js/sources/ibm/jstimer-start.js",
            "modules": {},
            "classes": {
                "Other IBM - jstimer-start": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/perf.js": {
            "name": "src/js/sources/ibm/perf.js",
            "modules": {},
            "classes": {
                "IBMCore.common.util.perf": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/temp-cookie-validator.js": {
            "name": "src/js/sources/ibm/temp-cookie-validator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/temp-css-tester.js": {
            "name": "src/js/sources/ibm/temp-css-tester.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/temp-http-checker.js": {
            "name": "src/js/sources/ibm/temp-http-checker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/js/sources/ibm/temp-wat-loader.js": {
            "name": "src/js/sources/ibm/temp-wat-loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "jQuery.browser": {
            "name": "jQuery.browser",
            "submodules": {},
            "elements": {},
            "classes": {
                "jQuery.browser": 1,
                "jQuery.layout": 1,
                "jQuery.os": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/browser.js",
            "line": 1,
            "description": "Browser plug-in script for jQuery. \n\t<br />Used for browser detection.\n\t<br />Official documentation at <a href=\"http://jquery.thewikies.com/browser\" target=\"_blank\">http://jquery.thewikies.com/browser</a>.",
            "itemtype": "main"
        },
        "jQuery.dataTable": {
            "name": "jQuery.dataTable",
            "submodules": {},
            "elements": {},
            "classes": {
                "jQuery.fn.dataTable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/js/sources/ibm/common/lib/datatables-bundle.js",
            "line": 1,
            "description": "DataTables plug-in script for jQuery. \n\t<br />Used for IBM data table widgets.\n\t<br />Official documentation at <a href=\"http://datatables.net\" target=\"_blank\">http://datatables.net</a>.\n\t<br />\n\t<br />It is a highly flexible tool, based upon the foundations of progressive enhancement, \n\twhich will add advanced interaction controls to any HTML table.",
            "params": [
                {
                    "name": "settings",
                    "description": "Configuration object for DataTable.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Masonry": {
            "name": "Masonry",
            "submodules": {},
            "elements": {},
            "classes": {
                "Masonry": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/masonry.js",
            "line": 1,
            "description": "Masonry plug-in. A cascading grid layout library. It works by placing elements in optimal position based on available vertical space, sort of like a mason fitting stones in a wall.\n<br />Official documenation at <a href=\"http://masonry.desandro.com/\" target=\"_blank\">http://masonry.desandro.com/</a>.",
            "itemtype": "main"
        },
        "Modernizr": {
            "name": "Modernizr",
            "submodules": {},
            "elements": {},
            "classes": {
                "Modernizr": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/modernizr.js",
            "line": 1,
            "description": "Modernizr script custom build v3.3.1\n\t<br />Used for feature detections.\n\t<br />Official documenation at <a href=\"http://modernizr.com/\" target=\"_blank\">http://modernizr.com/</a>.",
            "itemtype": "main"
        },
        "Mustache": {
            "name": "Mustache",
            "submodules": {},
            "elements": {},
            "classes": {
                "Mustache": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/mustache.js",
            "line": 1,
            "description": "Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.\n  <br />Official documentation at <a href=\"https://github.com/janl/mustache.js\" target=\"_blank\">https://github.com/janl/mustache.js</a>.  \n  <br />\n  <br />Usage:\n  \n  var data = {\n    title: \"Joe\",\n    calc: function () {\n      return 2 + 4;\n    }\n  };\n  \n  var output = Mustache.render(\"{{title}} spends {{calc}}\", data);",
            "itemtype": "main"
        },
        "Nanoscroller": {
            "name": "Nanoscroller",
            "submodules": {},
            "elements": {},
            "classes": {
                "NanoScroll": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 393,
            "description": "!!!!!!!!!!!!!!!!IMPORTANT!!!!!!!!!!!!!!!!\n\tThis file contains modifications to add RTL support. See blocks following \"RTL support\" comments\n\t!!!!!!!!!!!!!!!!IMPORTANT!!!!!!!!!!!!!!!!\nNanoscroller is a very small basic scrolling div plug-in.\n\t<br >This is used by the <a href=\"../classes/IBMCore.common.widget.scrollable.html\">IBM scrollable</a> widget.\n\t<br />__NEVER__ use this directly to init the scrollable plug-in as it might change. Always use the IBM scrollable() method.",
            "itemtype": "main"
        },
        "jQuery.slick": {
            "name": "jQuery.slick",
            "submodules": {},
            "elements": {},
            "classes": {
                "jQuery.fn.slick": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/common/lib/slick.js",
            "line": 1,
            "description": "Slick carousel plug-in script for jQuery.\n    <br />Used for IBM carousel widgets.\n    <br />Official documentation at <a href=\"http://kenwheeler.github.io/slick\" target=\"_blank\">http://kenwheeler.github.io/slick</a>.",
            "itemtype": "main"
        },
        "IBMCore": {
            "name": "IBMCore",
            "submodules": {},
            "elements": {},
            "classes": {
                "IBMCore.common.module.backtotop": 1,
                "Other IBM - Canada notice loader": 1,
                "IBMCore.common.module.canadanotice": 1,
                "IBMCore.common.module.contactmodule": 1,
                "Other IBM - footer feedback link": 1,
                "IBMCore.common.module.footer": 1,
                "IBMCore.common.module.footermenu": 1,
                "IBMCore.common.module.leftnav": 1,
                "IBMCore.common.module.liveperson": 1,
                "IBMCore.common.module.localeselector": 1,
                "IBMCore.common.module.localpagenotification": 1,
                "IBMCore.common.module.mastheadbanner": 1,
                "IBMCore.common.module.mastheadsearch": 1,
                "IBMCore.common.module.masthead.sticky": 1,
                "IBMCore.common.module.masthead": 1,
                "IBMCore.common.module.mobilemenu": 1,
                "IBMCore.common.module.merchandising": 1,
                "IBMCore.common.module.sharethiscontent": 1,
                "IBMCore.common.module.sharethispage": 1,
                "IBMCore.common.module.sitenavmenu": 1,
                "IBMCore.common.module.urx": 1,
                "IBMCore.common.util.a11y": 1,
                "IBMCore.common.util.anchorlinkAdjustment": 1,
                "IBMCore.common.util.color": 1,
                "IBMCore.common.util.config": 1,
                "IBMCore.common.util.cookie": 1,
                "IBMCore.common.util.coreservices": 1,
                "IBMCore.common.util.data": 1,
                "IBMCore.common.util.debug": 1,
                "IBMCore.common.util.eventCoordinator": 1,
                "IBMCore.common.util.freezeScrollbars": 1,
                "IBMCore.common.util.gatekeeper": 1,
                "IBMCore.common.util.getCurrentGridSize": 1,
                "Other IBM - grid change": 1,
                "IBMCore.common.util.meta": 1,
                "IBMCore.common.util.addCssRule": 1,
                "IBMCore.common.util.convertSecondsToHMS": 1,
                "IBMCore.common.util.generateId": 1,
                "IBMCore.common.util.getDataAttributes": 1,
                "IBMCore.common.util.getScrollbarWidth": 1,
                "IBMCore.common.util.has12grid": 1,
                "IBMCore.common.util.hasScrollbars": 1,
                "IBMCore.common.util.setIpcCookie": 1,
                "IBMCore.common.util.string.htmlspecialchars": 1,
                "IBMCore.common.util.queue": 1,
                "IBMCore.common.util.scrolledintoview": 1,
                "IBMCore.common.util.scrolltracker": 1,
                "IBMCore.common.util.statshelper": 1,
                "IBMCore.common.util.storage": 1,
                "IBMCore.common.translations": 1,
                "IBMCore.common.util.url": 1,
                "IBMCore.common.util.user": 1,
                "Other IBM - common v18 page tracker": 1,
                "IBMCore.common.util.bitly": 1,
                "jQuery:focusable": 1,
                "IBMCore.common.widget.ccfintercept": 1,
                "IBMCore.common.widget.carousel": 1,
                "IBMCore.common.widget.datatable": 1,
                "IBMCore.common.widget.datepicker": 1,
                "IBMCore.common.widget.dyntabs": 1,
                "IBMCore.common.widget.fileinput": 1,
                "IBMCore.common.widget.forms": 1,
                "IBMCore.common.widget.formvalidator": 1,
                "IBMCore.common.widget.leavingibm": 1,
                "IBMCore.common.widget.masonry": 1,
                "IBMCore.common.widget.overlay": 1,
                "IBMCore.common.widget.parallaxscroll": 1,
                "IBMCore.common.widget.rssdisplay": 1,
                "IBMCore.common.widget.setsameheight": 1,
                "IBMCore.common.widget.scrollable": 1,
                "IBMCore.common.widget.selectlist": 1,
                "IBMCore.common.widget.selectlistnav": 1,
                "IBMCore.common.widget.showhide": 1,
                "IBMCore.common.widget.stepindicator": 1,
                "IBMCore.common.widget.stickytabs": 1,
                "IBMCore.common.widget.syntaxhighlighter": 1,
                "IBMCore.common.widget.tablerowselector": 1,
                "IBMCore.common.widget.tooltip": 1,
                "IBMCore.common.widget.twisty": 1,
                "IBMCore.common.widget.videolooper": 1,
                "IBMCore.common.widget.videoplayer.kaltura": 1,
                "IBMCore.common.widget.videoplayer.ustream": 1,
                "IBMCore.common.widget.videoplayer.youtube": 1,
                "IBMCore.common.widget.videoplayer": 1,
                "IBMCore.common.widget.manager": 1,
                "IBMCore.namespace": 1,
                "Other IBM - common init": 1,
                "IBMCore.www.module.dynamiccontactmodule": 1,
                "IBMCore.www.module.truste": 1,
                "Other IBM - errorchecking": 1,
                "Other IBM - jstimer-end": 1,
                "Other IBM - jstimer-start": 1,
                "IBMCore.common.util.perf": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/js/sources/ibm/perf.js",
            "line": 2,
            "description": "Base setup for the IBMCore namespace.\n\t<br />",
            "itemtype": "main"
        }
    },
    "classes": {
        "jQuery.browser": {
            "name": "jQuery.browser",
            "shortname": "jQuery.browser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery.browser",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/browser.js",
            "line": 1,
            "description": "Browser plug-in script for jQuery. \n\t<br />Used for browser detection.\n\t<br />Official documentation at <a href=\"http://jquery.thewikies.com/browser\" target=\"_blank\">http://jquery.thewikies.com/browser</a>.",
            "mainName": "jQuery.browser",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "jQuery.layout": {
            "name": "jQuery.layout",
            "shortname": "jQuery.layout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery.browser",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/browser.js",
            "line": 1,
            "description": "Browser plug-in script for jQuery. \n\t<br />Used for browser detection.\n\t<br />Official documentation at <a href=\"http://jquery.thewikies.com/browser\" target=\"_blank\">http://jquery.thewikies.com/browser</a>.",
            "mainName": "jQuery.browser",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "jQuery.os": {
            "name": "jQuery.os",
            "shortname": "jQuery.os",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery.browser",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/browser.js",
            "line": 1,
            "description": "Browser plug-in script for jQuery. \n\t<br />Used for browser detection.\n\t<br />Official documentation at <a href=\"http://jquery.thewikies.com/browser\" target=\"_blank\">http://jquery.thewikies.com/browser</a>.",
            "mainName": "jQuery.browser",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "jQuery.fn.dataTable": {
            "name": "jQuery.fn.dataTable",
            "shortname": "jQuery.fn.dataTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery.dataTable",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/datatables-bundle.js",
            "line": 1,
            "description": "DataTables plug-in script for jQuery. \n\t<br />Used for IBM data table widgets.\n\t<br />Official documentation at <a href=\"http://datatables.net\" target=\"_blank\">http://datatables.net</a>.\n\t<br />\n\t<br />It is a highly flexible tool, based upon the foundations of progressive enhancement, \n\twhich will add advanced interaction controls to any HTML table."
        },
        "Masonry": {
            "name": "Masonry",
            "shortname": "Masonry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Masonry",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/masonry.js",
            "line": 1,
            "description": "Masonry plug-in. A cascading grid layout library. It works by placing elements in optimal position based on available vertical space, sort of like a mason fitting stones in a wall.\n<br />Official documenation at <a href=\"http://masonry.desandro.com/\" target=\"_blank\">http://masonry.desandro.com/</a>.",
            "mainName": "Masonry",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Modernizr": {
            "name": "Modernizr",
            "shortname": "Modernizr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Modernizr",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/modernizr.js",
            "line": 1,
            "description": "Modernizr script custom build v3.3.1\n\t<br />Used for feature detections.\n\t<br />Official documenation at <a href=\"http://modernizr.com/\" target=\"_blank\">http://modernizr.com/</a>.",
            "mainName": "Modernizr",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Mustache": {
            "name": "Mustache",
            "shortname": "Mustache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mustache",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/mustache.js",
            "line": 1,
            "description": "Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.\n  <br />Official documentation at <a href=\"https://github.com/janl/mustache.js\" target=\"_blank\">https://github.com/janl/mustache.js</a>.  \n  <br />\n  <br />Usage:\n  \n  var data = {\n    title: \"Joe\",\n    calc: function () {\n      return 2 + 4;\n    }\n  };\n  \n  var output = Mustache.render(\"{{title}} spends {{calc}}\", data);",
            "mainName": "Mustache",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "NanoScroll": {
            "name": "NanoScroll",
            "shortname": "NanoScroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Nanoscroller",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 393,
            "params": [
                {
                    "name": "element",
                    "description": "the main element",
                    "type": "HTMLElement|Node"
                },
                {
                    "name": "options",
                    "description": "nanoScroller's options",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "jQuery.fn.slick": {
            "name": "jQuery.fn.slick",
            "shortname": "jQuery.fn.slick",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jQuery.slick",
            "namespace": "",
            "file": "src/js/sources/ibm/common/lib/slick.js",
            "line": 1,
            "description": "Slick carousel plug-in script for jQuery.\n    <br />Used for IBM carousel widgets.\n    <br />Official documentation at <a href=\"http://kenwheeler.github.io/slick\" target=\"_blank\">http://kenwheeler.github.io/slick</a>.",
            "mainName": "jQuery.slick",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "IBMCore.common.module.backtotop": {
            "name": "IBMCore.common.module.backtotop",
            "shortname": "IBMCore.common.module.backtotop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/backtotop.js",
            "line": 1,
            "description": "Back-to-top dynamic link.\n\t<br />\n\t<br />When the user is scrolled down down the page at least 1 screen height this dynamic back-to-top link appears \n\t in the bottom rightallowing the user to click to go back to the top of the page.\n\t<br />\n\t<br />Enabled by default."
        },
        "Other IBM - Canada notice loader": {
            "name": "Other IBM - Canada notice loader",
            "shortname": "Other IBM - Canada notice loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/canada-notice-loader.js",
            "line": 1,
            "description": "Canada special notice required by law.\n\t<br />This is simply the autoloader logic that will include the separate Canada notice JS on pages that require it.",
            "deprecated": true
        },
        "IBMCore.common.module.canadanotice": {
            "name": "IBMCore.common.module.canadanotice",
            "shortname": "IBMCore.common.module.canadanotice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/canada-notice.js",
            "line": 1,
            "description": "Canada cookie notice\n\t<br />\n\t<br />This is required by law/legal on Canada pages.\n\t<br />When a user views a canada page, and we detect we haven't shown them the notice yet (only show once), we show\n\t a notice at the bottom of the page about using cookies.\n\t<br />We keep track (as possible) and only show it to the user 1 time. Of course, if they disable or clear cookies/storage\n\t we end up showing them again. This is fine and agreed on.\n\t<br>\n\t<br>This gets output as it's own file and is dynamically included when needed.\n\n  NOTE: Canada cookie banner taken out and passed on to another team. Only Adchoice remains (for now)"
        },
        "IBMCore.common.module.contactmodule": {
            "name": "IBMCore.common.module.contactmodule",
            "shortname": "IBMCore.common.module.contactmodule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 1,
            "description": "Contact module\n\t<br />\n\t<br />Standard contact module script that creates a button at the right of the browser and floats the contact\n\t module to slide over when the button is clicked.\n\t<br/>\n\t<br/>The page locale codes are used to dynamically add a class to the html element which is used by the CSS to show a\n\t\"nationality appropriate\" image of people in BOTH the contact module and the live person overlay.\n\t<br/>\n\t<br/>\n\tThis is getting ready to be replaced with the new liveadvisor/contact-module-as-a-service widget."
        },
        "Other IBM - footer feedback link": {
            "name": "Other IBM - footer feedback link",
            "shortname": "Other IBM - footer feedback link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/feedbacklink.js",
            "line": 1,
            "description": "Feedback link in footer\n\t<br />\n\t<br />This injects the feedback link in the footer and calls the feedback function onclick. That's it.\n\t<br />",
            "deprecated": true
        },
        "IBMCore.common.module.footer": {
            "name": "IBMCore.common.module.footer",
            "shortname": "IBMCore.common.module.footer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 1,
            "description": "Dynamic translated footer links (main ones).\n\t<br />\n\t<br />Waits for translations to be retrieved then automatically injects translated footer links onload. \n\t<br />This simply __overwrites__ HTML coded footer links in the event there is a global locale link change.\n\t<br />\n\t<br />Enabled by default.\n\t<br />\n\t<br />To disable: Add this JS snippet to your page (although you should never really do this):\n\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tfooter: { enabled: false }\n\t\t});"
        },
        "IBMCore.common.module.footermenu": {
            "name": "IBMCore.common.module.footermenu",
            "shortname": "IBMCore.common.module.footermenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/footermenu.js",
            "line": 1,
            "description": "The footer menu - The multiple columns of link lists.\n\t<br />\n\t<br />Waits for translations to be retrieved then automatically creates and injects the footer menu links onload."
        },
        "IBMCore.common.module.leftnav": {
            "name": "IBMCore.common.module.leftnav",
            "shortname": "IBMCore.common.module.leftnav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/leftnav.js",
            "line": 1,
            "description": "Left navigation setup.\n\t<br />\n\t<br />Basic inits for left nav - a11y and show/hides."
        },
        "IBMCore.common.module.liveperson": {
            "name": "IBMCore.common.module.liveperson",
            "shortname": "IBMCore.common.module.liveperson",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/liveperson-loader.js",
            "line": 1,
            "description": "Liveperson loader\n\t<br />\n\t<br />This enables the liveperson functionality on the page, includes the core JS file and injects the placeholder div if needed.\n\t<br />\n\t<br />Disabled by default (omission of setting). This is an opt-in service and requires a LP routing code (contact Raymond Gardner). \n\t<br />To set this on your page, create a new object in the digitalData object. Set enabled to true, and put your proper LP routing code in there (same one you used in v17 \"editSkill\"):\n\t\n\tdigitalData = {\n\t\tpage: {\n\t\t\t.....\n\t\t\t\n\t\t\tpageInfo: {\n\t\t\t\t.....\n\t\t\t\t\n\t\t\t\tliveperson: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trouting: \"__REPLACE-ME__\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"
        },
        "IBMCore.common.module.localeselector": {
            "name": "IBMCore.common.module.localeselector",
            "shortname": "IBMCore.common.module.localeselector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 16,
            "description": "Locale selector\n\t<br />\n\t<br />This is the locale selectlist navigator in the footer. It allows the user to goto a different locale corporate portal home page.\n\t<br />This replaces the need for a separate standalone \"Select a country\" page by putting the same select list from that page in the footer of every page.\n\t<br />It also allows the page owner to specify that they have translated versions of the page using the Google standard alternate hreflang tagging. So you get bonus points for SEO with this.\n\t<br />View the standards page, or: http://nsdev.somerslab.ibm.com/v18/test/accesstest/locale-selector.php for information how to code your page to also use this as your \"translated versions of this page\" selector."
        },
        "IBMCore.common.module.localpagenotification": {
            "name": "IBMCore.common.module.localpagenotification",
            "shortname": "IBMCore.common.module.localpagenotification",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 1,
            "description": "PILOT started April 20 2017:\n\t<br>If a user is detected in a country that's different than what the page is tagged for, and there is a (EN)-<user CC> custom page available (coded via <link> alt-lang tag)... then show a notification bar at the top of the page\n\t to ask the user if they want to goto that localized page.\n\t<br>\"Go to\" means that we take the href from the alt-lang <link> tag and set it as the href of the button\n\t in the notification bar.\n\t<br>\n\t<br>Steps how it works:\n<br>1. Need to know what country the user is in.\n\t<br>2. If so: Is the page they are on a different country code?\n\t<br>3. If so: Is there a link tag with a locale with \"en-<user_CC>\"? (pilot is for EN enabled CCs only because no xlation needed)\n\t<br>4. Wait for locale selector ready to grab the text value.\n\t<br>5. Show notification bar."
        },
        "IBMCore.common.module.mastheadbanner": {
            "name": "IBMCore.common.module.mastheadbanner",
            "shortname": "IBMCore.common.module.mastheadbanner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 1,
            "description": "Masthead Banner, activated by the `masthead-banner.json` data file"
        },
        "IBMCore.common.module.mastheadsearch": {
            "name": "IBMCore.common.module.mastheadsearch",
            "shortname": "IBMCore.common.module.mastheadsearch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 1,
            "description": "Masthead search module\n\t<br />\n\t<br />This is the search field in the masthead, the mobile masthead overtake search, and the extra typeahead feature.\n\t<br />This waits for masthead to be ready and then binds the masthead search item and creates everything beyond it."
        },
        "IBMCore.common.module.masthead.sticky": {
            "name": "IBMCore.common.module.masthead.sticky",
            "shortname": "IBMCore.common.module.masthead.sticky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 1,
            "description": "Masthead sticky functionality\n\t<br />\n\t<br />This is the built-in sticky functionality for the masthead.\n\t<br />\n\t<br />Enabled by default.\n\t<br />To disable: Add this JS snippet to your page (although you should never really do this):\n\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tmasthead: { \n\t\t\t\tsticky: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t});"
        },
        "IBMCore.common.module.masthead": {
            "name": "IBMCore.common.module.masthead",
            "shortname": "IBMCore.common.module.masthead",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 17,
            "description": "Masthead.\n\t<br />\n\t<br />This is the main file for the masthead and everything associated with it.\n\t<br />This waits for translations to be available and onload will create the main masthead links and associated functionality.\n\t<br />\n\t<br />Available options/settings:\n\t\t\"alternate\": Same as the default, but WITHOUT the inline main masthead links.\n\t\t\"popup\": For use ONLY on popup pages. Only the logo shows in the masthead."
        },
        "IBMCore.common.module.mobilemenu": {
            "name": "IBMCore.common.module.mobilemenu",
            "shortname": "IBMCore.common.module.mobilemenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 1,
            "description": "This builds the hamburger menu (formerly \"mobile menu\").\n\t<br />It simply replicates the masthead links + page nav links and put them into a overlay that slides in from the right."
        },
        "IBMCore.common.module.merchandising": {
            "name": "IBMCore.common.module.merchandising",
            "shortname": "IBMCore.common.module.merchandising",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 4,
            "description": "NOTICE: MTE (Merchandising module) has been shut down and is no longer in service.\n\t<br />"
        },
        "IBMCore.common.module.sharethiscontent": {
            "name": "IBMCore.common.module.sharethiscontent",
            "shortname": "IBMCore.common.module.sharethiscontent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 1,
            "description": "\"Share this content\" widget.\n\t<br />\n\t<br />Disabled by default. To enable it on your page, use the standard config option and add this JS snippet to your page:\n\t\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tsharethiscontent: { enabled: true }\n\t\t});\n<br>To add a social sharing link for your country's page that is country appropriate/specific, set it in the same config option, but in a \"links\" object, giving it an ID, URL (with substitution holders) and the class to use. Wherever you place the {url} and {text} placholders, the widget will dynamically substitute in the page's URL and the user's selected text.\n<br><br>Below is a (fake) example:\n\t\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tsharethiscontent: {\n\t\t\t\tenabled: true,\n\t\t\t\tlinks: {\n\t\t\t\t\tbleisbo: {\n\t\t\t\t\t\turl: \"https://bleisbo.com/share/?url={url}&text={text}\",\n\t\t\t\t\t\tlinkClass: \"ibm-bleisbo-mono-link\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});"
        },
        "IBMCore.common.module.sharethispage": {
            "name": "IBMCore.common.module.sharethispage",
            "shortname": "IBMCore.common.module.sharethispage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 1,
            "description": "Share this page widget. Replaces old SBS bar from v17.\n\t<br />\n\t<br />Waits for translations to be retrieved then automatically creates and injects the widget if's on the page.\n\t<br />\n\t<br />Enabled by default, BUT only shows up if and where you put the placeholder div on the page. No DIV, no show.\n\t<br />\n\t<br />To disable add this JS snippet to your page:\n\t\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tsharethispage: { enabled: false }\n\t\t});"
        },
        "IBMCore.common.module.sitenavmenu": {
            "name": "IBMCore.common.module.sitenavmenu",
            "shortname": "IBMCore.common.module.sitenavmenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 1,
            "description": "Site navigation menu\n\t<br />\n\t<br />This is the site navigation menu bar that's above the leadspace. \n\t It's got the site name on the left and links and drop-down menus on the right.\n\t<br />By default the menunav is sticky. Stickyness can be disabled by adding the \n\t attribute to the div:  data-sticky=\"false\"\n\t<br />"
        },
        "IBMCore.common.module.urx": {
            "name": "IBMCore.common.module.urx",
            "shortname": "IBMCore.common.module.urx",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/modules/urx-loader.js",
            "line": 1,
            "description": "URX sign-in service library loader\n\t<br />\n\t<br />This inject the URX sign-in service library that allows pages to have users register/sign-in via an overlay \n\t on their page, instead of going off to a registration form. Enabled via the DDO as a property with enabled:true. Just \n\t like liveperson and Notice/Choice\n\t\n\t\n\tdigitalData = {\n\t\tpage: {\n\t\t\t.....\n\t\t\t\n\t\t\tpageInfo: {\n\t\t\t\t.....\n\t\t\t\t\n\t\t\t\t\n\t\t\t},\n\t\t\turx: {\n\t\t\t\tenabled: true\n\t\t\t}\n\t\t}\n\t}"
        },
        "IBMCore.common.util.a11y": {
            "name": "IBMCore.common.util.a11y",
            "shortname": "IBMCore.common.util.a11y",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 1,
            "description": "Accessibility utilities.\n\t<br />Things in here are only cases where it's not feasible nor realistic for the page dev to put \n\tproper accessibility keyboard controls (required by JS) on an element. Item here are for __page shell elements only__.\n\t<br />\n\t<br />Currently these are generic a11y utilities and widgets, and only contain inits for \n\t primary tabs (since there's no other JS associated with them.)\n\t<br />\n\t<br />Accessibility is responsibility of the thing that generates the HTML element on the page:\n\t<br />Template generator or widget's JS or page developer (for content space HTML)."
        },
        "IBMCore.common.util.anchorlinkAdjustment": {
            "name": "IBMCore.common.util.anchorlinkAdjustment",
            "shortname": "IBMCore.common.util.anchorlinkAdjustment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/anchorlink-adjustment.js",
            "line": 1,
            "description": "Basic utility that will adjust the scroll when using menunav or 'sticky' top element and anchorlinks on the page.\n\t<br />The issue is that menunav and sticky stuff overlays content, covering up the top of the anchor section.\n\t<br />Optional. Only needed on pages with menunav + anchor/in page links that worry about it.\n\t<br />\n\t<br />\n\tUsage:\nSimply add the <code>data-widget=\"anchorlinkadjustment\"</code> attribute to your UL/container of links.\n\t\t\n\t\t<ul data-widget=\"anchorlinkadjustment\">\nFor dynamically added content or to manually init, pass DOM element or jQuery selector to the function:\n\t\n\tIBMCore.common.util.anchorlinkAdjustment.adjustLinks(\"#myListID\");"
        },
        "IBMCore.common.util.color": {
            "name": "IBMCore.common.util.color",
            "shortname": "IBMCore.common.util.color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 1,
            "description": "Color utilities. \n\t<br />\n\t<br />Takes a color and does various things with it (awesome description, I know).\n\t<br />Used for overlay and tooltips to easily support cross-browser color support on custom colored overlay and tooltips.\n\t<br />\n\t<br />Usage:\n\t\t\n\t\t// Using the background color, figure out and set the proper text color (black or white)\n\t\t//  for the proper contrast ratio for accessibility.\n\t\tvar myColorObject = IBMCore.common.util.color.createColor(\"#f3ac89\");\n\t\tjQuery(\"#someContentId\").css(\"color\", myColorObject.accessibleTextColor);"
        },
        "IBMCore.common.util.config": {
            "name": "IBMCore.common.util.config",
            "shortname": "IBMCore.common.util.config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/config.js",
            "line": 1,
            "description": "Helpers to set the page configuration.\n\t<br />\n\t<br />Hierarchy of final page config settings is as follows:\n\t<br /> 1. Defaults out of IBMCore.www.config.\n\t<br /> 2. Any settings by page developer using IBMCore.common.util.config.set.\n\t<br />\n\t<br />Usage:\n\tIBMCore.common.util.config.set({\n\t\t\tmegamenu: {\n\t\t\t\ttype: \"alternate\"\n\t\t\t}\n\t\t});"
        },
        "IBMCore.common.util.cookie": {
            "name": "IBMCore.common.util.cookie",
            "shortname": "IBMCore.common.util.cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/cookie.js",
            "line": 1,
            "description": "Cookie utilities.\n\t<br />\n\t<br />Use this wherever possible so only one common and secure cookie implementation exists.\n\t<br />Use these functions and don't write your own."
        },
        "IBMCore.common.util.coreservices": {
            "name": "IBMCore.common.util.coreservices",
            "shortname": "IBMCore.common.util.coreservices",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 4,
            "description": "NOTE: No longer in service. Shutdown mid-2018\n\t<br>Provides the functionality to call the SWWIF services/bundled service call.\n\t<br />\n\t<br />Doesn't have to be bundled, can be called single request instantly, but bundled saves # of requests.\n\t<br />It's like a bus leaving the station... Give everyone time to buy a ticket and get on the bus. \n\t At a certain time the bus is leaving the station with whomever is on it. However, if you miss the bus you \n\t  can always just hail a taxi for yourself whenever you want (\"makeRequest\" function)."
        },
        "IBMCore.common.util.data": {
            "name": "IBMCore.common.util.data",
            "shortname": "IBMCore.common.util.data",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/data.js",
            "line": 1,
            "description": "This namespace provides functions to load data (JS objects) for JavaScript,\n\t depending on the cc/lc settings of the page. Its aim is simplicity in using it and being able\n\tto re-use for i.e. translations.\n\t<br />\n\tBy default all URLs are loaded from //www.ibm.com/common/translations/{TOKEN}/{CC}/{LC}/{ENC}.js,\n\twhich is the location where ECM generates out the translation files. The files have to be in a specific\n\t format to work with the data framework:\n\t<br />\n\t<br />Usage:\n\t\t\t\n\t\t// Sample static file contents:\n\t\tIBMCore.common.util.data.provide(\"TOKEN\", {\n\t\t\t\"title\": \"My Title in German\",\n\t\t\t\"desc\": \"Well, this is the GERMAN translation\"\n\t\t});\nThe static file must call the provide() callback and pass in the unqiue token and  any object containing data.\n\t<br /><br />Custom JS on page usage:\n\t\t\n\t// Once the static files are in place the user can call the get function to say \"I need these translations, and when you get them, call my callback function passing them to me\" ex:\n\tIBMCore.common.util.data.get(\"test1\", function(trans) {\n\t\tjQuery(\"#someID\").html(trans.test1.title); // You can reference the locally passed object.\n\t\tjQuery(\"#someID\").html(IBMcore.common.translations.data.test1.desc); // Or you can reference the full global object path.\n\t});\nIn the above sample the translation identified by the token \"test1\" is being loaded from ibm.com and once loaded \n\tthe callback function is executed and is passed the specific translations object that was requested. The JS then uses the translations and changes the text in the specified DOM elements.\n\t<br />\n\t<br />\n\t__NOTE:__ Certain tokens are not allowed: get, provide, settings, exists"
        },
        "IBMCore.common.util.debug": {
            "name": "IBMCore.common.util.debug",
            "shortname": "IBMCore.common.util.debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/debug.js",
            "line": 1,
            "description": "Debug utility to use instead of console.\n\t<br>Queues/stores up messages and functions and doesn't show them in the console by default.\n\t<br>When you want to show the messages in the console, call the debug.show() function.\n<br />Usage:\n\t\t\n\t\tIBMCore.common.util.debug.add(\"log\", \"It worked.\");\n\t\tIBMCore.common.util.debug.add(\"error\", \"This does not equal that.\");"
        },
        "IBMCore.common.util.eventCoordinator": {
            "name": "IBMCore.common.util.eventCoordinator",
            "shortname": "IBMCore.common.util.eventCoordinator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 1,
            "description": "Publish/subscribe messaging utility. \n\t<br />\n\t<br />An event messaging utility that allows owners to publish messages that any other script can subscribe to and be notified when they happen. The event coordinator performs a store and forward function to route messages from publishers to subscribers.\n\t<br />A \"notify me when ____ happens\" utility that provides a far more efficient way to know when events happen, rather than setting up a listener loop and continuously polling to see if something happened yet. For example... instead of asking your dad \"are we there yet?\" every 5 minutes on a 2 hour drive, you say \"tell me when we're there.\"\n\t<br />\n\t<br />Usage:\n\t\t\n\t\t// Setup events to publish and let other code subscribe to.\n\t\tmyEvents = IBMCore.common.util.eventCoordinator(myPublicObject \"my nice name\", [\n\t\t\t\"ready\",\n\t\t\t\"loading\",\n\t\t\t\"error\"\n\t\t]);\n\t\t\n\t\t// Publish an event.\n\t\tmyEvents.publish(\"ready\");\n\t\t\n\t\t// Subscribe to someone's event:\n\t\tsomeoneElsesPublicObject.subscribe(\"ready\", \"my name\", myCallbackFunctionName);"
        },
        "IBMCore.common.util.freezeScrollbars": {
            "name": "IBMCore.common.util.freezeScrollbars",
            "shortname": "IBMCore.common.util.freezeScrollbars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/freezescrollbars.js",
            "line": 1,
            "description": "Utility that adds/removes class to hide the browser scrollbars. Used for overlays.\n\t<br />\n\t<br />Class sets overflow: hidden, and adjusts page x pixels over to compensate for the missing scrollbars so the page doesn't shift/jitter when we show/hide overlays."
        },
        "IBMCore.common.util.gatekeeper": {
            "name": "IBMCore.common.util.gatekeeper",
            "shortname": "IBMCore.common.util.gatekeeper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 1,
            "description": "This file is an add-on to the event coodinator.\n\tThis allows you to subscribe to multiple events. \n\tEx:  \"After all three of these events happen: ____ && ____ && ____ , tell me.\""
        },
        "IBMCore.common.util.getCurrentGridSize": {
            "name": "IBMCore.common.util.getCurrentGridSize",
            "shortname": "IBMCore.common.util.getCurrentGridSize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 11
        },
        "Other IBM - grid change": {
            "name": "Other IBM - grid change",
            "shortname": "Other IBM - grid change",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 56
        },
        "IBMCore.common.util.meta": {
            "name": "IBMCore.common.util.meta",
            "shortname": "IBMCore.common.util.meta",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 1,
            "description": "Utility to capture all meta information on the page.\n\t<br />\n\t<br />Waits for the body element to load, then merges in the digitalData object into meta object, and normalized some country/language and other misc meta data. Also contains the utility to swap the page shell's locale.\n__Special feature: Changing the page shell locale__ \n\t<br />For pages that want to do personalization or \"language first\" in an effort to provide the user with more relevant content. If you detect that the user is in a different country than your page is coded for, you can easily change the page shell masthead/footer/SBS locale by running the following JS snippet using any proper locale using standard $lc-$cc format:\n\t\n\t\tIBMCore.common.util.meta.changePageLocale(\"fr-ca\"); // EX: French Canada"
        },
        "IBMCore.common.util.addCssRule": {
            "name": "IBMCore.common.util.addCssRule",
            "shortname": "IBMCore.common.util.addCssRule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 12
        },
        "IBMCore.common.util.convertSecondsToHMS": {
            "name": "IBMCore.common.util.convertSecondsToHMS",
            "shortname": "IBMCore.common.util.convertSecondsToHMS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 74
        },
        "IBMCore.common.util.generateId": {
            "name": "IBMCore.common.util.generateId",
            "shortname": "IBMCore.common.util.generateId",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 109
        },
        "IBMCore.common.util.getDataAttributes": {
            "name": "IBMCore.common.util.getDataAttributes",
            "shortname": "IBMCore.common.util.getDataAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 134
        },
        "IBMCore.common.util.getScrollbarWidth": {
            "name": "IBMCore.common.util.getScrollbarWidth",
            "shortname": "IBMCore.common.util.getScrollbarWidth",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 169
        },
        "IBMCore.common.util.has12grid": {
            "name": "IBMCore.common.util.has12grid",
            "shortname": "IBMCore.common.util.has12grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 206
        },
        "IBMCore.common.util.hasScrollbars": {
            "name": "IBMCore.common.util.hasScrollbars",
            "shortname": "IBMCore.common.util.hasScrollbars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 229
        },
        "IBMCore.common.util.setIpcCookie": {
            "name": "IBMCore.common.util.setIpcCookie",
            "shortname": "IBMCore.common.util.setIpcCookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 245
        },
        "IBMCore.common.util.string.htmlspecialchars": {
            "name": "IBMCore.common.util.string.htmlspecialchars",
            "shortname": "IBMCore.common.util.string.htmlspecialchars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 272
        },
        "IBMCore.common.util.queue": {
            "name": "IBMCore.common.util.queue",
            "shortname": "IBMCore.common.util.queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 1,
            "description": "__NOTE:__ Please use the publish/subscribe event utility. Only use this for listening to non-DOM events, multiple async coordination, other scripts, or script events that you can't setup an event publisher for.\n<br />\n\t<br />The queue utility supports a waiting queue, basically a listener.\n\t<br />For example some code might only be ready for execution once a certain page element exists on the page. \n\t<br />Waiting for the whole page to be ready is too slow if your element is at the top.\n\t<br />\n\t<br />\n\tJust add the elements to the queue and it will execute the callback function once the condition returns true.\n\t<br />\n\t<br />Unless you know the condition is guaranteed to happen, ALWAYS set a timeout to remove the listener so it doesn't infinitely\n\tkeep listening for the condition and eat up memory.\n\t<br />\n\t<br />\n\tUsage:\n\t\t\n\t\t// Add a listener for when our dynamic list is populated.\n\t\t// And then setup a kill for the listener after 5 seconds b/c it would have happened by now, or it never will.\n\t\tmyQueueItem = IBMcore.common.util.queue.push(\n\t\t\tfunction(){\n\t\t\t\treturn jQuery(\"#someDynamicList li\").length !== 0;\n\t\t\t},\n\t\t\tfunction(){\n\t\t\t\talert(\"The dynamic list is populated\");\n\t\t\t}\n\t\t);\n\t\t\n\t\tsetTimeout(function(){\n\t\t\tIBMCore.common.util.queue.remove(myQueueItem);\n\t\t}, 5000);"
        },
        "IBMCore.common.util.scrolledintoview": {
            "name": "IBMCore.common.util.scrolledintoview",
            "shortname": "IBMCore.common.util.scrolledintoview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/scrolledintoview.js",
            "line": 1,
            "description": "Tells you if an element is visible in the viewport window.\n<br />Use this when you want to wait to animate something or do an action when the element is \"in view\", or use as a helper for infinite scroll functionality."
        },
        "IBMCore.common.util.scrolltracker": {
            "name": "IBMCore.common.util.scrolltracker",
            "shortname": "IBMCore.common.util.scrolltracker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/scrolltracker.js",
            "line": 1,
            "description": "Scroller tracker utility.\n\t<br />\n\t<br />Utility to track user's scrolling and fire an every every ### pixels."
        },
        "IBMCore.common.util.statshelper": {
            "name": "IBMCore.common.util.statshelper",
            "shortname": "IBMCore.common.util.statshelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/statshelper.js",
            "line": 1,
            "description": "Stats events helper utility.\n\t<br />\n\t<br />Utility to use to fire a stats/metrics event for an action that you want to be able to pull reports on for your page."
        },
        "IBMCore.common.util.storage": {
            "name": "IBMCore.common.util.storage",
            "shortname": "IBMCore.common.util.storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 1,
            "description": "Browser localStorage utilities.\n\t<br />\n\t<br />Just like the common cookie utility, this provides a standardized way to work with browser localStorage.\n\t<br />This util uses JSON (browser API)."
        },
        "IBMCore.common.translations": {
            "name": "IBMCore.common.translations",
            "shortname": "IBMCore.common.translations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 1,
            "description": "Automatically gets the v18 common translations for all the UI text and links.\n\t<br />\n\t<br />Automatically runs onload. Waits until meta fires dataReady event, then gets the page locale's translation files, then publishes event for subscribers.\n\t<br />Any time that the meta init is run and publishes \"dataReady\", this translation init will run then publish \"dataReady\"."
        },
        "IBMCore.common.util.url": {
            "name": "IBMCore.common.util.url",
            "shortname": "IBMCore.common.util.url",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 1,
            "description": "Great little URL helpers.\n\t<br />\n\t<br />Utilities to help with misc URL-related functionality."
        },
        "IBMCore.common.util.user": {
            "name": "IBMCore.common.util.user",
            "shortname": "IBMCore.common.util.user",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 1,
            "description": "Web page user object.\n\t<br />\n\t<br />Sets up a common user object with data retrieved from the Demandbase service (or cached data).\n\t<br />Fires an event with user info onload for metrics tagging purposes.\n\t<br />Stores user info in localStorage object (if supported) with a TTL so we don't call the service on every page view.\n\t<br />Every x# days (set in a var) stored data object expires and we \"refresh\" it by calling DB and storing again.\n\t<br />\n\t<br />Subscribe to the particular event that is needed and then to retrieve user info call this:\n\t\n\tIBMCore.common.util.user.getInfo();\n<br />The list of properties that are added to the user are:\n\t\n\tFields that are populated from the demandbase WSR (web service request):\n\t\tannual_sales\n\t\taudience\n\t\taudience_segment\n\t\tb2b\n\t\tb2c\n\t\tcity\n\t\tcompany_name\n\t\tcountry\n\t\tcountry_name\n\t\temployee_count\n\t\temployee_range\n\t\tforbes_2000\n\t\tfortune_1000\n\t\tindustry\n\t\tinformation_level\n\t\tip\n\t\tmarketing_alias\n\t\tphone\n\t\tprimary_naics\n\t\tprimary_sic\n\t\tregistry_city\n\t\tregistry_country_code\n\t\tregistry_state\n\t\tstate\n\t\tstock_ticker\n\t\tstreet_address\n\t\tsub_industry\n\t\ttraffic\n\t\tweb_site\n\t\tzip\n\t\n\tFields populated from the IBMid WSR:\n\t\timageUrl\n\t\tnewNotificationCount\n\t\tsignedin\n\t\n\tMisc. other info that is added for completeness:\n\t\tbrowser_lang\n\t\tipcinfo"
        },
        "Other IBM - common v18 page tracker": {
            "name": "Other IBM - common v18 page tracker",
            "shortname": "Other IBM - common v18 page tracker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/util/v18pagetracker.js",
            "line": 1,
            "description": "Automatic tracking event for v18 pages.\n\t<br />\n\t<br />This event is automatically fired on page load and reports on certain features being used by the page."
        },
        "IBMCore.common.util.bitly": {
            "name": "IBMCore.common.util.bitly",
            "shortname": "IBMCore.common.util.bitly",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/vendor/bitly.js",
            "line": 1,
            "description": "bit.ly shortening API.\n\t<br />\n\t<br />Takes a URL and returns the bitly short version of it to the provided success (or error) callback function.\n\t<br />By default it will automatically grab and the current page URL unless you specify one, as shown below.\n\t<br />\n\t<br />Usage:\n\t\t\n\t\tIBMCore.common.util.bitly.shorten({\n\t\t\turl: \"http://long-url-to-shorten.com/\",\n\t\t\tsuccess: function(shortUrl) {...},\n\t\t\terror: function(longUrL) {...}\n\t\t});"
        },
        "jQuery:focusable": {
            "name": "jQuery:focusable",
            "shortname": "jQuery:focusable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/vendor/jquery-extensions.js",
            "line": 1,
            "description": "jQuery extensions\n\t<br />Used for IBM core JS foundation. \n\t<br />Extra custom jQuery extensions we've added onto jQuery."
        },
        "IBMCore.common.widget.ccfintercept": {
            "name": "IBMCore.common.widget.ccfintercept",
            "shortname": "IBMCore.common.widget.ccfintercept",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 1,
            "description": "Surveys widget.\n\t<br />\n\t<br />An intercept pops up a small window inviting users to participate in a single or multi-page survey,\n\t or to answer the one or two questions presented in the overlay (known as a \"quick poll\").\n\t<br />Intercepts can be used externally (www) to target users around the world and show on page load.\n\t<br />This survey widget also includes feedback system for Northstar sites allow the use of survey that can be\n\t triggers/show on click of a link, or programatically via the \"initFeedback\" API/method.\n\t<br />\n\t<br />Official survey documentation: http://www.ibm.com/standards/web/research/feedback-survey.\n<br />Usage:\n// JS config setting sample.\nIBMCore.common.util.config.set({\n\t\tsurvey: {\n\t\t\tenabled: true,\n\t\t\tintercept: {\n\t\t\t\tpercent: 90,\n\t\t\t\tstart: \"Apr 01 2015\",\n\t\t\t\tstop: \"Apr 31 2015\",\n\t\t\t\tinvitation: {\n\t\t\t\t\ttitle: \"Tell IBM what you think\",\n\t\t\t\t\tcontent: \"Would you like to take 1 minute to test this survey?\",\n\t\t\t\t\tyes_label: \"Yes\",\n\t\t\t\t\tno_label: \"No Thanks\"\n\t\t\t\t},\n\t\t\t\tsurvey: {\n\t\t\t\t\ttype: \"medallia\",\n\t\t\t\t\tid: \"web-exp\",\n\t\t\t\t\twidth: 700,\n\t\t\t\t\theight: 700\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});"
        },
        "IBMCore.common.widget.carousel": {
            "name": "IBMCore.common.widget.carousel",
            "shortname": "IBMCore.common.widget.carousel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 1,
            "description": "Carousel plug-in (slick carousel) pre-processor. \n\t<br />\n\t<br />Sets defaults for the slick carousel plug-in, and other random processing. Then it inits the jQuery slick carousel plug-in. \n\t<br />\n\t<br />Each immediate child element in a carousel widget is a carousel \"panel\".\n\t<br />\n\t<br />Usage:\n\t\n\t<div data-widget=\"carousel\"> \n\t\t...\n\t</div>\n__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\n\tjQuery(\"<your_carousel_container_selector>\").carousel(optionalSettingsObject);\n\t\n__To destroy the widget__ and return back the original HTML that the widget initialized on, call the common widget destroy method on your element:\n\t\t\n\tjQuery(\"<your_carousel_container_selector>\").data(\"widget\").destroy();\n<br />Allowed options and values. __All values are strings__ (html standards):\n\t<br />__data-widget__: carousel\n\t<br />__data-arrows__: true (default) | false  &nbsp; // Enables arrows navigation\n\t<br />__data-autoplay__: true | false (default)  &nbsp; // Enables autoplay/scrolling of carousel\n\t<br />__data-dots__: true (default) | false  &nbsp; // Enables dots navigation instead of the slide count\n\t<br />__data-infinite__: true | false (default)  &nbsp; // Enables infinite loop controls\n\t<br />__data-randomfirst__: true | false (default)  &nbsp; // Moves a random panel to be first\n\t<br />__data-slidecount__: true | false (default)  &nbsp; // Show the slide count instead of dots\n\t<br />\n\t<br />Apis are available to control the carousel with JS. \n\t<br /><br />Full official documentation is at <a href=\"http://kenwheeler.github.io/slick\" target=\"_blank\">http://kenwheeler.github.io/slick</a>.\n\t<br />\n\t<br />__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br />Some popular API uses:\n\t\t\n\t// Add a panel to the carousel, in position 0, before it:\n\tjQuery(\"<your_carousel_container_selector>\").slick(\"slickAdd\", \"<p>This is some text<p>\", 0, true);\n\t\t\n\t// Remove the second panel from the carousel\n\tjQuery(\"<your_carousel_container_selector>\").slick(\"slickRemove\", 1);\n\t\t\n\t// Goto the third panel in the carousel\n\tjQuery(\"<your_carousel_container_selector>\").slick(\"slickGoTo\", 2);"
        },
        "IBMCore.common.widget.datatable": {
            "name": "IBMCore.common.widget.datatable",
            "shortname": "IBMCore.common.widget.datatable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/datatable.js",
            "line": 1,
            "description": "Datatable plug-in pre-processor. \n\t<br />\n\t<br />Sets defaults for the datatable plug-in, adjusts for some data-* attributes (in case developer doesn't know to use - for camelcasing),  and other random processing to make the tables look correct. \n\t<br />Then it simply inits the jQuery datatable plug-in. \n\t<br />\n\t<br />Usage:\n\t\t\n\t<table data-widget=\"datatable\" .......>\n<br />__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n\t<br>\n\t<br>\n\t__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\t\n\tIBMCore.common.widget.datatable.init(\"yourTableId\", optionalSettingsObject);\n\t // Or\n\tIBMCore.common.widget.datatable.init(yourTableDOMelement, optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on, call the common widget destroy method on your element:\n\t\t\n\tjQuery(\"<your_table_selector>\").data(\"widget\").destroy();\n<br>Allowed options and values. __All values are strings__ (html standards):\n\t<br />__data-colReorder__: true | false (default)  &nbsp; // Let the user reorder columns (not persistent)\n\t<br />__data-info__: true | false (default)  &nbsp; // Shows \"Showing 1-10\" texts\n\t<br />__data-ordering__: true | false (default)  &nbsp; // Enables sorting\n\t<br />__data-paging__: true | false (default)  &nbsp; // Enables pagination\n\t<br />__data-scrollaxis__: x  &nbsp; // Allows horizontal scroll\n\t<br />__data-searching__: true | false (default)  &nbsp; // Enables text filtering"
        },
        "IBMCore.common.widget.datepicker": {
            "name": "IBMCore.common.widget.datepicker",
            "shortname": "IBMCore.common.widget.datepicker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/datepicker.js",
            "line": 1,
            "description": "Date picker plug-in pre-processor. \n\t<br />\n\t<br />Sets some defaults and other random processing, then it inits the widget.\n\t<br />v18 uses the pickadate/time plug-in: <a href=\"http://amsul.ca/pickadate.js/\" target=\"_blank\">http://amsul.ca/pickadate.js/</a>\n\t<br />For all options, detailed documentation, APIs, and advanced usage read the  <a href=\"http://amsul.ca/pickadate.js/\" target=\"_blank\">http://amsul.ca/pickadate.js/</a> documentation.\n<br />\n\t<br />Usage\n\t   \n    <input type=\"text\" value=\"\" data-widget=\"datepicker\">\n<br />__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>\n\t__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t<br>- Passing in a string with the ID, or the DOM element pointer.\n\t<br>- Optionally pass any settings you want (instead of using data-attributes on the HTML).\n\t\t\n\tIBMCore.common.widget.datepicker.init(\"yourFieldId\", optionalSettingsObject);\n\t // Or\n\tIBMCore.common.widget.datepicker.init(yourFieldDOMelement, optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on, call the common widget destroy method on your element:\n\t\t\n\tjQuery(\"<your_input_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.dyntabs": {
            "name": "IBMCore.common.widget.dyntabs",
            "shortname": "IBMCore.common.widget.dyntabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 1,
            "description": "Dynamic tabs widget.\n\t<br />\n\t<br />Automatically creates the dynamic tab widget onload and makes them dynamic tabs (show/hide content) based on the presence \n\tand value of the magic @data-widget=\"dyntabs\" attribute on the tab container.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<div id=\"ibm-primary-tabs\" class=\"ibm-dyntabs\" data-widget=\"dyntabs\">\nOr in the case of content space tabs:\n\t\t\n\t\t<div class=\"ibm-graphic-tabs ibm-dyntabs\" data-widget=\"dyntabs\">\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>\n\t__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\t\n\tjQuery(\"<your_tabwidget_container_selector>\").dyntabs(optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on, call the common widget destroy method on your element:\n\t\t\n\tjQuery(\"<your_tabwidget_container_selector>\").data(\"widget\").destroy();\n\n<br />Allowed options and values. __All values are strings__ (html standards):\n\t<br />__data-remembertab__: true (default) | false"
        },
        "IBMCore.common.widget.fileinput": {
            "name": "IBMCore.common.widget.fileinput",
            "shortname": "IBMCore.common.widget.fileinput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 1,
            "description": "File input widget.\n\t<br />\n\t<br />Automatically creates the file input widget onload based on the presence\tand value of the \n\tmagic @data-widget=\"fileinput\" attribute on the tab container. And optional \"data-multiple\" setting is available \n\tbut your server-side processing must be able to support it (array parameters).\n<br />\n\t<br />Usage:\n\t\t\n\t<input id=\"myInputField1\" type=\"file\" data-widget=\"fileinput\" />\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>\n\t__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\n\tjQuery(\"<your_input_selector>\").fileinput();\n\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_input_selector>\").data(\"widget\").destroy();\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-multiple__: true | false (default)  &nbsp; // Allows multiple attachments\n\t<br />__data-translation-browse__: \"string_value\"  &nbsp; // Provide a localized translation for \"Browse\"\n\t<br />__data-translation-remove__: \"string_value\"  &nbsp; // Provide a localized translation for \"Remove\". Only used be screen readers, not visible."
        },
        "IBMCore.common.widget.forms": {
            "name": "IBMCore.common.widget.forms",
            "shortname": "IBMCore.common.widget.forms",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/forms-misc.js",
            "line": 1,
            "description": "Misc general form scripts.\n\t<br />\n\t<br />File for misc small scripts for forms. Ex: The \"line form\" sliding of the labels.\n\t<br>\n\t<br>__Event usage__: Subscribe to the IBM widget init event that fires on your line form DOM element to know when the widget has been initialized.\n\t<br>"
        },
        "IBMCore.common.widget.formvalidator": {
            "name": "IBMCore.common.widget.formvalidator",
            "shortname": "IBMCore.common.widget.formvalidator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "line": 1,
            "description": "__DEPRECATED__\n\t<BR>Stop using this and use HTML5 \"email/phone/number/etc\" type input fields with @required attribute.\nForm validator widget.\n\t<br />\n\t<br />This is a HTML5 shim. We don't need this once we move to IE10+ support.\n\t<br />If enabled on a &lt;form>, it will check the validity of input, textarea, and select elements, and add an error class next to an invalid form element and focus on it... basically the same thing native HTML5 form validation does, but not as good.\n\t<br />\n\t<br />\n\tUsage\n\t\t\n\t<form action=\"______\" method=\"______\" data-formvalidator=\"enable\">\n<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject form HTML post-load, you can initialize the widget on your injected form HTML like this:\n\t\t\n\tIBMCore.common.widget.formvalidator.init(\"yourFormId\");\n \t // Or\n\tIBMCore.common.widget.formvalidator.init(yourFormDOMelement);\n__To destroy the widget__ and disable validation on the form:\n\t\t\n\tjQuery(\"<your_form_selector>\").data(\"widget-formvalidator\").destroy();"
        },
        "IBMCore.common.widget.leavingibm": {
            "name": "IBMCore.common.widget.leavingibm",
            "shortname": "IBMCore.common.widget.leavingibm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 1,
            "description": "Leaving IBM widget.\n\t<br />\n\t<br />This is an overlay nofication that tells the user that the service they are about to engage with\n\tis being performed on behalf of IBM, but on a non-IBM web site.\n\t<br>\n\t<br>__NOTE__: DO NOT put this on all external links. Read above for the exact specific context where this is needed.\n\t<br />\n\t<br />__Requirements__\n\t<br />The link's @href __must__ be prefixed with \"http://www.ibm.com/links/?url=\".\n\t<br />The link's URL (url param) __must__ be URL encoded if it contains any parameters.\n\t<br /> \n\t<br />Usage:\n\t\t\n\t<a data-widget=\"leaving\" class=\"ibm-external-link\" href=\"http://www.ibm.com/links/?url=http://www.lanyrd.com\">Register on Lanyrd</a>\n<br />Usage with URL with params:\n\t\t\n\t<a data-widget=\"leaving\" class=\"ibm-external-link\" href=\"http://www.ibm.com/links/?url=http://www.lanyrd.com%3Fsomeparam%3Dvalue%26xyz%3Dasdf\">Register on Lanyrd</a>\n<br>\n\t__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n\n<br>\n\t__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected element like this:\n\t\n\tjQuery(\"<your_link_selector>\").leavingibm();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_link_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.masonry": {
            "name": "IBMCore.common.widget.masonry",
            "shortname": "IBMCore.common.widget.masonry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/masonry.js",
            "line": 1,
            "description": "Masonry plug-in pre-processor. \n\t<br />\n\t<br />Sets defaults for masonry adjusts for some data-* attributes and other random processing, then it inits the widget. \n\t<br />__NOTE__ You must include the IBM masonry.js file on your page for this to work. This will init masonry onload \n\t<br />for any HTML that is tagged with this widget.\n<br>\n\t<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\t\n\tIBMCore.common.widget.masonry.init(\"yourContainerId\", optionalSettingsObject);\n\t // Or\n\tIBMCore.common.widget.masonry.init(yourContainerDOMelement, optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_masonry_container_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.overlay": {
            "name": "IBMCore.common.widget.overlay",
            "shortname": "IBMCore.common.widget.overlay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 1,
            "description": "Overlay widget.\n\t<br />\n\t<br />Automatically creates an overlay using the div/element's contents as the overlay contents. \n\t<br />This simply turns the element into an overlay. A common method is available to show the overlay by simply calling it\n\t and passing it the ID of the overlay that you want to show.\n\t<br />Overlay HTML has been simplified for v18.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<div class=\"ibm-common-overlay\" data-widget=\"overlay\" id=\"__someID__\">\n\t\t<p>My overlay content here.</p>\n\t</div>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t<br>- Optionally pass any settings you want (instead of using data-attributes on the HTML).\n\t\t\n\tjQuery(\"<your_overlay_container_selector>\").overlay(optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tIBMCore.common.widget.overlay.destroy(\"<your_overlay_id>\");\n\t  // or //\n\tmyOverlayObject.destroy();"
        },
        "IBMCore.common.widget.parallaxscroll": {
            "name": "IBMCore.common.widget.parallaxscroll",
            "shortname": "IBMCore.common.widget.parallaxscroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/parallaxscroll.js",
            "line": 1,
            "description": "Parallax scrolling widget. \n\t<br />\n\t<br />It's not magic. It simply moves the background up or down as a % of the page's scroll. \n\t<br />__NOTE: __ The styling needed for this (fixed position + cover) does not work on droid and ios. \n\t Those OS have disabled the \"cover\" style because it takes too much processing on a mobile device. SOL on that one.\n\t<br />To implement, simply add the widget to a div that wraps your columns container:  data-widget=\"parallaxscroll\", shown below.\n\t<br />Requirement: Obvious, but: You need a big background image for this to work.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<div data-widget=\"parallaxscroll\" style=\"background-image: url(//some/URL/to/your/image.file);\">\n<br>__NOTE:__ Make sure you only set the @background-image property (don't set @background) else it won't properly.\n\t<br>\n\t<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n\t<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t<br>- Passing in a string with the ID, or the DOM element pointer.\n\t\t\n\tIBMCore.common.widget.parallaxscroll.init(\"yourContainerId\");\n\t // Or\n\tIBMCore.common.widget.parallaxscroll.init(yourContainerDOMelement);\n__To destroy the widget__ and return the background to its original position and stop it from moving:\n\t\t\n\tjQuery(\"<your_parallaxscroll_container_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.rssdisplay": {
            "name": "IBMCore.common.widget.rssdisplay",
            "shortname": "IBMCore.common.widget.rssdisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 1,
            "description": "RSS feed display widget.\n\t<br />\n\t<br />Gets a RSS feed and generates a link list using the items from the RSS feed.\n\t<br />This uses the Expertise locator web service to get the RSS feed. SWWIF service #200.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<div data-widget=\"rssdisplay\" data-feedurl=\"http://someURL.com/to/rss/feed/\"></div>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n<br>- Optionally pass any settings you want (instead of using data-attributes on the HTML).\n\t\t\n\tjQuery(\"<your_RSSdisplay_container_selector>\").rssdisplay(optionalSettingsObject);\n\t\t\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_RSSdisplay_container_selector>\").data(\"widget\").destroy();\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-feedurl__: http://somefeed/url/here \n\t<br />__data-externalicon__: true | false (default)  &nbsp; // Shows the external icon instead of default arrow\n\t<br />__data-newwindow__: true | false (default)  &nbsp; // Opens all links in new window/tab"
        },
        "IBMCore.common.widget.setsameheight": {
            "name": "IBMCore.common.widget.setsameheight",
            "shortname": "IBMCore.common.widget.setsameheight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 1,
            "description": "Same height widget\n\t<br />\n\t<br />Automatically calculates the tallest height of the array of elements, and sets each element to that height.\n\t<br />On the single-column grid (small screen = no grid) it sets height to auto b/c everything is vertically stacked.\n\t<br />The data-items is a __CSS selector string that points to the elements you want to set the height on__, relative to the element the attribute is on. \n\t<br />\n\t<br />Usage:\n\t\n\t<div data-widget=\"setsameheight\" data-items=\" > div > .someItemsClass\">\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t<br>- Optionally pass any settings you want (instead of using data-attributes on the HTML).\n\t\t\n\tjQuery(\"<your_setsameheight_container_selector>\").setsameheight(optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_setsameheight_container_selector>\").data(\"widget\").destroy();\n\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-always__: true | false (default)  &nbsp; // Always set items the same height, even on small grid.\n\t<br />__data-excludesmallgrid__: true | false (default)  &nbsp; // Exclude setting items the same height on small grid. Used in conjunction with data-always."
        },
        "IBMCore.common.widget.scrollable": {
            "name": "IBMCore.common.widget.scrollable",
            "shortname": "IBMCore.common.widget.scrollable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 1,
            "description": "Scrollable plug-in pre-processor. \n\t<br />\n\t<br />Sets defaults for the scrollable plug-in, and other random processing . \n\t<br />Then it simply inits the jQuery scollable section plug-in. \n\t<br />\n\t<br />\n\tUsage:\n\t\t\n\t<div data-widget=\"scrollable\">....</div>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n<br><br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected container like this:\n\t\t\n\tjQuery(\"<your_scrollable_container_selector>\").scrollable();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_scrollable_container_selector>\").data(\"widget\").destroy();\nThis uses the Nanoscroll plug-in. <a href=\"NanoScroll.html\">View the documentation</a> for full APIs available."
        },
        "IBMCore.common.widget.selectlist": {
            "name": "IBMCore.common.widget.selectlist",
            "shortname": "IBMCore.common.widget.selectlist",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/selectlist.js",
            "line": 1,
            "description": "Select list widget.\n\t<br />\n\t<br />This creates a select list widget, using select2 plug-in. There are tons of options and APIs available.\n\t<br>Sets defaults for the select2 plug-in, and other random processing. Then it inits the jQuery select2 plug-in.\n\t<br />\n\t<br />\n\tUsage (no widget tagging needed):\n<select>....</select>\n<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br><br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected select like this:\n\t<br>- Passing in a string with the ID, or the DOM element pointer.\n\t<br>- Optionally pass any settings you want (instead of using data-attributes on the HTML).\nIBMCore.common.widget.selectlist.init(\"yourSelectlistId\", optionalSettingsObject);\n\t // Or\n\tIBMCore.common.widget.selectlist.init(yourSelectDOMelement, optionalSettingsObject);\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\njQuery(\"<your_selectlist_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.selectlistnav": {
            "name": "IBMCore.common.widget.selectlistnav",
            "shortname": "IBMCore.common.widget.selectlistnav",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 1,
            "description": "Select list nav widget.\n\t<br />\n\t<br />This is simply a select list with values that are FULLY QUALIFIED URLs.\n\t<br />On selection of an item in the list, the user goes to that URL.\n\t<br />\n\t<br />__Requirements:__ \n\t<br />The form __must__ be set with the @action pointing to the IBM redirect script for cases where JS is disabled or broken.\n\t<br />The form's select list __must__ have a @name=\"url\" so that it sends the proper param to the IBM redirect script.\n\t<br />The form's options' values __must__ be fully qualified URLs.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<form action=\"http://www.ibm.com/links\" method=\"get\" data-widget=\"selectlistnav\">\n\t\t<select name=\"url\">\n\t\t.....\n<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n<br><br>__Special case:__ In scenarios where you dynamically inject HTML post page load, you can initialize the widget on your injected form like this:\n\t\t\n\tjQuery(\"<your_form_selector>\").selectlistnav();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_form_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.showhide": {
            "name": "IBMCore.common.widget.showhide",
            "shortname": "IBMCore.common.widget.showhide",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 1,
            "description": "The show/hide widget (not twisty).\n\t<br />\n\t<br />This creates a basic show/hide section, a multi-panel (accordion), and the description show/hide widget.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<!-- Show/hide descriptions -->\n\t<div data-widget=\"showhide\" class=\"ibm-simple-show-hide\">...</div>\n\t\t\n\t<!-- Show/hide single and multiple panels (accordion) -->\n\t<div data-widget=\"showhide\" data-type=\"panel\" class=\"ibm-show-hide\">...</div>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br><br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_showhide_container_selector>\").showhide();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_showhide_container_selector>\").data(\"widget\").destroy();\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-type__: panel &nbsp; // Creates single and multi-panel (accordion) widgets"
        },
        "IBMCore.common.widget.stepindicator": {
            "name": "IBMCore.common.widget.stepindicator",
            "shortname": "IBMCore.common.widget.stepindicator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 1,
            "description": "The step indicator widget.\n\t<br />\n\t<br />This creates a step indicator widget. The same as v17 but using the new data-attributes.\n\t<br />Usage:\n\t\t\n\t<div data-widget=\"stepindicator\" class=\"ibm-step-indicator\">\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n\t<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_stepindicator_container_selector>\").stepindicator();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_stepindicator_container_selector>\").data(\"widget\").destroy();\n<br />Allowed options and values. __All values are strings__ (html standards):\n\t<br />__data-disableprevious__: true | false (default) &nbsp; // Disables ability to go to any previous step except the immediate previous."
        },
        "IBMCore.common.widget.stickytabs": {
            "name": "IBMCore.common.widget.stickytabs",
            "shortname": "IBMCore.common.widget.stickytabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 1,
            "description": "Enable sticky tabs option.\n\t<br />\n\t<br />Adding the data-widget=\"stickytabs\" attribute to your primary tabs enables the basic primary tabs to be \"sticky\".\n\t<br />This JS basically just adds/removes a class on scroll position comparison. CSS does the rest.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<div id=\"ibm-primary-tabs\" data-widget=\"stickytabs\">\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized.\n<br><br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(document.getElementById(\"ibm-primary-tabs\")).stickytabs();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_table_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.syntaxhighlighter": {
            "name": "IBMCore.common.widget.syntaxhighlighter",
            "shortname": "IBMCore.common.widget.syntaxhighlighter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/syntaxhighlighter.js",
            "line": 1,
            "description": "Syntaxhighlighter plug-in pre-processor. \n\t<br />\n\t<br />Sets defaults for the Syntaxhighlighter plug-in, cleans it up and other random processing to make the widget work. \n\t<br />Then it simply inits the jQuery Syntaxhighlighter plug-in. \n\t<br />\n\t<br />Usage:\n\t\t\n\t<pre data-widget=\"syntaxhighlighter\">...</pre>\n__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_pre_container_selector>\").syntaxhighlighter();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_pre_container_selector>\").data(\"widget\").destroy();\nStyling options are set via the class attribute. __All values are strings__ (html standards):\n\t<br />__data-maxheight__ : {Any valid CSS max-height value} The max-height setting to use to enable vertical scrolling of the container.\n\t<br />__class=\"brush: js; html-script: true\"__ &nbsp; // (default if no class is set) Format for HTML and JS inside &lt;script> tags.\n\t<br />__class=\"brush: js\"__ &nbsp; // Format for inline/pure JS code only.\n\t<br />__class=\"brush: js; html-script: true; gutter: true\"__ &nbsp; // Show the gutter and line #s.\n\t<br />__class=\"brush: js; html-script: true; gutter: true; highlight: [4]\"__ &nbsp; // Highlight the 4th line in the code.\n\t<br /><br />The highlighter style accepts an array of 1 or more #s, or a range. All of the following are valid:\n\t<br />__highlight: [4]__\n\t<br />__highlight: [2,4,7,13]__\n\t<br />__highlight: [3-7]__\n<br><br>This uses the syntaxhighlighter plug-in. <a href=\"http://alexgorbatchev.com/SyntaxHighlighter/\">View the documentation</a> for full documentation and APIs available."
        },
        "IBMCore.common.widget.tablerowselector": {
            "name": "IBMCore.common.widget.tablerowselector",
            "shortname": "IBMCore.common.widget.tablerowselector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/tablerowselector.js",
            "line": 1,
            "description": "Table row selector widget. \n\t<br />\n\t<br />Binds the checkbox in the table row to provide a visual cue that the row is selected by adding a class that changes the row background.\n\t<br />Automatically binds the table based on the presence and value of the magic @data-tablerowselector attribute on the table.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<table data-tablerowselector=\"enable\" cellspacing=\"0\" cellpadding=\"0\"........>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_table_selector>\").tablesrowselector();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_table_selector>\").data(\"widget-tablesrowselector\").destroy();"
        },
        "IBMCore.common.widget.tooltip": {
            "name": "IBMCore.common.widget.tooltip",
            "shortname": "IBMCore.common.widget.tooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 1,
            "description": "Tooltip widget.\n\t<br />\n\t<br />This will automatically create a custom mouse-over tooltip on the element, using either the @title attribute for the contents of the tooltip, or a named element ID's contents. Instead of the default browser tooltip, the user will see this one.\n\t<br>This uses the tipso plug-in: <a href=\"http://tipso.object505.com/\" target=\"_blank\">http://tipso.object505.com/</a>\n\t<br />There are a few APIs, such as programatically showing/hiding the tooltip. Documentation is available on the tipso site.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<a href=\"http://www.ibm.com/some/path\" title=\"This is my tooltip text\" data-widget=\"tooltip\">This is a link with a tooltip.</a>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_tooltip_trigger_selector>\").tooltip();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_tooltip_trigger_selector>\").data(\"widget\").destroy();\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-contentid__: {String}  &nbsp; // The @id of the element to use for the tooltip's content"
        },
        "IBMCore.common.widget.twisty": {
            "name": "IBMCore.common.widget.twisty",
            "shortname": "IBMCore.common.widget.twisty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 1,
            "description": "The twisty show/hide widget. \n\t<br />\n\t<br />This creates a basic twisty show/hide widget on a &lt;ul>. \n\t<br>It's different from the standard show/hide in that it is simply nested lists (and whatever can go in &lt;li>s).\n\t<br />\n\t<br />Usage:\n\t\n\t<ul data-widget=\"twisty\" class=\"ibm-twisty\">...</ul>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n<br>\n\t<br>__Special case:__ In scenarios where you dynamically inject the HTML after page load, you can initialize the widget on your injected HTML like this:\n\t\t\n\tjQuery(\"<your_twisty_container_selector>\").twisty();\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_twisty_container_selector>\").data(\"widget\").destroy();"
        },
        "IBMCore.common.widget.videolooper": {
            "name": "IBMCore.common.widget.videolooper",
            "shortname": "IBMCore.common.widget.videolooper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 1,
            "description": "Video looper widget/utility\n\t<br />\n\t<br />Tiny utility/widget that allows you to easily loop a &lt;video> element a certain # of times.\n\t<br />Simply add the widget and the # of times the video should play.\n\t<br />__NOTE__: You must set it to autoplay, but __not__ set the video \"loop\" attribute.\n\t<br />\n\t<br />Usage:\n\t\t\n\t<video data-widget=\"videolooper\" data-playtimes=\"3\"> ... </video>\n__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs.\n\t<br />\n\t<br />\n\t__To destroy the widget__ and return back the original HTML that the widget initialized on:\n\t\t\n\tjQuery(\"<your_table_selector>\").data(\"widget\").destroy();\nAllowed options and values. __All values are strings__ (html standards):\n\t<br />__data-playtimes__: &lt;number> (1 = default)"
        },
        "IBMCore.common.widget.videoplayer.kaltura": {
            "name": "IBMCore.common.widget.videoplayer.kaltura",
            "shortname": "IBMCore.common.widget.videoplayer.kaltura",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 1,
            "description": "Kaltura video widget.\n  <br>Dependency: videoplayer.js\n  <br>View the <a href=\"IBMCore.common.widget.videoplayer.html\">videoplayer.js</a> for all implementation and options detailer. It is the main controller class that creates the proper object and setup.\n  <br>This is the video player sub-class for the Kaltura embedded video player object.\n  <br>\n  <br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs."
        },
        "IBMCore.common.widget.videoplayer.ustream": {
            "name": "IBMCore.common.widget.videoplayer.ustream",
            "shortname": "IBMCore.common.widget.videoplayer.ustream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 1,
            "description": "Ustream video widget.\n\t<br>Dependency: videoplayer.js\n\t<br>The <a href=\"IBMCore.common.widget.videoplayer.html\">videoplayer.js</a> is the main controller that creates the proper object and setup.\n\t<br>This is the video player sub-class for the Ustream embedded video player object.\n\t<br>\n\t<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs."
        },
        "IBMCore.common.widget.videoplayer.youtube": {
            "name": "IBMCore.common.widget.videoplayer.youtube",
            "shortname": "IBMCore.common.widget.videoplayer.youtube",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 1,
            "description": "Youtube video widget.\n\t<br>Dependency: videoplayer.js\n\t<br>View the <a href=\"IBMCore.common.widget.videoplayer.html\">videoplayer.js</a> for all implementation and options detailer. It is the main controller class that creates the proper object and setup.\n\t<br>This is the video player sub-class for the Youtube embedded video player object.\n\t<br>\n\t<br>__Event usage__: Subscribe to the IBM widget init event that fires on your DOM element to know when the widget has been initialized and you can access its APIs."
        },
        "IBMCore.common.widget.videoplayer": {
            "name": "IBMCore.common.widget.videoplayer",
            "shortname": "IBMCore.common.widget.videoplayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/videoplayer.js",
            "line": 1,
            "description": "IBM video player widget.\n  <br />\n  <br />This only sets up the .videoplayer() jQuery plug-in and creates the video player widget factory. That's it.\n  <br />Automatically creates the proper video player widget on page load based on the presence and value of the\n  magic @data-widget=\"videoplayer\" attribute on the element.\n  <br />Each type of player is an object/class and is in it's own separate file for ease of maintenance.\n  <br />This file should only be touched if there is a new type of player, in which case you just add it to the factory.\n  <br />\n  <br />Usage:\n  <!-- Basic default inline video player -->\n    <div data-widget=\"videoplayer\" data-videoid=\"9mMzHSM2z14\" data-videotype=\"youtube\"></div>\n  <!-- Basic default \"play in an overlay\" video player -->\n    <p class=\"ibm-ind-link\"><a data-widget=\"videoplayer\" data-videodisplay=\"overlay\" data-videoid=\"9mMzHSM2z14\" data-videotype=\"youtube\" class=\"ibm-video-link\" href=\"https://www.youtube.com/watch?v=9mMzHSM2z14&index=1&list=WL\">Watch the video</a></p>\n  <!-- Basic default videos in a carousel via manual video list, \"play in an overlay\" -->\n    <div data-widget=\"videoplayer\" data-videodisplay=\"carousel-overlay\" data-videoid=\"0uje575Dewc, 9mMzHSM2z14, fZ_JOBCLF-I, eKGpsM0LGyY\" data-videotype=\"youtube\"></div>\n  <!-- Basic default videos in a carousel via YouTube playlist ID, \"play in an overlay\", specifying the # of columns(videos) per carousel panel -->\n    <div data-widget=\"videoplayer\" data-videodisplay=\"carousel-overlay\" data-carouselcolumns=\"3\" data-videoplaylistid=\"PLaFe0BJiho2qz2KOUVLdl1DLBA__P1K5Y\" data-videotype=\"youtube\"></div>\n__To destroy the widget__ and return back the original HTML that the widget initialized on:\njQuery(\"<your_table_selector>\").data(\"widget\").destroy();\n\n<br />Allowed options and values. __All values are strings__ (html standards):\n  <br />__data-widget__: videoplayer\n  <br />__data-autoplay__: true | false (default)\n  <br />__data-carouselcolumns__: 1 | 2 | 3 | 4 | 5 | 6\n  <br />__data-customplaceholder__: true | false (default)\n  <br />__data-ibmevent_&lt;eventParamNameLowercase>__: \"String value\"\n  <br />__data-imagesize__: large (default) | medium | thumbnail (Youtube only)\n  <br />__data-maxnumvideos__: n | 20 (default)\n  <br />__data-overlayplayersize__: medium (default) | large | xlarge\n  <br />__data-placeholderalttext__: \"String value\"\n  <br />__data-playervar_showinfo__: 0 | 1 (default)\n  <br />__data-showimageplaybutton__: true (default) | false\n  <br />__data-showvideodescription__: true | false (default)\n  <br />__data-showvideoduration__: true (default) | false\n  <br />__data-showvideotitle__: true (default) | false\n  <br />__data-theatermode__: true | false (default)\n  <br />__data-titledisplaytype__: below (default) | overlay\n  <br />__data-videodisplay__: inline (default) | overlay | overlayandtrigger | carousel-inline | carousel-overlay\n  <br />__data-videodurationcolor__: \"default\" (default) | \"none\",\n  <br />__data-videoid__: &lt;video\\_id>[,&lt;video\\_id>+]\n  <br />__data-videoplaylistid__: &lt;playlist\\_id>\n  <br />__data-videoratio__: \"16/9\" (default) | \"&lt;W>/&lt;H>\"\n  <br />__data-videotitleoverride__: &lt;empty>\n  <br />__data-videotype__: youtube | kaltura"
        },
        "IBMCore.common.widget.manager": {
            "name": "IBMCore.common.widget.manager",
            "shortname": "IBMCore.common.widget.manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/widgets/widget-manager.js",
            "line": 1,
            "description": "__DEPRECATED__: DO NOT USE. This iCheck widget will be completely removed from forms.js and icheck.js on May 4, 2017.\n\t<br />"
        },
        "IBMCore.namespace": {
            "name": "IBMCore.namespace",
            "shortname": "IBMCore.namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/base.js",
            "line": 18,
            "description": "Utility to verify and create namespaces/object paths if they don't already exist.\n<br />\n<br />Similar to $.extend : The first param is an object, and the second param is an object/namespace path to create in the first object (recursively).\n<br />Unlike a merge, it will not overwrite an existing object/path. It will only create an object/path if it doesn't already exist.\n<br />Specifying the last node of a namespace implicitly creates all prior nodes.\n<br />Returns the last/deepest object from the second parameter string path.\n<br />\n<br />Usage:\n\n\tIBMCore.namespace(IBMCore, \"common.util.someUtilityName\");",
            "params": [
                {
                    "name": "Existing",
                    "description": "namespace/object path to extend.",
                    "type": "String"
                },
                {
                    "name": "(Multiple)",
                    "description": "Namespace/object paths to verify and create in first param. Can be multiple params/paths to create.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The deepest namespace object. (If multiple arguments are passed, this will be the last namespace created)",
                "type": "Object"
            }
        },
        "Other IBM - common init": {
            "name": "Other IBM - common init",
            "shortname": "Other IBM - common init",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/common/init.js",
            "line": 1,
            "description": "This is the auto-init (controller) for WWW common widgets.\n\t<br />\n\t<br />If a widget is specific for WWW, put it in the www/init.js file.\n\t<br />\n\t<br />ONLY WIDGETS. Not \"modules\": Anything that's a common widget or magic data-attribute instantiated thing\n\t<br />\n\t<br />How it works: If content widgets are enabled (default), it will auto-init any widget here.\n\t<br />This allows for a global config setting to disable the auto-init of all content space widgets. \n\t<br />Developers can disable widgets in two ways: On the element using @data-init=\"false\" or globally using: config.contentwidgets.enabled = false."
        },
        "IBMCore.www.module.dynamiccontactmodule": {
            "name": "IBMCore.www.module.dynamiccontactmodule",
            "shortname": "IBMCore.www.module.dynamiccontactmodule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/www/modules/dynamic-contact-module.js",
            "line": 4,
            "description": "NOTE: No longer in service. Shutdown mid-2018\n\t<br>Dynamic contact module.\n\t<br />Service ID: 206\n\t<br />\n\t<br />This file adds a call to the bundled core services call. It requests a special dynamic contact module \n\t  based on the WTMcategory value. This will be deprecated soon and replaced by the new contact module service.\n\t<br />If the service returns one, it injects it in the contact module container overwriting the HTML coded one.\n\t<br />\n\t<br />__Disabled__ by default.\n\t<br />\n\t<br />To enable: You must have a WTMcategory value and add either one of these two JS snippets to your page:\n\t\t\n\t\tIBMCore.common.util.config.set({\n\t\t\tdynamicContactModule: { enabled: true }\n\t\t});\n\t\t\n\t\t// or set this object property in the digitalData object in the \"ibm\" section:\n\t\t\n\t\tibmDynamicCm: true"
        },
        "IBMCore.www.module.truste": {
            "name": "IBMCore.www.module.truste",
            "shortname": "IBMCore.www.module.truste",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/www/vendor/truste.js",
            "line": 1,
            "description": "Truste\n\t<br />\n\t<br />This file adds a call to include truste JS file and add the link to the footer.\n\t<br />"
        },
        "Other IBM - errorchecking": {
            "name": "Other IBM - errorchecking",
            "shortname": "Other IBM - errorchecking",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/errorchecking.js",
            "line": 1,
            "description": "Temp script to check for migration errors.\n\t<br />Don't worry, it runs post-load and via timeout so doesn't affect onscreen page load.\n\t<br />"
        },
        "Other IBM - jstimer-end": {
            "name": "Other IBM - jstimer-end",
            "shortname": "Other IBM - jstimer-end",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/jstimer-end.js",
            "line": 1,
            "description": "Used for testing/timing events and optimizing JS code performance.\n\t<br />\n\t<br />jstimer-start.js is at the top of JS build file. This file is at the end of the JS build file.\n\t<br />This file uses the jsStart timer as a reference + event subscriptions to test performance of key page items' rendering."
        },
        "Other IBM - jstimer-start": {
            "name": "Other IBM - jstimer-start",
            "shortname": "Other IBM - jstimer-start",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/jstimer-start.js",
            "line": 16,
            "description": "Used for testing/timing events and optimizing JS code performance.\n\t<br />\n\t<br />This file is at the top of JS build file and simply starts a timer:\n\t\t\n\twindow.v18JsStart = new Date().getTime();\njstimer-end.js is at the end of the JS build file and uses this timestamp to test performance of key page items' rendering."
        },
        "IBMCore.common.util.perf": {
            "name": "IBMCore.common.util.perf",
            "shortname": "IBMCore.common.util.perf",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IBMCore",
            "namespace": "",
            "file": "src/js/sources/ibm/perf.js",
            "line": 2
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js",
            "line": 1,
            "description": "SyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "version": "3.0.83 (July 02 2010)",
            "copyright": "Copyright (C) 2004-2010 Alex Gorbatchev.",
            "license": "Dual licensed under the MIT and GPL licenses.",
            "class": "jQuery.browser"
        },
        {
            "file": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js",
            "line": 1,
            "description": "SyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "version": "3.0.83 (July 02 2010)",
            "copyright": "Copyright (C) 2004-2010 Alex Gorbatchev.",
            "license": "Dual licensed under the MIT and GPL licenses.",
            "class": "jQuery.browser"
        },
        {
            "file": "src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js",
            "line": 1,
            "description": "SyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "version": "3.0.83 (July 02 2010)",
            "copyright": "Copyright (C) 2004-2010 Alex Gorbatchev.",
            "license": "Dual licensed under the MIT and GPL licenses.",
            "class": "jQuery.browser"
        },
        {
            "file": "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore-ibmcustom.js",
            "line": 1,
            "description": "Syntaxhighlighter does stupid shit and overwrites the native string.replace() method, \nbut they didn't check for replacement to be null or undefined.\nThis is a patch for that.",
            "class": "jQuery.browser"
        },
        {
            "file": "src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js",
            "line": 1,
            "description": "SyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "version": "3.0.83 (July 02 2010)",
            "copyright": "Copyright (C) 2004-2010 Alex Gorbatchev.",
            "license": "Dual licensed under the MIT and GPL licenses.",
            "class": "jQuery.browser"
        },
        {
            "file": "src/js/sources/ibm/common/lib/imagesloaded.js",
            "line": 7,
            "description": "EvEmitter v1.1.0\nLil' event emitter\nMIT License",
            "class": "Masonry",
            "module": "jQuery.dataTable"
        },
        {
            "file": "src/js/sources/ibm/common/lib/imagesloaded.js",
            "line": 196,
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array, Element, NodeList, String"
                },
                {
                    "name": "options",
                    "description": "- if function, use as callback",
                    "type": "Object or Function"
                },
                {
                    "name": "onAlways",
                    "description": "- callback function",
                    "type": "Function"
                }
            ],
            "class": "Masonry",
            "module": "jQuery.dataTable"
        },
        {
            "file": "src/js/sources/ibm/common/lib/imagesloaded.js",
            "line": 248,
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Node"
                }
            ],
            "class": "Masonry",
            "module": "jQuery.dataTable"
        },
        {
            "file": "src/js/sources/ibm/common/lib/imagesloaded.js",
            "line": 308,
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "Image"
                }
            ],
            "class": "Masonry",
            "module": "jQuery.dataTable"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 34,
            "description": "a classname for the pane element.",
            "itemtype": "property",
            "name": "paneClass",
            "type": "String",
            "default": "'nano-pane'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 42,
            "description": "a classname for the slider element.",
            "itemtype": "property",
            "name": "sliderClass",
            "type": "String",
            "default": "'nano-slider'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 50,
            "description": "a classname for the content element.",
            "itemtype": "property",
            "name": "contentClass",
            "type": "String",
            "default": "'nano-content'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 58,
            "description": "a classname for enabled mode",
            "itemtype": "property",
            "name": "enabledClass",
            "type": "String",
            "default": "'has-scrollbar'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 66,
            "description": "a classname for flashed mode",
            "itemtype": "property",
            "name": "flashedClass",
            "type": "String",
            "default": "'flashed'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 74,
            "description": "a classname for active mode",
            "itemtype": "property",
            "name": "activeClass",
            "type": "String",
            "default": "'active'",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 82,
            "description": "a setting to enable native scrolling in iOS devices.",
            "itemtype": "property",
            "name": "iOSNativeScrolling",
            "type": "Boolean",
            "default": "false",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 90,
            "description": "a setting to prevent the rest of the page being\nscrolled when user scrolls the `.content` element.",
            "itemtype": "property",
            "name": "preventPageScrolling",
            "type": "Boolean",
            "default": "false",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 99,
            "description": "a setting to disable binding to the resize event.",
            "itemtype": "property",
            "name": "disableResize",
            "type": "Boolean",
            "default": "false",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 107,
            "description": "a setting to make the scrollbar always visible.",
            "itemtype": "property",
            "name": "alwaysVisible",
            "type": "Boolean",
            "default": "false",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 115,
            "description": "a default timeout for the `flash()` method.",
            "itemtype": "property",
            "name": "flashDelay",
            "type": "Number",
            "default": "1500",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 123,
            "description": "a minimum height for the `.slider` element.",
            "itemtype": "property",
            "name": "sliderMinHeight",
            "type": "Number",
            "default": "20",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 131,
            "description": "a maximum height for the `.slider` element.",
            "itemtype": "property",
            "name": "sliderMaxHeight",
            "type": "Number",
            "default": "null",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 139,
            "description": "an alternate document context.",
            "itemtype": "property",
            "name": "documentContext",
            "type": "Document",
            "default": "null",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 147,
            "description": "an alternate window context.",
            "itemtype": "property",
            "name": "windowContext",
            "type": "Window",
            "default": "null",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 156,
            "itemtype": "property",
            "name": "SCROLLBAR",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 165,
            "itemtype": "property",
            "name": "SCROLL",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 174,
            "itemtype": "property",
            "name": "MOUSEDOWN",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 182,
            "itemtype": "property",
            "name": "MOUSEENTER",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 190,
            "itemtype": "property",
            "name": "MOUSEMOVE",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 199,
            "itemtype": "property",
            "name": "MOUSEWHEEL",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 207,
            "itemtype": "property",
            "name": "MOUSEUP",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 216,
            "itemtype": "property",
            "name": "RESIZE",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 224,
            "itemtype": "property",
            "name": "DRAG",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 233,
            "itemtype": "property",
            "name": "ENTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 242,
            "itemtype": "property",
            "name": "UP",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 251,
            "itemtype": "property",
            "name": "PANEDOWN",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 260,
            "itemtype": "property",
            "name": "DOMSCROLL",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 269,
            "itemtype": "property",
            "name": "DOWN",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 278,
            "itemtype": "property",
            "name": "WHEEL",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 287,
            "itemtype": "property",
            "name": "KEYDOWN",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 296,
            "itemtype": "property",
            "name": "KEYUP",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 305,
            "itemtype": "property",
            "name": "TOUCHMOVE",
            "type": "String",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 314,
            "itemtype": "property",
            "name": "BROWSER_IS_IE7",
            "type": "Boolean",
            "static": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 323,
            "itemtype": "property",
            "name": "BROWSER_SCROLLBAR_WIDTH",
            "type": "Number",
            "static": 1,
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 358,
            "description": "Returns browser's native scrollbar width",
            "itemtype": "method",
            "name": "getBrowserScrollbarWidth",
            "return": {
                "description": "the scrollbar width in pixels",
                "type": "Number"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 423,
            "description": "Prevents the rest of the page being scrolled\nwhen user scrolls the `.nano-content` element.",
            "itemtype": "method",
            "name": "preventScrolling",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "direction",
                    "description": "Scroll direction (up or down)",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 451,
            "description": "Enable iOS native scrolling",
            "itemtype": "method",
            "name": "nativeScrolling",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 466,
            "description": "Updates those nanoScroller properties that\nare related to current scrollbar position.",
            "itemtype": "method",
            "name": "updateScrollValues",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 495,
            "description": "Updates CSS styles for current scroll position.\nUses CSS 2d transfroms and `window.requestAnimationFrame` if available.",
            "itemtype": "method",
            "name": "setOnScrollStyles",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 528,
            "description": "Creates event related methods",
            "itemtype": "method",
            "name": "createEvents",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 642,
            "description": "Adds event listeners with jQuery.",
            "itemtype": "method",
            "name": "addEvents",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 663,
            "description": "Removes event listeners with jQuery.",
            "itemtype": "method",
            "name": "removeEvents",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 681,
            "description": "Generates nanoScroller's scrollbar and elements for it.",
            "itemtype": "method",
            "name": "generate",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 740,
            "itemtype": "method",
            "name": "restore",
            "access": "private",
            "tagname": "",
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 754,
            "description": "Resets nanoScroller's scrollbar.",
            "itemtype": "method",
            "name": "reset",
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller();"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 848,
            "itemtype": "method",
            "name": "scroll",
            "access": "private",
            "tagname": "",
            "example": [
                "\n\t$(\".nano\").nanoScroller({ scroll: 'top' });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 870,
            "description": "Scroll at the bottom with an offset value",
            "itemtype": "method",
            "name": "scrollBottom",
            "params": [
                {
                    "name": "offsetY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ scrollBottom: value });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 889,
            "description": "Scroll at the top with an offset value",
            "itemtype": "method",
            "name": "scrollTop",
            "params": [
                {
                    "name": "offsetY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ scrollTop: value });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 908,
            "description": "Scroll to an element",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "node",
                    "description": "A node to scroll to.",
                    "type": "Node"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ scrollTo: $('#a_node') });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 926,
            "description": "To stop the operation.\nThis option will tell the plugin to disable all event bindings and hide the gadget scrollbar from the UI.",
            "itemtype": "method",
            "name": "stop",
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ stop: true });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 949,
            "description": "Destroys nanoScroller and restores browser's native scrollbar.",
            "itemtype": "method",
            "name": "destroy",
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ destroy: true });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/nanoscroller.js",
            "line": 986,
            "description": "To flash the scrollbar gadget for an amount of time defined in plugin settings (defaults to 1,5s).\nUseful if you want to show the user (e.g. on pageload) that there is more content waiting for him.",
            "itemtype": "method",
            "name": "flash",
            "chainable": 1,
            "example": [
                "\n\t$(\".nano\").nanoScroller({ flash: true });"
            ],
            "class": "NanoScroll",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 22,
            "description": "Globals and constants",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 31,
            "description": "The date picker constructor",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 150,
            "description": "Set a datepicker item object.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 194,
            "description": "Get a datepicker item object.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 202,
            "description": "Create a picker date object.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 253,
            "description": "Create a range limit object using an array, date object,\nliteral “true”, or integer relative to another time.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 290,
            "description": "Check if a date unit falls within a date range object.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 299,
            "description": "Check if two date range objects overlap.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 315,
            "description": "Get the date today.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 327,
            "description": "Navigate to next/prev month.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 384,
            "description": "Normalize a date by setting the hours to midnight.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 393,
            "description": "Measure the range of dates.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 419,
            "description": "Create a viewset object based on navigation.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 427,
            "description": "Validate a date as enabled and shift if needed.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 550,
            "description": "Check if a date is disabled.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 592,
            "description": "Parse a string into a usable type.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 641,
            "description": "Various formats to display the object in.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 750,
            "description": "Check if two date units are the exact.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 782,
            "description": "Check if two date units overlap.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 809,
            "description": "Flip the “enabled” state.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 818,
            "description": "Mark a collection of dates as “disabled”.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 877,
            "description": "Mark a collection of dates as “enabled”.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 969,
            "description": "Create a string for the nodes in the picker.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 1272,
            "description": "The date picker defaults.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.date.js",
            "line": 1345,
            "description": "Extend the picker to add the date picker.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 29,
            "description": "The picker constructor that creates a blank picker.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 74,
            "description": "Initialize everything",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 167,
            "description": "Render a new picker",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 185,
            "description": "Destroy everything",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 226,
            "description": "Open up the picker",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 338,
            "description": "Close the picker",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 395,
            "description": "Clear the values",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 403,
            "description": "Set something",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 451,
            "description": "Get something",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 494,
            "description": "Bind events on the things.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 534,
            "description": "Unbind events on the things.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 550,
            "description": "Fire off method events.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 569,
            "description": "Wrap the picker holder components together.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 610,
            "description": "Prepare the input element with all bindings.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 656,
            "description": "Prepare the root picker element with all bindings.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 664,
            "description": "Prepare the holder picker element with all bindings.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 765,
            "description": "Prepare the hidden input element along with all bindings.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 877,
            "description": "The default classes and prefix to use for the HTML classes.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 903,
            "description": "Check if the default theme is being used.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 926,
            "description": "Get the width of the browser’s scrollbar.\nTaken from: https://github.com/VodkaBears/Remodal/blob/master/src/jquery.remodal.js",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 960,
            "description": "PickerConstructor helper methods.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 965,
            "description": "Create a group of nodes. Expects:\n`\n       {\n           min:    {Integer},\n           max:    {Integer},\n           i:      {Integer},\n           node:   {String},\n           item:   {Function}\n       }\n`",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1010,
            "description": "Create a dom node string",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1032,
            "description": "Lead numbers below 10 with a zero.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1040,
            "description": "Trigger a function otherwise return the value.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1048,
            "description": "If the second character is a digit, length is 2 otherwise 1.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1056,
            "description": "Tell if something is a date object.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1064,
            "description": "Tell if something is an integer.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1072,
            "description": "Create ARIA attribute strings.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/picker.js",
            "line": 1080,
            "description": "Extend the picker with a component and defaults.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 51,
            "license": "almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 76,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 252,
            "description": "Makes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 445,
            "description": "Just drops the config on the floor, but returns req in case\nthe config return value is used.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 453,
            "description": "Expose module registry for debugging and tooling",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 1995,
            "description": "This method will transfer the tabindex attribute from the rendered\nselection to the search box. This allows for the search box to be used as\nthe primary focus instead of the selection container.",
            "access": "private",
            "tagname": "",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/select2.js",
            "line": 5460,
            "description": "Override the trigger method to automatically trigger pre-events when\nthere are events that can be prevented.",
            "class": "jQuery.fn.slick",
            "module": "Nanoscroller"
        },
        {
            "file": "src/js/sources/ibm/common/lib/ustream-embedapi.js",
            "line": 1,
            "description": "Ustream Embed API\nhttp://ustream.tv/\n\nEnables sites using Ustream embed iframe to build and adapt on the embed player.\nThe Ustream Embed API provides basic methods to control the live stream\nor video playback, and enables the user to access essential events\nof the live stream or played video.",
            "class": "IBMCore.common.module.backtotop",
            "module": "jQuery.slick"
        },
        {
            "file": "src/js/sources/ibm/common/modules/backtotop.js",
            "line": 25,
            "description": "Callback from subscription to translations data 'dataReady' event publisher. \n<br />Checks if backtotop is enabled (default) and runs init if so.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.backtotop",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/backtotop.js",
            "line": 37,
            "description": "Called by autoInit.\n<br />Adds dynamic back to top link to bottom right of page, visible when scrolled down > 1 screen worth.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.backtotop",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/backtotop.js",
            "line": 81,
            "description": "Toggles the active class on the BTT link (show/hides it) and sets flag for performance enhancement so we only \n\tadd/remove the class when needed.",
            "itemtype": "method",
            "name": "toggleBackToTop",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.backtotop",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/canada-notice-loader.js",
            "line": 12,
            "description": "This fetches the canada-notice.js file (cookies notice) and injects it. That's it.\n<br />If these conditions are met, the Canada cookie notice JS is injected.\n<br />1. If it doesn't already exist (IBM.common.module.canadanotice is created when canada-notice.js is loaded).\n<br />2. Must be a CA-EN|FR page (DUH).",
            "itemtype": "method",
            "name": "autoInit",
            "class": "Other IBM - Canada notice loader",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/canada-notice.js",
            "line": 22,
            "description": "Automated callback from subscription to meta 'dataReady' event publisher.\n<br />These conditions must be met for the canada overlay notice:\n<br />1. Must be a CA-EN|FR page.\n<br />2. Must not have the flag that we've shown it to them already.\n<br />3. Must have storage enabled. There's no point in showing if we can't even track them.\n<br />\n<br />For the \"adchoices\" link at bottom, the only requirement is cc == \"ca\".",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.canadanotice",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/canada-notice.js",
            "line": 47,
            "description": "Just injects the link, appends to body.",
            "itemtype": "method",
            "name": "injectAdchoiceLink",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.canadanotice",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 135,
            "description": "Automated callback from subscription to meta 'dataReady' event publisher. Automatically inits if enabled.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 146,
            "description": "If a contact module exists in the HTML, this floats it offscreen and creates a button to click to slide it over.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 181,
            "description": "Does a lookup using the page locale codes to see if there's a matching \"region\" class to add to the page.\n<br />The class that's added here is used by the contact module CSS to add a region appropriate image to the contact module\nand the live person overlay.",
            "itemtype": "method",
            "name": "addLocaleClass",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 195,
            "description": "If a color class was set in the digitalData object, make the contact module and button background that color.",
            "itemtype": "method",
            "name": "setColorClassesToUse",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 212,
            "description": "Injects the contact module button using the coded contact module H2 as the text,\n and creates the open and close button and binds them to slide up/down.",
            "itemtype": "method",
            "name": "setupContactModule",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 334,
            "description": "CoreMetrics for the contact module.",
            "itemtype": "method",
            "name": "cmAnalytics",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 377,
            "description": "Whenever the translations are ready, add the translation for \"close\" to the contact module close button.",
            "itemtype": "method",
            "name": "translateCloseText",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/contact-module.js",
            "line": 387,
            "description": "Public API to show or hide the contact module.",
            "itemtype": "method",
            "name": "showContactModule",
            "params": [
                {
                    "name": "b",
                    "description": "True to show it, false to hide it.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.module.contactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/feedbacklink.js",
            "line": 22,
            "description": "Callback from subscription to meta 'dataReady'.\n<br />If feedbacklink (footer) is enabled (default all pages) inject it.\n<br />Only allowed to work on *.ibm.com pages per DOU with them.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "Other IBM - footer feedback link",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/feedbacklink.js",
            "line": 38,
            "description": "Subscribes to footer and sets flag if we didn't already subscribe,\n and once footer is ready, injects the \"feedback\" link.",
            "itemtype": "method",
            "name": "init",
            "class": "Other IBM - footer feedback link",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/feedbacklink.js",
            "line": 53,
            "description": "Inject the \"feedback\" link into the footer and bind it to init the survey (call the API) on click.\n<br>Also re-merges settings from page owner config in case they changed on a locale or other dynamic page change.",
            "itemtype": "method",
            "name": "injectFeedbackLink",
            "class": "Other IBM - footer feedback link",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 24,
            "description": "Publishes this event after footer links have been injected.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 34,
            "description": "Callback from subscription to translations 'dataReady' event publisher. Checks if footer is enabled and runs init if so.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 49,
            "description": "Called by autoInit after translations are ready.\n<br />Loops thru the footer link data and creates and injects the links into the footer, \n  overwriting the HTML coded ones.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 85,
            "description": "Gets the main footer links from translation data and creates and returns the UL HTML.",
            "itemtype": "method",
            "name": "createMainLinksHtml",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The main links UL HTML.",
                "type": "String"
            },
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 104,
            "description": "Create the column layout using 6 by default. If page has a 12 grid used, create using 12 grid classes.\n<br>Assumes if any 12 is found, it's being used entirely, because why the fuck would you use a 12 and a 6.",
            "itemtype": "method",
            "name": "createColumnLayout",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The footer HTML wrapped in a 6 or 12 col grid, depends what is detected on the page.",
                "type": "String"
            },
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footer.js",
            "line": 119,
            "description": "Gets the social \"follow us on\" footer links and returns the UL HTML.",
            "itemtype": "method",
            "name": "createSocialLinksHtml",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The HTML for the corporate \"Follow IBM\" links in the footer.",
                "type": "String"
            },
            "class": "IBMCore.common.module.footer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footermenu.js",
            "line": 13,
            "description": "Publishes this event after footer menu links have been injected.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.footermenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footermenu.js",
            "line": 24,
            "description": "Callback from subscription to translations 'dataReady' event publisher. \n<br />Menu link section only gets created if it's:\n<br />Enabled (default) + \n<br />The footer is not \"alternate\" + \n<br />The masthead is not \"popup\" type (forces popup footer).",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.footermenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footermenu.js",
            "line": 48,
            "description": "Basic loop. Loops thru each \"column\" array in the data file, creates the ibm-col-x-x, and loops thru each link in that\n array and creates it as a LI in the column. Generates all four columns HTML.",
            "itemtype": "method",
            "name": "createLinklistColumns",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "All four (or however many) .ibm-col-4-1 DIV HTMLs.",
                "type": "String"
            },
            "class": "IBMCore.common.module.footermenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/footermenu.js",
            "line": 77,
            "description": "Called by autoInit.\n<br />Loops thru the footermenu data and creates and injects the footer menu.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.footermenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/leftnav.js",
            "line": 19,
            "description": "Callback from meta ready.\n<br />If left nav exists and it hasn't already been processed automatically, setup the a11y and show/hide stuff.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.leftnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/leftnav.js",
            "line": 34,
            "description": "Called onload by default if left nav exists.\n<br />Sets up a11y controls and inits show/hides.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.leftnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/liveperson-loader.js",
            "line": 34,
            "description": "Callback from subscription to translations data 'dataReady' event publisher. \n<br />Checks if backtotop is enabled (default) and runs init if so.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.liveperson",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/liveperson-loader.js",
            "line": 48,
            "description": "Called by autoInit.\n<br />Sets proper var expected by LP code, injects common placeholder if none exists, then includes LP js.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.liveperson",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 1,
            "description": "TODO: Santelia: This needs general refactoring and clean up:\n- Remove the DOM injection placement logic from this file and put it in the footer and footer menu ones. \n\t\tSince they generate the elements, they know where it should go.\n\t- It should simply be a module that does nothing except generate a DOM element in a var that others can pickup.\n\t- You subscribe to ready event, and when ready you inject it where you want/need it.\n\t\tEx: \n\t\t\tFootermenu subscribes and injects in there.\n\t\t\tFooter (alternate) subscribes and injects in there.",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 30,
            "description": "Publishes this event after footer locale selector has been injected.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 35,
            "description": "Publishes this event if we can't get footer locale selector translations.",
            "itemtype": "event",
            "name": "error",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 49,
            "description": "Automated callback from subscription to meta 'dataReady' event publisher.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 71,
            "description": "Called by autoInit.\n<br />Request the country list if we don't have it already and subscribe to the footer\nto create the locale selector when the footer is ready.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 100,
            "description": "Subscribe to the footer if we don't already have a subscription to it (in cases of change page locale).\n<br>Then creates the locale selector when the footer fires \"ready\" event.",
            "itemtype": "method",
            "name": "subscribeToFooter",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 122,
            "description": "This runs after we get the v17 country list. This will get updated after we make a new v18 one.\nNow that we have the country list, wait for footer to be ready so we know where to put the selector.",
            "itemtype": "method",
            "name": "dataCallback",
            "params": [
                {
                    "name": "serviceData",
                    "description": "JSON object with data from the service call.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 147,
            "description": "This does the magic. Creates the locale selector HTML and sets up the custom link URLs that the\n page can override with &lt;link> elements.",
            "itemtype": "method",
            "name": "createSelector",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 158,
            "description": "Parse the country data from translations and build the select list HTML then returns it.",
            "itemtype": "method",
            "name": "createLocaleSelectorHtml",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The select list HTML.",
                "type": "String"
            },
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 207,
            "description": "Setup the locale selector with some magicness. Called after footer is injected into DOM, \n via setTimeout so we don't block important rendering.\n<br />Sorts it, selects the page's current locale, and swaps out any links for any corresponding local \n alternate links found in &lt;link rel=\"alternate\" hreflang=\"__\"> elements.\n<br />For information on this element: <a href=\"http://moz.com/learn/seo/hreflang-tag\" target=\"_blank\">http://moz.com/learn/seo/hreflang-tag</a>",
            "itemtype": "method",
            "name": "setupLocaleSelector",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localeselector.js",
            "line": 429,
            "description": "Callback for locale select list 'change' event binding. Can be disabled by page.",
            "itemtype": "method",
            "name": "defaultOnchangeAction",
            "class": "IBMCore.common.module.localeselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 110,
            "description": "prepares CountryMetaData object containing country - language pair from locale selector data",
            "itemtype": "method",
            "name": "processLocaleSelectorData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 169,
            "description": "reusable collection of functions, that actually trigger locale page notification",
            "itemtype": "method",
            "name": "startLocalPageNotification",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 189,
            "description": "Checks if a localized page is needed, and available.\n<br>If so, then create and show the notification bar.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 222,
            "description": "Takes the provided localized page URL and locale text and injects and shows the notification bar.",
            "itemtype": "method",
            "name": "createAndShowNotification",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data with the URL and locale name.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 288,
            "description": "Gets various country data needed to make a decision if we should show the bar or not\nFirst, it uses ipcInfo (set by user trough localeSelector) and if that fails, it falls back to previously used IP-based country detection",
            "itemtype": "method",
            "name": "getUserCountry",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "User's country code.",
                "type": "String"
            },
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 307,
            "description": "Gets various country data needed to make a decision if we should show the bar or not\nFirst, it uses ipcInfo (set by user trough localeSelector) and if that fails, it falls back to previously used IP-based country detection",
            "itemtype": "method",
            "name": "getUserLanguage",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An object with various locale info used to make a decision to show the bar or not.",
                "type": "String"
            },
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 339,
            "description": "Gets various locale data needed to make a decision if we should show the bar or not",
            "itemtype": "method",
            "name": "getLocaleInfo",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An object with various locale info used to make a decision to show the bar or not.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 370,
            "description": "Checks if the user should be shown a localized page notification bar, and if so, returns the URL and\n locale name to be used in the notificaiton bar.",
            "itemtype": "method",
            "name": "getAltLocalePageInfo",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The object with the suggested localized page URL and locale name.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 435,
            "description": "Gets/Sets the flag that the user clicked on a button so we don't show it again for X period of time.",
            "itemtype": "method",
            "name": "hasFlag",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "True or false if the user has the 'seen it' flag.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 454,
            "description": "Gets/Sets the flag that the user clicked on a button so we don't show it again for X period of time.\n<br>Sets both types for better consistency and x-domain usage.",
            "itemtype": "method",
            "name": "setFlag",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 475,
            "description": "Binds the buttons so we don't show it again if the user clicked on one of them.\n<br>It doesn't matter which one they clicked.",
            "itemtype": "method",
            "name": "setupButtons",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/localized-page-notification.js",
            "line": 512,
            "description": "If the user has already seen this or has cookies disabled, stop.\n<br>Else, subscribe to when our two events we need happen (IP and meta data ready) remove the holds and\n run the notification code to check locales and show bar if appropriate.",
            "itemtype": "method",
            "name": "waitForEvents",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.localpagenotification",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 9,
            "description": "Sets the data url for the banner",
            "type": "{string}",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 17,
            "description": "Key name for caching the banner content in session storage",
            "type": "{string}",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 24,
            "description": "Automated callback from subscription to meta 'dataReady' event publisher.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 32,
            "description": "Fetches the banner data before injecting",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 49,
            "description": "Checks if the wildcard list appears in the pathname",
            "params": [
                {
                    "name": "list",
                    "description": "array of blacklist path substrings",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 65,
            "description": "Checks if the criteria is met before injecting the banner:\n- bannerActive is true\n- current location.pathname is in the whitelist\n- lang content (lc-cc) exists",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 102,
            "description": "Renders the banner above the masthead",
            "params": [
                {
                    "name": "data",
                    "description": "Banner data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-banner.js",
            "line": 146,
            "description": "Renders the Think Banner",
            "params": [
                {
                    "name": "data",
                    "description": "Banner data",
                    "type": "Object"
                },
                {
                    "name": "countdown",
                    "description": "Date to countdown to",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadbanner",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 15,
            "description": "Publishes this event after search function is built.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 44,
            "description": "Callback from subscription to meta data 'ready' event publisher.\n<br />If masthead and search are enabled (default), subscribe to masthead then init masthead\nsearch (currently just does the mobile takeover parts).\n<br />If masthead search typeahead is enabled (default), subscribe to search then init typeahead feature.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 85,
            "description": "Callback from subscription to masthead 'ready' event publisher, inside autoInit.\n<br />Moves the search field into an overlay and binds the icon to open it and do all associated functions.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 123,
            "description": "Called from subscriptions of if mashtead, masthead search, and masthead typeahead are enabled.\nCan't do shit without those. This sets up type-ahead keypress functions and WSR to get suggested terms.",
            "itemtype": "method",
            "name": "initTypeahead",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 281,
            "description": "Empties the typeahead UL (removes the LIs) if there are items in it.",
            "itemtype": "method",
            "name": "clearTypeahead",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 293,
            "description": "Creates the typeahead UL from the passed results, highlights the string passed,\ninjects it into the box and shows the drop-down box.",
            "itemtype": "method",
            "name": "createTypeahead",
            "params": [
                {
                    "name": "searchString",
                    "description": "(String) The string that was searched on that provided the results object. Used to highlight (bold) them inthe list"
                },
                {
                    "name": "results",
                    "description": "(Object) The data object of returned results. Loops thru these and creates a list item using each one's text."
                }
            ],
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 343,
            "description": "Public method/API that simply returns the display state of the typeahead box.",
            "itemtype": "method",
            "name": "getDisplayState",
            "return": {
                "description": "The state name that the typeahead container is in.",
                "type": "String"
            },
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 354,
            "description": "Object for a WSR callback. Uses timeout to kills the previous called WSR if it has not already been called.\n<br />This is a \"wait this long to call this function\" setup. AKA: Throttling.",
            "itemtype": "method",
            "name": "makeTypeaheadRequest",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call after X ms have passed.",
                    "type": "Function"
                },
                {
                    "name": "ms",
                    "description": "The # of milliseconds to wait before running the passed function. If this function was called again within the time before the previous one was run, the previous one is cancelled and the timer starts over for the latest called function.",
                    "type": "Integer"
                }
            ],
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 371,
            "description": "Moves the \"active\" class to the next item in the list. Used on callback of an arrow key press.\n<br />Loops to first item if the bottom list item is active and you want to \"go to next\".",
            "itemtype": "method",
            "name": "gotoNextTypeaheadResult",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 397,
            "description": "Moves the \"active\" class to the previous item in the list. Used on callback of an arrow key press.\n<br />Loops to last item if the first list item is active and you want to \"go to previous\".",
            "itemtype": "method",
            "name": "gotoPrevTypeaheadResult",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 423,
            "description": "Calls the typeahead service, only if the term is not the same as the last one, and \"force\" wasn't used.\n<br />Includes switch for default Marketplace TA service if page doesn't have their own custom form and the default\n Marketplace one was used.",
            "itemtype": "method",
            "name": "requestTypeaheadText",
            "params": [
                {
                    "name": "forceRequest",
                    "description": "(Boolean) True if you want to force the WSR even if the term is the same. Used for the checkbox scope toggle."
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 565,
            "description": "Sets the field value to be the text from the currently active/highlighted item in the typeahead container and sets the\n a11y tagging for it.",
            "itemtype": "method",
            "name": "setInputFieldValue",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 585,
            "description": "Used onclick of a typeahead entry. Grabs the value and puts it as the search field value.",
            "itemtype": "method",
            "name": "setTypeaheadItemActive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The element (LI) to grab the value of and put into the search field value.",
                    "type": "JQuery element selector"
                }
            ],
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 609,
            "description": "Injects the default Marketplace scoped search form if none already existed on the page/HTML and\n sets up and binds the submit, open/close of the search field.",
            "itemtype": "method",
            "name": "setupSearchField",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 712,
            "description": "If the user scrolls while the typeahead box is opened, this closes it.",
            "itemtype": "method",
            "name": "setupCloseOnscroll",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 739,
            "description": "Fade in or out the masthead main links. Used on focus of search box to help reduce \"noise\" while using the search field\n and typeahead container.",
            "itemtype": "method",
            "name": "showInlinelinks",
            "params": [
                {
                    "name": "b",
                    "description": "True to fade the masthead links back in, false to fade them out.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 761,
            "description": "Sets the display type of the search field, used based on screen width/realestate and open/close features.\n<br />minimized = small screen icon only\n<br />maximized = small screen full-width masthead takeover\n<br />default = default inline search field (non-small-screen)",
            "itemtype": "method",
            "name": "showAs",
            "params": [
                {
                    "name": "type",
                    "description": "The display type to show the search field as.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 784,
            "description": "Removes all special classes and causes (CSS) to show it as default inline search field in masthead. (default design state).",
            "itemtype": "method",
            "name": "showInline",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 796,
            "description": "Add class to show it as maximized (masthead takeover, small screen) and freeze scrollbars (prevent body scrolling).",
            "itemtype": "method",
            "name": "showMaximized",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 809,
            "description": "Add class to show it as minimized (icon only, small screen) and un-freeze scrollbars.",
            "itemtype": "method",
            "name": "showMinimized",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-search.js",
            "line": 822,
            "description": "Shows/hides the actual typeahead container.",
            "itemtype": "method",
            "name": "showTypeaheadResults",
            "params": [
                {
                    "name": "b",
                    "description": "True to show the typeahead container, false to hide it.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.module.mastheadsearch",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 40,
            "description": "Callback from subscription to meta data 'ready' event publisher. Checks if masthead is enabled (default). \n<br />If enabled, subscribe to masthead and then init sticky feature if enabled.\n<br />Two separate checks so that a masthead type can override and disable/enable it (masthead.js).",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 57,
            "description": "Called by autoInit, this sets up the sticky functionality. The end.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 73,
            "description": "Makes the masthead not sticky (de-floats it/non-fixed) and sets back to 'normal' positioning.",
            "itemtype": "method",
            "name": "makeStickyHidden",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 91,
            "description": "Makes the masthead sticky and floats it (fixed position).",
            "itemtype": "method",
            "name": "makeStickyShowing",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 104,
            "description": "Sets up the onscroll event to toggle sliding down the sticky masthead or sliding it up.",
            "itemtype": "method",
            "name": "setupStickyFunction",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 126,
            "description": "Contains the logic to decide whether to slide up or down the sticky/fixed masthead.",
            "itemtype": "method",
            "name": "toggleMasthead",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead-sticky.js",
            "line": 165,
            "description": "Show or hides the masthead placeholder - the spacer element for when the masthead is \n floating/fixed so the page doesn't jar in transition states.",
            "itemtype": "method",
            "name": "showPlaceholder",
            "params": [
                {
                    "name": "b",
                    "description": "True to show it, false to hide it. Duh.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead.sticky",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1,
            "description": "How the masthead works:\n\t\t#1. Popup - This is the absolute minimal, \"logo-only\" masthead only used on popup windows.\n\t\t\tThis is the base, with all modules disabled.\n\t\t#2. Alternate - This is the \"application masthead\". This is the same as default, but without the main link items\n\t\t#3. Full - This is the DEFAULT. This includes main link items and the megamenu. Inline links are hidden when browser is not wide enough.\n\tPage owners can override and choose either \"alternate\" or \"popup\" masthead type via a page config.\nIf you are going to try and read this and understand how it all works, grab yourself a tall cup of coffee.\n\tThe file is long, technically, but there are a LOT of comments in here.\n\tIt's not complicated, it's just complex. There are functions for everything, and it's really not that hard.\n\tThe masthead is just comprised of a bunch of pieces of things that can be enabled/disabled and configured.",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 32,
            "description": "Publishes this event after complete masthead is built.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 37,
            "description": "Publishes this event after the profile menu is built.",
            "itemtype": "event",
            "name": "profileMenuReady",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 93,
            "description": "Callback from subscription to meta data 'ready' event publisher. Checks if masthead is enabled.\n<br />If so, subscribe to translations and call init when translations are ready.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 105,
            "description": "Callback from subscription to translation 'dataAndDomReady' event publisher inside autoInit.\n<br />Runs several function to do three key things:\n<br />1. Set the data sources.\n<br />2. Create the links from the data sources.\n<br />3. Configure the HTML per current page settings and echo it on the glass.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 163,
            "description": "First we ONLY inject the links we need on the glass and any swizzling to get them out ASAP.\n\t\t\t\tThen we defer all \"setup\" functionality.\n\t\t\t\tEach of the createMasthead_____ functions adds a class that makes styling easy, based on the type of masthead.\nCases from minimal to maximum. What is always there, what isn't:\nIf popup:\n\t\t\t\t\t- Disable and hide all\n\t\t\t\t\t- Stop.\nIf alternate:\n\t\t\t\t\t- Search\n\t\t\t\t\t- Iconsonly\nIf full: (Same as minimal but with visible catnav & mega & dropdown menus):\n\t\t\t\t\t- Main nav items\n\t\t\t\t\t- Search\n\t\t\t\t\t- Iconsonly\n\t\t\t\t\t- Megamenu",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 287,
            "description": "Simply inserts the masthead main category links into the masthead.\n<br />Eventually we will start making pages code these in the HTML when the changes settle down, for SEO purposes.",
            "itemtype": "method",
            "name": "addMainlinksToMasthead",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 301,
            "description": "Inserts the masthead main ICON links into the masthead (inside a right-float container),\n and moves the search div into the container also.\n<br />Also caches the signin icon selector for updating with user state.",
            "itemtype": "method",
            "name": "addIconsToMasthead",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 317,
            "description": "Converts the search input to a button. It should be coded as a button, but legacy HTML has input.",
            "itemtype": "method",
            "name": "convertSearchSubmitToButton",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 342,
            "description": "Take the passed array of link data, and create LIs using them.",
            "itemtype": "method",
            "name": "createMenuListItems",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "linkArr",
                    "description": "Arry of links to put into the list, prescribed format using id, title, url.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "HTML of &lt;li>s for the list (UL).",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 377,
            "description": "Add the new right-align container and put the search container into it.",
            "itemtype": "method",
            "name": "setupRightsideContainer",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 401,
            "description": "Creates \"anonymous\" profile menu and injects it.\n<br />We have to wait for the service call to return to know if they are signed in, at which point we swap it.",
            "itemtype": "method",
            "name": "addProfileMenuToMasthead",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 480,
            "description": "Creates the profile item drop down menu, default is as anonymous user using \"signed out\" links from xlation file.\n<br />When service comes back with user-state determination, we change this *if user is signed in*.",
            "itemtype": "method",
            "name": "createProfileMenuAnony",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "HTML of &lt;li>s for the list (UL).",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 492,
            "description": "This is called after we have determined that the user *is signed in*.\n<br />It ONLY creates new LIs to inject into the existing drop down menu.",
            "itemtype": "method",
            "name": "createProfileMenuSignedin",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "HTML of &lt;li>s for the list (UL).",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 504,
            "description": "Public API to control the profile menu.",
            "itemtype": "method",
            "name": "editProfileMenu",
            "params": [
                {
                    "name": "data",
                    "description": "The data object to use to edit the profile menu with.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "action",
                            "description": "What you want to do with the profile menu.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 539,
            "description": "Sets up click anywhere to close for profile menu.",
            "itemtype": "method",
            "name": "profileClickToClose",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 551,
            "description": "Resets the profile menu button to default state so it can be properly changed/set to another.",
            "itemtype": "method",
            "name": "resetProfileButton",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 565,
            "description": "Setup the bindings for the profile menu, called with defer becuase it's not critical onload for display.",
            "itemtype": "method",
            "name": "setupMastheadProfileMenu",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 624,
            "description": "Public API to set/show a # of notifications in the profile menu.\n<br>If number is > 0: show the count in the masthead profile thumb and in the special tagged menu item,\n<br>Else, remove the div (in cases of dynamic sign in/out without reload we don't want empty or incorrect box #).",
            "itemtype": "method",
            "name": "showNotificationCount",
            "params": [
                {
                    "name": "num",
                    "description": "The number to show in the profile menu.",
                    "type": "Integer"
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 667,
            "description": "Resets the profile menu button and notification count and sets the a11y test to whatever you pass it.",
            "itemtype": "method",
            "name": "showProfileLinkAnonymous",
            "params": [
                {
                    "name": "dataObj",
                    "description": "Data to use to show the user profile button as \"anonymous user\".",
                    "type": "Object",
                    "props": [
                        {
                            "name": "linkContents",
                            "description": "The text/content to put inside of the button.",
                            "type": "String"
                        },
                        {
                            "name": "linkAlt",
                            "description": "The text to use for the aria-label on the button.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 685,
            "description": "Public API that will display the button content and not hide them for accessibility.\n<br>Primarily used when you are showing text for the button instead of an image.",
            "itemtype": "method",
            "name": "showProfileLinkContents",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 696,
            "description": "Public API to change/show the profile button as a signed-in user, uses the passed data object for the info.",
            "itemtype": "method",
            "name": "showProfileLinkSignedin",
            "params": [
                {
                    "name": "dataObj",
                    "description": "The data to use to show the user as signed-in.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "linkContents",
                            "description": "The text we'd show on the screen.",
                            "type": "String"
                        },
                        {
                            "name": "linkAlt",
                            "description": "The aria-label for blind user who can't see the visual meaning \"you're signed in\"",
                            "type": "String"
                        },
                        {
                            "name": "backgroundImage",
                            "description": "The background image URL to use for the button.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "What type of \"signed-in\" visual to display; default, text, or image.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 709,
            "description": "dataObj = {\n\tlinkContents: \"\", // The text we'd show on the screen.\n\tlinkAlt: \"\",  // The aria-label for blind user who can't see the visual meaning \"you're signed in\"\n\tbackgroundImage: \"\"  // The image to use for the button.\n\ttype: \"default|text|image\"  // What type of \"signed-in\" visual to display.\n};",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 748,
            "description": "This swaps the \"anonymous\" profile ICON for the one returned from the IBM photo service.\n<br />Default signed-in is reversed icon, if photo service returns personalized image url, we use that.",
            "itemtype": "method",
            "name": "updateProfileIcon",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 774,
            "description": "This swaps the \"anonymous\" profile menu with links for a \"signed in user\"",
            "itemtype": "method",
            "name": "updateProfileMenu",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 814,
            "description": "Public API to show the profile menu.",
            "itemtype": "method",
            "name": "showProfileMenu",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 823,
            "description": "Public API to show the hide menu.",
            "itemtype": "method",
            "name": "hideProfileMenu",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 840,
            "description": "Adds a class to the masthead and concats all the pieces that create the \"full\" (default) masthead.",
            "itemtype": "method",
            "name": "createMastheadFull",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 864,
            "description": "Adds a class to the masthead and concats all the pieces that create the \"minimal\" (alternate) masthead.\n<br />The nice name/config name is \"alternate\". Technically it's a \"minimal\" masthead.",
            "itemtype": "method",
            "name": "createMastheadMinimal",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 889,
            "description": "Creates the popup mashthead.\n<br />This is really NO JS execution and the CSS class hides everything except the logo.",
            "itemtype": "method",
            "name": "createMastheadPopup",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 908,
            "description": "Creates all the dropdowns.\n<br>Array of dropdowns to make was populated from the making of each main link.\n<br>Each item in the \"makethese\" object was created by the main link creation\n  function based on the main link data.",
            "itemtype": "method",
            "name": "createDropdownMenus",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 923,
            "description": "Creates the dropdown menu for the given main masthead item.",
            "itemtype": "method",
            "name": "createDropdown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mastheadLinkData",
                    "description": "Data object with the main link ID and set of links to use in it's dropdown menu.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 950,
            "description": "Creates all the megamenus.\n<br>Array of megamenus to make was populated from the making of each main link.\n<br>Each item in the \"makethese\" object was created by the main link creation\n  function based on the main link data.",
            "itemtype": "method",
            "name": "createMegamenus",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1005,
            "description": "Hides all menus and megamenu. Used on hover to hide anything that was open before opening the new one.",
            "itemtype": "method",
            "name": "hideAllMenus",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1019,
            "description": "Two-level section.\n<br>Level 1 (first column) is a list of all \"menuItems\" which are just link list of triggers for each megapanel.\n<br>Level 2 (6-4) is the actual megapanel for each menuitem.",
            "itemtype": "method",
            "name": "createMegamenuSection",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mastheadLinkData",
                    "description": "The main object with all of the masthead data used to create it all.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "(String) The entire ibm-columns for the main item's megamenu."
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1034,
            "description": "Creates a basic set of LIs. Used for the \"quick links\".",
            "itemtype": "method",
            "name": "createQuicklinksList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "linksArr",
                    "description": "An array of objects with url and title to turn into LIs.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The HTML of LIs created.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1058,
            "description": "Creates and returns the megapanel's 6-2 (on the left, with title and quicklinks).",
            "itemtype": "method",
            "name": "createMegapanelCol1",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "megapanelContent",
                    "description": "The megapanel data to use to create the left column (heading and list).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML of the megapanel's left column contents.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1088,
            "description": "Creates and returns the megapanel's 6-2 (on the right, with featured item).",
            "itemtype": "method",
            "name": "createMegapanelCol2",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "megapanelContent",
                    "description": "The megapanel data to use to create the right column (heading and list).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML of the megapanel's right column contents.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1117,
            "description": "Creates and returns the megapanel's heading.",
            "itemtype": "method",
            "name": "makeMenuSectionHeading",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "menuSection",
                    "description": "The megapanel data to use to create the heading.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML of the megapanel's heading.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1136,
            "description": "Creates the megapanel trigger list item.",
            "itemtype": "method",
            "name": "createMegapanelTriggerItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "level1Item",
                    "description": "The data to use to create the megapanel trigger.",
                    "type": "Object"
                },
                {
                    "name": "panelId",
                    "description": "The ID of the panel that the trigger is for (to show on hover).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTML for trigger LI created.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1218,
            "description": "Sets up all megamenu bindings (hover, focus, keyboard, etc).\n<br>Called deferred because not critical onscreen display on load.",
            "itemtype": "method",
            "name": "setupMegamenuBindings",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1429,
            "description": "Adds or removes the active class to the passed megapanel trigger item.",
            "itemtype": "method",
            "name": "makeItemActive",
            "params": [
                {
                    "name": "$triggerLink",
                    "description": "(jQuery selector) The trigger to show as active."
                },
                {
                    "name": "showit",
                    "description": "(Boolean) To set the trigger as active or not."
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1444,
            "description": "Public API to show the megamenu.\n<br>Need to also call public API to tell it which megamenu to show.\n<br>Used on hover of a main masthead item.",
            "itemtype": "method",
            "name": "showMegamenu",
            "params": [
                {
                    "name": "bool",
                    "description": "Show the megamenu or not (a section needs to be set to active).",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1484,
            "description": "Public API to show a particular megapanel within a particular megamenu.\n<br>Used on hover of a megamenu panel trigger.",
            "itemtype": "method",
            "name": "showMegamenuPanel",
            "params": [
                {
                    "name": "panelId",
                    "description": "The ID of the particular panel to show in the megamenu section.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1506,
            "description": "Public API to set which megamenu/section to show (for which main masthead link).\n<br>Used on hover of main masthead item.",
            "itemtype": "method",
            "name": "showMegamenuSection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1549,
            "description": "Makes and returns basic LIs.",
            "itemtype": "method",
            "name": "createLinkList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "linksArr",
                    "description": "List of objects to turn into link list items (LI)s.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The HTML of LIs created.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1573,
            "description": "Creates each of the individual icon links to use in the masthead.\n<br />Each icon can be disabled with a standard \"config.set\" utility option.",
            "itemtype": "method",
            "name": "createLinklistIconsonly",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The link list UL HTML to inject in the masthead if links exist.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1616,
            "description": "Loops thru translation file link array and creates the masthead main category link list.",
            "itemtype": "method",
            "name": "createMainMastheadLinks",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The link list UL HTML to inject in the masthead if links exist.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1684,
            "description": "Creates a the list of links for the burger menu. The provider of the links.\n<br>The burger menu uses this returned/stored HTML to populate the burger menu.",
            "itemtype": "method",
            "name": "createMainMastheadLinksBurgermenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "linkSet",
                    "description": "An array of data to turn into a list of links. Sets as show/hide if applicable.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The HTML of the full UL created from the passed link set.",
                "type": "String"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1777,
            "description": "Common function used to fire a metrics event for various masthead UI interactions.",
            "itemtype": "method",
            "name": "fireHoverMetricEvent",
            "params": [
                {
                    "name": "data",
                    "description": "The data to use for the metrics event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The ID to use for the metrics event.",
                            "type": "String"
                        },
                        {
                            "name": "title",
                            "description": "The title to use for the metrics event.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "The type to use for the metrics event.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1796,
            "description": "Returns object with all of the built masthead link list HTML objects.",
            "itemtype": "method",
            "name": "getMastheadLinklists",
            "return": {
                "description": "The object containing all of the masthead link lists HTML. Used by mobile menu widget.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1806,
            "description": "Public API that calculates the point at which the masthead main links get hidden and injects CSS block.\n<br>Gets widths of logo and main nav elements and dynamically injects a media query style for when to\n hide the main links because the won't fit across the screen.",
            "itemtype": "method",
            "name": "setMastheadWidthUsed",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1841,
            "description": "Sets up focus, tabstops, &amp; arrow controls for the main masthead links.\n<br />Called after megamenu has been created and injected and bindings set. AKA: last.",
            "itemtype": "method",
            "name": "setupMastheadMainlinksAccessibility",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1904,
            "description": "Sets up focus, tabstops, &amp; arrow controls for the main masthead links.\n<br />Called after megamenu has been created and injected and bindings set. AKA: last.",
            "itemtype": "method",
            "name": "setupMastheadMainlinksAccessibility",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 1998,
            "description": "Sets up the burger menu icon binding to open it on click.",
            "itemtype": "method",
            "name": "setupBurgerMenuIcon",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 2016,
            "description": "Sets up how to show the search field; normal or minimized or maximized on resize.",
            "itemtype": "method",
            "name": "setupSearchfieldResponsiveness",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/masthead.js",
            "line": 2040,
            "description": "Calls the public API to show the search field a certain way based on browser width.",
            "itemtype": "method",
            "name": "toggleSearchField",
            "class": "IBMCore.common.module.masthead",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 11,
            "description": "Publishes this event after complete mobilemenu is built.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 31,
            "description": "Callback from subscription to meta data 'ready' event publisher. Checks if masthead is enabled (default).\n<br />If so, subscribe to masthead and then init mobilemenu if enabled.\n<br />Two separate checks so that a masthead type can override and disable/enable it (Ex: popup masthead disables it).",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 48,
            "description": "Callback from subscription to masthead 'ready' event publisher inside autoInit.\n<br />Creates the burger menu (clones masthead into this).\n<br />Since we had to wait for masthead to be in the DOM, it means DOM & masthead is ready.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 179,
            "description": "Take the main masthead links and inject them into the burger menu.",
            "itemtype": "method",
            "name": "createCatnavSection",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The new element to inject as the category nav links section.",
                "type": "DOM element"
            },
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 199,
            "description": "Clones page nav (left or tabs), cleans up IDs & classes, then returns clone ready for DOM injection.",
            "itemtype": "method",
            "name": "createBurgerPagenavLinks",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The new element to inject as the page left or tab nav links section.",
                "type": "DOM element"
            },
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 287,
            "description": "Clones the new site nav menu then returns clone ready for DOM injection.",
            "itemtype": "method",
            "name": "createBurgerMenunavLinks",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The new element to inject as the page menunav links section.",
                "type": "DOM element"
            },
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 385,
            "description": "Clones the new parent menu nav then returns clone ready for DOM injection.",
            "itemtype": "method",
            "name": "createBurgerParentMenunavLinks",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The new element to inject as the page parent menunav links section.",
                "type": "DOM element"
            },
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 463,
            "description": "Sets up bindings for the close button.",
            "itemtype": "method",
            "name": "setupMobilemenuBindings",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 481,
            "description": "Sets up styling/extra HTML for page nav in menu and its a11y controls.",
            "itemtype": "method",
            "name": "setupPageNavs",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 500,
            "description": "Inits show/hides not inited yet and tags selected nav item's show/hide container for highlighting.",
            "itemtype": "method",
            "name": "setupShowhides",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 517,
            "description": "API for pages that use AJAX or inject tabs or menu nav after page load.\n<br />After you inject your site's menu or tab nav, call this to clone it into the burger menu.\n<br />In case you make it and inject your HTML before burger menu creates, if the page nav already exists in the burger menu\n this stops and does nothing.",
            "itemtype": "method",
            "name": "addSiteNavigation",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 557,
            "description": "Shows the burger menu.",
            "itemtype": "method",
            "name": "show",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 575,
            "description": "Hides the burger menu.",
            "itemtype": "method",
            "name": "hide",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 596,
            "description": "Simple helper to toggle the burger menu showing/hiding.",
            "itemtype": "method",
            "name": "toggle",
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 609,
            "description": "Simple helper that tells you if the burger menu is showing or not.",
            "itemtype": "method",
            "name": "isShowing",
            "return": {
                "description": "True if it's open, false if it's closed.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mobilemenu.js",
            "line": 619,
            "description": "Deprecated. Use \"isShowing\" instead. Makes more sense.",
            "itemtype": "method",
            "name": "isOpen",
            "deprecated": true,
            "class": "IBMCore.common.module.mobilemenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 13,
            "description": "Page using it in v17:  \n\thttps://www-03.ibm.com/financing/us/contact_rep.html\n\nExample WSR URL: \n\thttps://www.ibm.com/gateway/secstate/?&cc=us&lc=en&format=json&ts=1455038215811&industry=ZZ&dc_subject=OE600&currenturl=%2F%2Fwww.ibm.com%2Fsystems%2Fpower%2Fsoftware%2Faix%2Fsolutions.html&ctype=CT528&ww=&cb=102%3A__tcb99391%40106%3A__tcb11910 \n\nSample WSR returned data:\n\t__tcb99391({\"results\":[{\"imgsrc\":\"//www.ibm.com/i/v16/promo/Systems_power_20140428_168x64.jpg\",\"fileExtension\":\"\",\"externalUrl\":0,\"imgh\":\"64\",\"imgalt\":\"\",\"linktext\":\"Learn more\",\"tid\":\"1\",\"trackOnLoad\":1,\"imgw\":\"168\",\"linkurl\":\"http://www-03.ibm.com/financing/us/hardware/powersystems.html?cm_sp=MTE29908\",\"title\":\"Financing for Power Systems\",\"weight\":\"0.0\",\"type\":\"DEF\",\"description\":\"0% 24 month financing for select Power Systems servers, Maximize your investment with IBM Global Financing.\",\"fileSize\":\"\",\"spotid\":29908}]})",
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 35,
            "description": "Callback from subscription to meta data 'ready' event publisher. \n<br />Checks if merchandising is enabled and if the placeholder is on the page. If so, inits it.\n<br />No point in requesting offers if they forgot the DIV.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 50,
            "description": "Called by autoInit.\n<br />Gathers some page meta data and requests offers from MTE service.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 81,
            "description": "Callback from MTE WSR. This loops thru each offer returned, creates the appropriate HTML, then injects it into\nthe placeholder div on the page (if it exists).",
            "itemtype": "method",
            "name": "createModules",
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 262,
            "description": "Creates the description HTML for the offer, and hotlinks if flag is set, which indicates no standalone link will be created.",
            "itemtype": "method",
            "name": "createDescription",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                },
                {
                    "name": "includeFileInfo",
                    "description": "A flag that tell it to hotlink the description because no standalone link will be created.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The HTML for the description paragraph.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 282,
            "description": "Creates the heading HTML for the offer.",
            "itemtype": "method",
            "name": "createHeading",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML for the heading.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 294,
            "description": "Creates the heading HTML specifically for the portrait module display type.",
            "itemtype": "method",
            "name": "createHeadingPortrait",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML for the heading.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 308,
            "description": "Creates the standalone icon link HTML.",
            "itemtype": "method",
            "name": "createIconlink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                },
                {
                    "name": "includeFileInfo",
                    "description": "A flag that tells it to append the filesize info to the link, if existy.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The HTML for the standalone icon link.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 327,
            "description": "Creates the image HTML.",
            "itemtype": "method",
            "name": "createImage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML for the image.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 339,
            "description": "Creates the portrait module HTML.",
            "itemtype": "method",
            "name": "createPortraitModule",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The HTML for the portrait module.",
                "type": "String"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 351,
            "description": "Takes a couple of the original item params and figures out what icon to use and creates file size info if needed.\n<br />Adds the extra props to the item and returns to sender.",
            "itemtype": "method",
            "name": "addLinkData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The original item but with the extra data.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 403,
            "description": "If the module URL is tagged as offsite/external link, adds the proper \"leaving IBM\" info to the URL and returns to sender.",
            "itemtype": "method",
            "name": "createLinkUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The object with all the offer content.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The original item but with the changed/updated link URL.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/mte.js",
            "line": 420,
            "description": "Notes on layouts, from v17:\n\n(mteLocation)-(item.tid):\n\n---------------------------------------------------------------\n5-1:\n\n\t1-1:  (image + h2 + descr + standalone link)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t1-2:  (1-1 w/ \"alternate\" class)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t1-3:  (image + h2 + descr)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t1-4:  (1-2 without an image: h2 + descr + standalone link)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n6-1:\n\n\t2-1: (1-1 with \"crop\" class;  image + h2 + descr + standalone)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t2-2 & 4:  (Same as 1-4) \n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t2-3:  (1-3 with \"crop\" class;  image + h2 + standalone)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n\n6-2:\n\n\t3-1 & 4:  (Same as 1-4)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t3-2:  (Portrait module (use media object instead))\n\t<div class=\"ibm-container alternate ibm-portrait-module\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<div class=\"ibm-module-text\">\n\t\t\t\t<h2>' + item.title + '</h2>\n\t\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t\t\t<ul class=\"ibm-link-list\">\n\t\t\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t\thiddenFields\n\t</div> \n\n\t3-3:  (h2 + descr)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n\n#ibm-related-content:\n\n\t4-1:  (Same as 2-1; 1-1 with crop class)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2 class=\"ibm-third\">' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t\t<p class=\"ibm-ind-link\">' + '<a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\" >' + item.linktext + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t4-3:  (Same as 1-3, with crop)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2 class=\"ibm-third\">' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t4-2 & 4 ignored in footer.\n\n---------------------------------------------------------------",
            "class": "IBMCore.common.module.merchandising",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 33,
            "description": "Publishes this event after the module has been initialized and is ready.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 44,
            "description": "Default standard auto init function.\n<br />Callback from subscription to meta 'dataReady' event publisher.\n<br />Simply runs init if conditions are met.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 57,
            "description": "Creates the dynamic tooltip with social sharing links from default and user-defind config links. Binds content selection\n to show the sharing toolip.\n<br />Called by autoinit if module is enabled.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 106,
            "description": "Binds mouseup event to look for existing selected text; if exists, shows the \"share this\" tooltip.\n<br>On selection start or mouseup with no selection, it hides the tooltip.",
            "itemtype": "method",
            "name": "bindTextSelectionSharing",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 169,
            "description": "Cross-browser method to get text that is currently selected by the user.",
            "itemtype": "method",
            "name": "getSelectionText",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Text on the page that is currently selected by the user.",
                "type": "String"
            },
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 189,
            "description": "Creates the icon link DOM element (&lt;a>) using the inbound link data object.",
            "itemtype": "method",
            "name": "createLinkEl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "linkData",
                    "description": "The object with link data used to create the icon link element.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The link DOM element &lt;a> created.",
                "type": "DOM element"
            },
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 213,
            "description": "Creates and injects the tooltip shown when text is selected on the page, with the share links in it.",
            "itemtype": "method",
            "name": "createTooltip",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$links",
                    "description": "Object with dynamically generated icon link DOM elements to add to the tooltip.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethiscontent.js",
            "line": 236,
            "description": "Icon links onclick callback. Fires metric event, does bitly shortening, etc.",
            "itemtype": "method",
            "name": "gotoUrl",
            "params": [
                {
                    "name": "win",
                    "description": "The new window object.",
                    "type": "Object"
                },
                {
                    "name": "el",
                    "description": "The icon link element clicked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "False, to the link that was clicked so default action doesn't happen.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.module.sharethiscontent",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 21,
            "description": "Publishes this event after the module has been injected.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 33,
            "description": "Default standard auto init function.\n<br />Callback from subscription to translations 'dataReady' event publisher.\n<br />Simply runs init if conditions are met.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 46,
            "description": "Creates the widget links and heading if enabled and injects on page wherever the div is.\n<br />Called by autoinit if module is enabled.\n<br />Just like MTE - It doesn't inject anything if proper div placeholder doesn't exist (duh).",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 71,
            "description": "Creates the URL used on the link (not with bitly one). Does the title and URL replacement.",
            "itemtype": "method",
            "name": "createLinkUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The social share URL to add page info to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The social share URL to use in the link.",
                "type": "String"
            },
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 83,
            "description": "Creates the actual link element object, used by each link object from the data file.",
            "itemtype": "method",
            "name": "createLinkEl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "icon",
                    "description": "The object from the data file containing the link data to use to build the icon link.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The created icon link element.",
                "type": "Object"
            },
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 100,
            "description": "Goes thru data file and creates widget icon links.",
            "itemtype": "method",
            "name": "createSbslinks",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Array of icon link elements to be injected.",
                "type": "Array"
            },
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sharethispage.js",
            "line": 146,
            "description": "Icon links onclick callback. Fires metric event, does bitly shortening, etc.",
            "itemtype": "method",
            "name": "gotoUrl",
            "params": [
                {
                    "name": "win",
                    "description": "The new window object.",
                    "type": "Object"
                },
                {
                    "name": "el",
                    "description": "The icon link element clicked.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.module.sharethispage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 16,
            "description": "Publishes this event after the nav menu has been setup.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 44,
            "description": "Only Called from DOM ready IF A MENU NAV ELEMENT EXISTS.\n<br>If you are injecting it dynamically, call this after you inject it.\n<br>Called via setTimeout since it's non-essential and just sets up minimal interaction and adjustments.\n<br />This sets up the menunav for stickyness, adjusts drop-down menus for right-alignment, and dynamically show/hides the links based on the browser width and if they can all fit or not.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 154,
            "description": "Only Called from DOM ready IF A PARENT SITE MENU NAV ELEMENT EXISTS.\n<br>If you are injecting it dynamically, call this after you inject it.\n<br>Called via setTimeout since it's non-essential and just sets up minimal interaction and adjustments.\n<br />This sets up the PARENT site drop-down menu. Instead of just a link, you can have a basic menu.",
            "itemtype": "method",
            "name": "initParent",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 207,
            "description": "Converts legacy HTML &lt;span> main items with submenus into the proper &lt;button> element it's supposed to be.",
            "itemtype": "method",
            "name": "convertSpansToButtons",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 226,
            "description": "Decides whether to make the menu nav bar sticky or not. Based on scroll position.\n<br />Called onload for initial display type, and then on scroll.",
            "itemtype": "method",
            "name": "toggleStickyMenu",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 244,
            "description": "Hides all submenus that are open and shows submenu for main item passed to it.\n<br />Called on click and hover of main item that has a submenu.",
            "itemtype": "method",
            "name": "showSubmenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$li",
                    "description": "The main item &lt;li> that we want to open submenu for.",
                    "type": "Element selector"
                }
            ],
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 269,
            "description": "Hides the submenu for the main item passed to it.",
            "itemtype": "method",
            "name": "hideSubmenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$li",
                    "description": "The main item &lt;li> that we want to hide the submenu for.",
                    "type": "Element selector"
                }
            ],
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 280,
            "description": "Submenus are left-aligned by default. This checks if the submenu will extend offscreen (right) and return true if so.",
            "itemtype": "method",
            "name": "isOffscreen",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$li",
                    "description": "The main item &lt;li> that we want to check the submenu for positioning.",
                    "type": "Element selector"
                }
            ],
            "return": {
                "description": "True if it will be offscreen, else false.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 300,
            "description": "Sets the width needed to fit the menu nav bar site name + the main links across.\n<br />If you are dynamically adding/removing items, you call this afterwards to (re)set the proper width needed \non your new set of links so they can be shown/hidden correctly.",
            "itemtype": "method",
            "name": "setSitenavMinWidth",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/sitenav-menu.js",
            "line": 336,
            "media screen and (max-width: ' + (mainlinksmin+100) + 'px) { \n\t.ibm-sitenav-menu-container .ibm-sitenav-menu-list > ul > li {\n\t\tdisplay:none\n\t}\n\t.ibm-sitenav-menu-container .ibm-sitenav-menu-list > ul > .ibm-sitenav-menu-item-right {\n\t\tdisplay:block\n\t}\n}\n@media screen and (min-width: ' + (mainlinksmin+101) + 'px) { \n\t.ibm-mobilemenu-sitenavmenu > ul > li {\n\t\tdisplay:none\n\t}\n} \n@media screen and (max-width: ' + (rightlinksmin+100) + 'px) { \n\t.ibm-sitenav-menu-list > ul > .ibm-sitenav-menu-item-right { \n\t\tdisplay:none\n\t}\n}\n@media screen and (min-width: ' + (rightlinksmin+101) + 'px) { \n\t.ibm-mobilemenu-sitenavmenu > ul > .ibm-sitenav-menu-item-right { \n\t\tdisplay:none\n\t}\n}": "",
            "class": "IBMCore.common.module.sitenavmenu",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/urx-loader.js",
            "line": 35,
            "description": "Callback from meta ready event\n<br />If URX is enabled, inject their JS and set flag so autoinit doesn't run again on page locale change.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.module.urx",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/modules/urx-loader.js",
            "line": 50,
            "description": "Called by autoInit.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.module.urx",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 21,
            "description": "Take a named list element (UL) and setup standard tree (WAI tree widget) keyboard accessibility controls for it.\n<br />A \"tree\" is a specifially designed a11y widget which is simply a list with items and nested lists.\n<br />A tree usually has a \"selected\" state so tab focus-in should goto the active/highlighted element.\n<br />There's not much flexibility in the core structure: UL > LI > A + UL > LI > A, etc. and because of this, this a11y \nwidget can be applied to *any* tree-type HTML structure to satisfy a11y requirements b/c it relies on the required HTML \nstructure and can easily use .next() and .prev() and .parent() successfully.\n<br />How it works: This widget uses .on() and delegated event handling, which means tree items/links can be dynamically \ninjected at any time and they will automatically work in the flow of the keyboard controls without needing to re-init \nor specifically bind the new items.",
            "itemtype": "method",
            "name": "makeTreeAccessible",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings for the tree accessibility widget.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "el",
                            "description": "The UL to apply the tree accessibility controls to.",
                            "type": "DOM element"
                        },
                        {
                            "name": "focus",
                            "description": "A custom function to call on focus of an element in the tree. Gets passed the element and \nthe event object.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "keydown",
                            "description": "A custom function to call on keydown on an element in the tree. Gets passed the element \nand the event object.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 114,
            "description": "Take a named list element (UL) and setup standard menu (WAI menu widget) keyboard accessibility controls for it.\n<br />A \"menu\" is a specifially designed a11y widget which is simply a list with items and nested lists.\n<br />The menu is a single tab stop and controls within the menu items is done via arrow keys.\n<br />A menu does NOT need (and typically doesn't have) a \"selected\" state so tab focus in is usually just on the first element. As well, it does not need to remember what menu item you were on, when focus is removed.\n<br />There's not much flexibility in the core structure: UL > LI > A + UL > LI > A, etc. and because of this, this a11y \nwidget can be applied to *any* menu-type HTML structure to satisfy a11y requirements b/c it relies on the required HTML \nstructure and can easily use .next() and .prev() and .parent() successfully.\n<br />How it works: This widget uses .on() and delegated event handling, which means menu items/links can be dynamically \ninjected at any time and they will automatically work in the flow of the keyboard controls without needing to re-init \nor specifically bind the new items.",
            "itemtype": "method",
            "name": "makeMenuAccessible",
            "params": [
                {
                    "name": "settings",
                    "description": "Object with optional cookie settings:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "el",
                            "description": "The UL to apply the menu accessibility controls to.",
                            "type": "DOM element"
                        },
                        {
                            "name": "focus",
                            "description": "A custom function to call on focus of an element in the menu. Gets passed the element and \nthe event object.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "keydown",
                            "description": "A custom function to call on keydown on an element in the menu. Gets passed the element",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 224,
            "description": "On callback of down arrow; checks if there's a menu for the current item. If so, it opens and goes to first item in\nthe menu, else it goes to the next sibling item to the item passed.",
            "itemtype": "method",
            "name": "menuDownArrowControl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentItemLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 251,
            "description": "Adds an active class to the current main item's parent. Doesn't actually \"open\" the menu, but sets a class\non the parent and CSS \"shows\" the nested UL based on that class.\n<br/>Used in conjunction with \"gotoFirstItem\" (called after this is called).",
            "itemtype": "method",
            "name": "openMenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentItemLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 264,
            "description": "On callback of right arrow. If there's no next item, loops to first one. If focus is on a sub-menu item, it hops to the next\nmain menu bar item and opens that menu (if exists), else just highlights the next main menu item or loops to first one.",
            "itemtype": "method",
            "name": "menuRightArrowControl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentItemLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 299,
            "description": "On callback of left arrow. If there's no previous item, loops to last one. If focus is on a sub-menu item, it hops to the previous\nmain menu bar item and opens that menu (if exists), else just highlights the previous main menu item or loops to last one.",
            "itemtype": "method",
            "name": "menuLeftArrowControl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentItemLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 334,
            "description": "On callback of up arrow; checks if there's a menu for the current item. If so, it opens and goes to first item in\nthe menu, else it goes to the previous sibling item to the item passed.",
            "itemtype": "method",
            "name": "menuUpArrowControl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentItemLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 366,
            "description": "Take a named SINGLE tab set (a UL) and setup standard tabs (WAI tablist) keyboard accessibility controls for it.\n<br />What's special: This a11y control widget applies to a single UL, not nested ULs (like a \"tree\"). It differs from a \ntoolbar b/c it has one \"selected\" item, and the tabindex does __not__ change, which are the opposite of a menubar\n<br />The HTML structure of tabs are generally the same, but not always and can't guarantee they are in UL format. DIVs are \nstarting to replace ULs for tabbing and menus structure. \n<b />Since we can't be 100% sure what level links are coded in tabs, we can't use .next/prev() because the link might be \nin a span, or in a LI, or in a span in a LI, etc. or even a DIV, and the next one might need to be traversed via a parent() \nor parent.parent(). \n<br />How it works: It works the same as the toolbar a11y widget: We collect an array of __all__ links in the UL no matter \nhow they are nested in HTML, and use their index # from the arrayto determine the prev/next link to focus on. This widget \nuses .on() and delegated event handling, which means tree items/links can be dynamically injected at any time and they will \nautomatically work in the flow of the keyboard controls without needing to re-init or specifically bind the new items.\n<br />An example where is is used is primary-tabs and secondary-tabs on a tab nav layout page.",
            "itemtype": "method",
            "name": "makeTabsAccessible",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings for the tablist accessibility widget.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "el",
                            "description": "The element/container to apply the tablist a11y controls to.",
                            "type": "DOM element"
                        },
                        {
                            "name": "focus",
                            "description": "A custom function to call on focus of an element in the tablist. Gets passed the element and \nthe event object.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "keydown",
                            "description": "A custom function to call on keydown on an element in the tablist. Gets passed the element \nand the event object.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 458,
            "description": "Take a named element (a toolbar container) and setup standard toolbar (WAI toolbar) keyboard accessibility controls for it.\n<br />What's special: This a11y control widget applies to a container of links, which are serial in nature/display and do not \ncontain nested, dropdown, or dynamic changing content. It differs from a tablist b/c it has never has a \"selected\" item, but \nhas a single tabstop which chnages based on the last focus'd item, which is the opposite of tabs.\n<br />The HTML structure of a toolbar is completely unknown. Because of this we can't use .next/prev() because there is no way \nto know what level of HTML nesting the actual link is in. \n<br />How it works: It works the same as the tablist a11y widget: We collect an array of __all__ links in the toolbar container \nno matter how they are nested in HTML, and use their index # from the array to determine the prev/next link to focus on. This \nwidget uses .on() and delegated event handling, which means tree items/links can be dynamically injected at any time and they will automatically work in the flow of the keyboard controls without needing to re-init or specifically bind the new items.\n<br />An example where is is used is the masthead country/lang links, and the social sharing toolbar.",
            "itemtype": "method",
            "name": "makeToolbarAccessible",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings for the toolbar accessibility widget.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "el",
                            "description": "The element/container to apply the toolbar a11y controls to.",
                            "type": "DOM element"
                        },
                        {
                            "name": "focus",
                            "description": "A custom function to call on focus of an element in the toolbar. Gets passed the element \nand the event object.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "keydown",
                            "description": "A custom function to call on keydown on an element in the toolbar. Gets passed the element \nand the event object.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 549,
            "description": "Focus on the first visible link in the given container element. This just finds the first descendent link and focuses on it.",
            "itemtype": "method",
            "name": "gotoFirstItem",
            "params": [
                {
                    "name": "$linksContainer",
                    "description": "The element that contains links that you want to focus on the first one in.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 560,
            "description": "Focus on the last visible link in the given container element. This just finds the last descendent link and focuses on it, \nno matter what the internal HTML structure is for container.",
            "itemtype": "method",
            "name": "gotoLastItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$linksContainer",
                    "description": "The element that contains links that you want to focus on the last one in.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 572,
            "description": "Focus on the next visible link (from current focused one) in the given container element. This uses the container's @data-activeindex \nto determine what the current focused link index # is. Used by methods that do and don't want tabindex changed. \n<br />If there is no next link (the last one is currently in focus), this loops back and goes to the first link per \na11y standards.",
            "itemtype": "method",
            "name": "gotoNextLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$linksContainer",
                    "description": "The element that contains links that you want to focus on the next one in.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 595,
            "description": "Focus on the previous visible link (from current focused one) in the given container element. This uses the container's",
            "data": "-activeindex to determine what the current focused link index # is. Used by methods that do and don't want tabindex \nchanged. \n<br />If there is no previous link (the first one is currently in focus), this loops back and goes to the last link per \na11y standards.\n<br />Will probably change to try and use has:focus.prev method.",
            "itemtype": "method",
            "name": "gotoPrevLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$linksContainer",
                    "description": "The element that contains links that you want to focus on the previous one in.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 620,
            "description": "Focus on the next item (LI/A)\n<br />If there is no next item (the last one is currently in focus), this loops back and goes to the first link per \na11y standards.",
            "itemtype": "method",
            "name": "gotoNextItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 641,
            "description": "Focus on the next link in the tree widget (from current focused one). This is specific for a tree structure \n(ULs and nexted ULs). \n<br />If there is no next link (the last one is currently in focus), this loops back and goes to the first link per \na11y standards.",
            "itemtype": "method",
            "name": "gotoNextTreeLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$treeContainer",
                    "description": "The container that houses all the items.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 662,
            "description": "Focus on the previous link in the tree widget (from current focused one). This is specific for a tree structure \n(ULs and nexted ULs). \n<br />If there is no previous link (the first one in the current level UL is currently in focus), this loops back and \ngoes to the last link per a11y standards.",
            "itemtype": "method",
            "name": "gotoPrevTreeLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$treeContainer",
                    "description": "The container that houses all the items.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 683,
            "description": "Focus on the parent link of the currently focused link in the tree widget. This is specific for a tree structure \n(ULs and nexted ULs). \n<br />If there is no parent tree, goto the previous link in the current link level per a11y standards.",
            "itemtype": "method",
            "name": "gotoParentTreeLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$currentLink",
                    "description": "The currently focused link.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 703,
            "description": "Focus on the first link in the next level down from the currently focused link level in the tree widget. This is \nspecific for a tree structure (ULs and nexted ULs). \n<br />If there is no child level/links tree, goto the next link in the current link level per a11y standards.",
            "itemtype": "method",
            "name": "gotoChildTreeLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$treeContainer",
                    "description": "The container that houses all the items.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 723,
            "description": "Removes the tabstop from every link in the container and places it on the link.",
            "itemtype": "method",
            "name": "setLinkAsActive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$linksContainer",
                    "description": "The container that houses all the items.",
                    "type": "JQuery selector"
                },
                {
                    "name": "$linkEl",
                    "description": "The link you want to make active and put the tabstop (tabindex=0) on. Removes it from other items in the container.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 742,
            "description": "Automatically and dynamically sets the label on the &lt;main> element using text from the selected tab, subtab, and H1 on DOM ready.",
            "itemtype": "method",
            "name": "addMainElementLabel",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/accessibility.js",
            "line": 758,
            "class": "IBMCore.common.util.a11y",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/anchorlink-adjustment.js",
            "line": 28,
            "description": "Called by auto-init on load of items tagged with this widget. \n<br>Simply binds a set of links to call the gotoElement function on click.",
            "itemtype": "method",
            "name": "adjustLinks",
            "params": [
                {
                    "name": "el",
                    "description": "The UL or container that has in-page anchor links in it.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.util.anchorlinkAdjustment",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/anchorlink-adjustment.js",
            "line": 42,
            "description": "Called on-click of a tagged anchor link from the adjustLinks function.\n<br />Simply gets the target offset top position and reduces the amount so the section doesn't get covered up by a floating bar.",
            "itemtype": "method",
            "name": "gotoElement",
            "params": [
                {
                    "name": "el",
                    "description": "The element to go to.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.util.anchorlinkAdjustment",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 24,
            "description": "Method to creates a new color object using color and optional alpha values. Returns new color object instance.",
            "itemtype": "method",
            "name": "createColor",
            "type": "Function",
            "params": [
                {
                    "name": "color",
                    "description": "Color code. Can be hex, rgb(), or rgba(). If an alpha param is passed, it will override the rgba's alpha value.",
                    "type": "Varies",
                    "optional": true
                },
                {
                    "name": "alpha",
                    "description": "Alpha value to use for the color.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "\"Color\" object with properties. This returned object has methods: .xxxxxx",
                "type": "Object"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 36,
            "description": "The Color object.\n<br />Instantiated with our one and only public util function.",
            "itemtype": "method",
            "name": "Color",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "color",
                    "description": "Color code. Can be hex, rgb(), or rgba(). If an alpha param is passed, it will override the rgba's alpha value.",
                    "type": "Varies",
                    "optional": true
                },
                {
                    "name": "alpha",
                    "description": "Alpha value to use for the color.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 55,
            "description": "Method of the Color widget object.\n<br />Automatically called on new Color instance constructor if a color is provided. \n<br />Sets object's R,G,B,A and accessible text color values.",
            "itemtype": "method",
            "name": "Color.setColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color code. Can be hex, rgb(), or rgba(). If an alpha param is passed, it will override the rgba's alpha value.",
                    "type": "Varies"
                }
            ],
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 98,
            "description": "Method of the Color widget object.\n<br />Returns the hex value of the color.",
            "itemtype": "method",
            "name": "Color.hex",
            "return": {
                "description": "Hex value of the color.",
                "type": "String"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 110,
            "description": "Method of the Color widget object.\n<br />Returns the rgb() value of the color.",
            "itemtype": "method",
            "name": "Color.rgb",
            "return": {
                "description": "Value of the color in syntax: \"rgb(x,x,x)\"",
                "type": "String"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 122,
            "description": "Method of the Color widget object.\n<br />Returns the rgba() value of the color. If IE8 or lower, returns rgb().",
            "itemtype": "method",
            "name": "Color.rgba",
            "return": {
                "description": "Value of the color in syntax: \"rgba(x,x,x,x)\"",
                "type": "String"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 138,
            "description": "Converts a single hex value (0-9a-f) to the RGB equivalent (then later is multiplied by 16).",
            "itemtype": "method",
            "name": "rgbToDec",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "rgb",
                    "description": "0-9 or a-f. Gets normalized by lowercasing, so value is case insensitive.",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "Position # of parameter in 0-9A-F array, to be used in RGB color code.",
                "type": "Integer"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 150,
            "description": "Converts a r, g or b number to the two character hex value equivalent (0-9a-f)(0-9a-f).",
            "itemtype": "method",
            "name": "decToRGB",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dec",
                    "description": "The single r, g, or b value from a rgb() color code.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "0-9 or a-f.",
                "type": "String"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/color.js",
            "line": 165,
            "description": "Takes a color and returns the accessible correct color that text should be if used on that color background: black or white.",
            "itemtype": "method",
            "name": "generateAccessibleTextColor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hexcolor",
                    "description": "Hex color.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "\"black\" or \"white\".",
                "type": "String"
            },
            "class": "IBMCore.common.util.color",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/config.js",
            "line": 25,
            "description": "Merging settings into the existing page's common.config settings.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "setting",
                    "description": "The setting object to merge into the existing IBMCore.common.config object.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.config",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/config.js",
            "line": 38,
            "description": "Gets a current config setting. Accepts object dot syntax for deep property values. Example:\n<br />\n<br /> <code>IBMCore.common.util.config.get(\"sbs\");</code>\n<br /> -or-\n<br /> <code>IBMCore.common.util.config.get(\"megamenu.animations.enabled\");</code>",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "setting",
                    "description": "The setting to get the value for, in string object notation.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the setting you wanted to get (duh): string, object, int, array... whatever the property value is.",
                "type": "Varies"
            },
            "class": "IBMCore.common.util.config",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/config.js",
            "line": 62,
            "description": "Helper to determine if a service/module is enabled or not for the page.\n<br />This is simply a shortcut that uses config.get.\n<br />Only works for services that have a \".enabled\" property.\n<br />It ensures consistency if we change the convention of \"enabled: true\" settings.",
            "itemtype": "method",
            "name": "isEnabled",
            "params": [
                {
                    "name": "serviceName",
                    "description": "The service to check if enabled or not, in string object notation.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true or false",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.config",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/console.js",
            "line": 1,
            "description": "Shim for console for browsers that don't support the full range of console functions.\n\t<br />This ensures that a console function won't throw an error if the browser doesn't support it/have it defined.",
            "class": "IBMCore.common.util.cookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/cookie.js",
            "line": 16,
            "description": "Sets a new cookie with the given data. Name and value are required.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the cookie.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to set.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Object with optional cookie settings:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "expires",
                            "description": "Expire date or TTL in seconds.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "path",
                            "description": "Path of the cookie.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "domain",
                            "description": "Domain of the cookie.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "secure",
                            "description": "Flag if the cookie should be secure.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.cookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/cookie.js",
            "line": 52,
            "description": "Returns the value of a cookie, if set.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the cookie.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value stored in the cookie, null otherwise.",
                "type": "Varies"
            },
            "class": "IBMCore.common.util.cookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/cookie.js",
            "line": 90,
            "description": "Removes a cookie",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the cookie.",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "Path of the cookie.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "domain",
                    "description": "Domain of the cookie.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The value of the cookie we removed.",
                "type": "Varies"
            },
            "class": "IBMCore.common.util.cookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/cookie.js",
            "line": 109,
            "description": "Quick check to see if user has cookies enabled.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "True if cookies are enabled, false otherwise.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.cookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 18,
            "description": "LEGACY Service ID List - just to have it somewhere.\nSome of these are turned off.\n100 - Greeting \n101 - Scoped Search // SERVICE DISABLED\n102 - Merchandising\n103 - Easy Access link displayed on Public site.\n104 - My Interests display // SERVICE DISABLED\n105 -  Incremental profiling // SERVICE DISABLED\n106 -  InterCountry navigation // SERVICE DISABLED\n107 - Pre-filled forms // SERVICE DISABLED\n109 - Sign in/FastPath\n110 - E-mail this page\n115 - IBM Bookmarks // SERVICE DISABLED\n125 - IBM Social Share Service // SERVICE DISABLED\n119 -  Instant Signin // SERVICE DISABLED\n1000 - Masthead links and rollover menus // SERVICE DISABLED\n1001 - Print this page // SERVICE DISABLED\n1002 - Turn off All Page tools // SERVICE DISABLED\n1003 - Turn off Masthead Greeting and Sign in services (Don't display grey bar below masthead.) // SERVICE DISABLED\n1004 - All page tools / Also handles IBM Feeds // SERVICE DISABLED\n1005 - Delicious page tool // SERVICE DISABLED\n1006 - Digg page tool // SERVICE DISABLED\n1007 - Turn off SBS icons (leaves Print and Mail intact) // SERVICE DISABLED\n1010 -  Social navigation // SERVICE DISABLED\n122 - IBM QuickPoll // SERVICE DISABLED\n\nDetails on https://w3.tap.ibm.com/w3ki07/display/CWTBNG/Dynamivnav%20Regression%20Test",
            "class": "IBMCore.common.util.coreservices",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 50,
            "description": "Publishes this event if the service throws us an error and we don't get data back.",
            "itemtype": "event",
            "name": "error",
            "class": "IBMCore.common.util.coreservices",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 62,
            "description": "Allows modules to add a request to the bundled core services (SWWIF) call as they are read in the JS. \n<br>Execution of the bundle doesn't happen until translations + DOM ready event is published. \n<br>This ensures meta & translations are loaded, and waiting for DOM ensures any other shit is loaded and ready.",
            "itemtype": "method",
            "name": "bundledRequest.add",
            "params": [
                {
                    "name": "serviceId",
                    "description": "The service's ID/#.",
                    "type": "Integer"
                },
                {
                    "name": "callback",
                    "description": "The function to call on service response.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "Data/Parameters to add to the service call.",
                    "type": "Object"
                },
                {
                    "name": "secureUrl",
                    "description": "If this request should use the secured URL (behind IBMidaaS) or not. Only use if you KNOW the user is signed in. The request will fail if user is not already authenticated.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The callback function.",
                "type": "Function"
            },
            "class": "IBMCore.common.util.coreservices",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 82,
            "description": "Joins all service calls that have been added to the bundle and makes the WSR (web service request). Then clears the params and callbacks.",
            "itemtype": "method",
            "name": "bundledRequest.execute",
            "class": "IBMCore.common.util.coreservices",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/coreservices.js",
            "line": 140,
            "description": "Simple helper to make an immediate SINGLE service request. If you want to bundle multiple services into one request use the \"bundleRequest\" functions.",
            "itemtype": "method",
            "name": "makeRequest",
            "params": [
                {
                    "name": "serviceId",
                    "description": "The service's ID/#.",
                    "type": "Integer"
                },
                {
                    "name": "callback",
                    "description": "The function to call on service response.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "Data/Parameters to add to the service call.",
                    "type": "Object"
                },
                {
                    "name": "secureUrl",
                    "description": "If this request should use the secured URL (behind IBMidaaS) or not. Only use if you KNOW the user is signed in. The request will fail if user is not already authenticated.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.util.coreservices",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/data.js",
            "line": 49,
            "description": "Private helper function to check if a specific key/object in the translations data exists and return true|false.",
            "itemtype": "method",
            "name": "objExists",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "token",
                    "description": "The unique translation data object/token.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.util.data",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/data.js",
            "line": 60,
            "description": "Gets the requested data file and executes the callback once it has been loaded.\n<br />The token can be an array, i.e. [\"token1\", \"token2\"]. In this case the callback is executed\nafter all tokens have been loaded.\n<br />If we already have those translation sets then the callback is executed immediately and no file request is made (DUH).\n<br />This works by replacing the vars in the standard URL naming convention for translations with the token and CC and LC to build the URL of the JS to get. LC, CC and ENC are used from the page's meta, or you can override them by passing them as optional param object values:\n<br />//www.ibm.com/common/translations/{TOKEN}/{CC}/{LC}/{ENC}.js",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "token",
                    "description": "The unique data token to load or URL to load. Can be an array for bundled translation requests.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "Callback to execute once the translations have been loaded.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "params",
                    "description": "An object with settings that override the default settings (cc, lc, encoding to use).",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.util.data",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/data.js",
            "line": 152,
            "description": "Function used/called by static translation JS files. \n<br /Provides a standard API to put translations into the common translations.data object.\n<br />Provide the unique data token as first argument (what the translations are for) and any object as second argument (the translations).",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "token",
                    "description": "The unique data token to use as the translation object key: translations.data.<$token>",
                    "type": "String"
                },
                {
                    "name": "dataObject",
                    "description": "The translation data object put inside the $token namespace.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.data",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/debug.js",
            "line": 22,
            "description": "Debug utility to use instead of console.\n<br>Add messages/functions to the queue.\n<br>When you want to show the messages call the debug.show() function.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "func",
                    "description": "What console function name to run. Ex: \"log\", \"warn\", \"info\".",
                    "type": "String"
                },
                {
                    "name": "contents",
                    "description": "The content that you want to send to the function, just like you would if you called console.log(___).",
                    "type": "Varies"
                },
                {
                    "name": "usePrefix",
                    "description": "True|False to prepend the console message with \"v18:\". Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.util.debug",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/debug.js",
            "line": 41,
            "description": "Does the actual outputting of the debug messages and runs the console.xxxx functions.",
            "itemtype": "method",
            "name": "output",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "What console function name to run. Ex: \"log\", \"warn\", \"info\".",
                    "type": "String"
                },
                {
                    "name": "contents",
                    "description": "The content that you want to send to the function, just like you would if you called console.log(___).",
                    "type": "Varies"
                },
                {
                    "name": "usePrefix",
                    "description": "True|False to prepend the console message with \"IBM v18:\".",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.util.debug",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/debug.js",
            "line": 59,
            "description": "Public API to show all the debug message that have been stored in the queue.",
            "itemtype": "method",
            "name": "show",
            "class": "IBMCore.common.util.debug",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 31,
            "description": "The main utility that creates your events messaging system for your class/object/code.",
            "itemtype": "method",
            "name": "eventCoordinator",
            "params": [
                {
                    "name": "obj",
                    "description": "Your object which you are setting up events for. It gets pub/sub object and methods merged into it.",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "The nice-name of your object. Used for debugging purposes.",
                    "type": "String"
                },
                {
                    "name": "eventNames",
                    "description": "An array of names of events (strings) you will publish, and to which other JS can subscribe to.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A new EventsCoordinator object with all messaging and methods setup for the named events.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 44,
            "description": "This is the actual internal class constructor that the public utility abstracts.",
            "itemtype": "method",
            "name": "EventsCoordinator",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 67,
            "description": "Internal utility. Used to merge pub/sub events into the object that owns the events we're setting up.",
            "itemtype": "method",
            "name": "mergeWith",
            "params": [
                {
                    "name": "obj",
                    "description": "The event owning object to merge the pub/sub methods into.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 119,
            "description": "Subscribe to the object's event and be notified when it happens (runs callback function.)",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "event_name",
                    "description": "The name of the owning object's event to subscribe to.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The name of your code/object that's subscribing. (Same name is used for unsubscribing.)",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to call when the event happens.",
                    "type": "Function"
                },
                {
                    "name": "prepend",
                    "description": "Set to true if you have multiple subscriptions to the same event and you want this one prepended to the event's callback array.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns your event coordinator object.",
                "type": "Object"
            },
            "example": [
                "\n\tIBMCore.common.module.masthead.subscribe(\"ready\", \"my name\", myCallbackFunctionName);"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 157,
            "description": "Unsubscribe from the object's event.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "event_name",
                    "description": "The name of the event to unsubscribe to.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The name of your code/object that's unsubscribing. (Same name is used for subscribing.)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns your event coordinator object.",
                "type": "Object"
            },
            "example": [
                "\n\tIBMCore.common.module.masthead.unsubscribe(\"ready\", \"my name\");"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 188,
            "description": "Resume a paused subscription.",
            "itemtype": "method",
            "name": "resumeSubscription",
            "params": [
                {
                    "name": "event_name",
                    "description": "The name of the event to resume the subscription for.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The name of your code/object that's resuming the subscription for (same name is used for subscribing.)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns your event coordinator object.",
                "type": "Object"
            },
            "example": [
                "\n\tIBMCore.common.module.masthead.resumeSubscription(\"ready\", \"my name\");"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 223,
            "description": "Temporarily pause a subscription.",
            "itemtype": "method",
            "name": "pauseSubscription",
            "params": [
                {
                    "name": "event_name",
                    "description": "The name of the event to pause the subscription for.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The name of your code/object that's pausing the subscription for (same name is used for subscribing.)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns your event coordinator object.",
                "type": "Object"
            },
            "example": [
                "\n\tIBMCore.common.module.masthead.pauseSubscription(\"ready\", \"my name\");"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 258,
            "description": "Publish an event. Anyone subscribed to the named event will get their callback function run.",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "event_name",
                    "description": "The name of the event to publish.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns your event coordinator object.",
                "type": "Object"
            },
            "example": [
                "\n\tmyEvents.publish(\"ready\");"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 303,
            "description": "Stops event publishing propagation.",
            "itemtype": "method",
            "name": "stopPropagation",
            "deprecated": true,
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 314,
            "description": "Internal utility. This is what actually runs the callback function.",
            "itemtype": "method",
            "name": "runNow",
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 346,
            "description": "Runs the named callback function if the event you're subscribing to has already happened. Use in conjunction with .subscribe() in cases where you're not sure if the event will happen before your code runs.",
            "itemtype": "method",
            "name": "runAsap",
            "example": [
                " \n\t// When translations (from service) are ready, call my custom function, or call immediately if already ready.\n\t// Translations can be cached so we need to use runAsap() also.\n\tIBMCore.common.translations.subscribe(\"dataReady\", \"footermenu\", myCustomFunctionName).runAsap(myCustomFunctionName);"
            ],
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/event-coordinator.js",
            "line": 375,
            "description": "This is the actual internal class constructor that handles the events. Used by EventsCoordinator internal class.",
            "itemtype": "method",
            "name": "EventHandler",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.eventCoordinator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/freezescrollbars.js",
            "line": 13,
            "description": "Adds a class to the body that acts like freezes the scrollbars (hides them).",
            "itemtype": "method",
            "name": "freezeScrollbars",
            "params": [
                {
                    "name": "bool",
                    "description": "(Boolean) Pass true to hide the scrollbars, pass false to show them."
                }
            ],
            "example": [
                "\n\tIBMCore.common.util.freezeScrollbars(true);\n\t"
            ],
            "class": "IBMCore.common.util.freezeScrollbars",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 18,
            "description": "Publishes \"ready\" event when all holds/events have happened that were subscribed to.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 23,
            "description": "Getkeeper object/constructor.\n<br />Called by \"IBM.common.util.gatekeeper\".\n<br />You can't use this directly. Use \"new IBM.common.util.gatekeeper()\" method.",
            "itemtype": "method",
            "name": "Gatekeeper",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "starting_holds",
                    "description": "Events to wait to happen.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 45,
            "description": "This is a method of the \"Gatekeeper\" constructor.\n<br />Takes an array of holds/events and adds each one to the array of events to wait for.",
            "itemtype": "method",
            "name": "Gatekeeper.addHolds",
            "params": [
                {
                    "name": "names",
                    "description": "An array of events to wait for to happen.",
                    "type": "Array"
                }
            ],
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 64,
            "description": "This is a method of the \"Getkeeper\" constructor.\n<br />Takes a hold/event and adds it to the ones to wait for.",
            "itemtype": "method",
            "name": "Gatekeeper.addHoldGatekeeper.Gatekeeper.",
            "params": [
                {
                    "name": "name",
                    "description": "A name of an event to wait for to happen.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Gatekeeper widget object (me).",
                "type": "Object"
            },
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 78,
            "description": "This is a method of the \"Getkeeper\" constructor.\n<br />Removes a hold from the ones to wait for.",
            "itemtype": "method",
            "name": "Gatekeeper.removeHold",
            "params": [
                {
                    "name": "name",
                    "description": "A name of an event to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Gatekeeper widget object (me).",
                "type": "Object"
            },
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 99,
            "description": "This is a method of the \"Getkeeper\" constructor.\n<br />Gets a list of holds and returns them in an array.",
            "itemtype": "method",
            "name": "Gatekeeper.Gatekeeper.getHolds",
            "return": {
                "description": "An array of holds we're waiting for.",
                "type": "Array"
            },
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 120,
            "description": "This is a method of the \"Getkeeper\" constructor.\n<br />Removes all holds/events we're waiting for.",
            "itemtype": "method",
            "name": "Gatekeeper.removeAllHolds",
            "return": {
                "description": "The Gatekeeper widget object (me).",
                "type": "Object"
            },
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/gatekeeper.js",
            "line": 143,
            "description": "This is a method of the \"Getkeeper\" constructor.\n<br />Checks if all holds/events have happened so the Gatekeeper can fire the ready event or not.",
            "itemtype": "method",
            "name": "Gatekeeper.isReady",
            "return": {
                "description": "The Gatekeeper widget object (me).",
                "type": "Object"
            },
            "class": "IBMCore.common.util.gatekeeper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 1,
            "description": "Uses getCurrentGridSize utility to add a class to HTML element so CSS can be applied generically \n\tper-grid size by pages without needing to do media queries or match v18 media queries.\n\t<br />Grid classes are same conventin as hidden-xxxx classes so everything matches up.",
            "class": "IBMCore.common.util.getCurrentGridSize",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 14,
            "description": "A helper that simply returns the current page content body grid size being show/used in the browser.",
            "itemtype": "method",
            "name": "getCurrentGridSize",
            "return": {
                "description": "Returns the width (in px) of the current grid size being used.",
                "type": "Integer"
            },
            "class": "IBMCore.common.util.getCurrentGridSize",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 59,
            "description": "Sets the grid size as a class on the root HTML element, allowing for nice-name class-based styles instead of\nhaving to keep up/in sync with media queries and code media queries on page-custom CSSes. \n<br>Future-proof changing media queries.",
            "itemtype": "method",
            "name": "initGridClass",
            "access": "private",
            "tagname": "",
            "class": "Other IBM - grid change",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 67,
            "description": "Published on root HTML element when grid size is changed. \n<br>Returns event \"detail\" with \"gridnum\" property containing the new grid size as a number.\n<br><strong>Example usage</strong>:\n<pre>\n\tdocument.documentElement.addEventListener(\"ibm-gridchange\", function (evt) {\n\t\tconsole.log(\"Grid is now: \", evt.detail.gridnum);\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-gridchange",
            "class": "Other IBM - grid change",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/grid.js",
            "line": 92,
            "description": "If the current grid size is different than previous determined one, \n change current value and class, then publish event.",
            "itemtype": "method",
            "name": "updateGridClass",
            "access": "private",
            "tagname": "",
            "class": "Other IBM - grid change",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 18,
            "description": "Publishes this event after the &lt;head> has been loaded and all meta data parsed and setup from it.",
            "itemtype": "event",
            "name": "dataReady",
            "class": "IBMCore.common.util.meta",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 29,
            "description": "Automatically runs onload ASAP when the body element is available (means full &lt;head> has loaded.)\nMerges in the digitalData object into meta object, and normalizes some country/language and other misc meta data.\n<br />__Note:__ Calling this function manually causes all meta \"ready\" event subscribers' callbacks functions to run (again).",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.util.meta",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 154,
            "description": "Changes the page locale to the passed locale (format: lc-cc), then re-inits meta so that it gets new translations and \nrecreates masthead/footer/SBS/anything else that waits for meta publish. \nLocale param format uses indusry standard:  \"lc-cc\" (case insensitive b/c we set it properly).",
            "itemtype": "method",
            "name": "changePageLocale",
            "params": [
                {
                    "name": "locale",
                    "description": "Industry standard locale (language and country code) in format \"lc-cc\", case insensative.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tIBMCore.common.util.meta.changePageLocale(\"fr-ca\");"
            ],
            "class": "IBMCore.common.util.meta",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 176,
            "description": "Utility to return the current country code (lowercased) that the page is set to.\n<br>Get's the \"corrected\" value we set.",
            "itemtype": "method",
            "name": "getPageCc",
            "return": {
                "description": "The 2 letter country code (lowercased) that the page meta is set to.",
                "type": "String"
            },
            "class": "IBMCore.common.util.meta",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/meta.js",
            "line": 187,
            "description": "Utility to return the current language code (lowercased) that the page is set to.\n<br>Get's the \"corrected\" value we set.",
            "itemtype": "method",
            "name": "getPageLc",
            "return": {
                "description": "The 2 letter language code (lowercased) that the page meta is set to.",
                "type": "String"
            },
            "class": "IBMCore.common.util.meta",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 1,
            "description": "Random small utilities that don't deserve their own file.\n\tEach one declares a class then documents the function.",
            "class": "IBMCore.common.util.addCssRule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 15,
            "description": "Utility to dynamically inject a CSS style/rule into the head.",
            "itemtype": "method",
            "name": "addCssRule",
            "params": [
                {
                    "name": "selector",
                    "description": "(String) The CSS path/element you want to apply the style to."
                },
                {
                    "name": "css",
                    "description": "The style to apply to the CSS path/element. Can be a string (CSS style syntax) or an object.",
                    "type": "Varies"
                }
            ],
            "example": [
                "\n\t// Style as an object.\n\tIBM.common.util.addCssRule(\".someClassName\", {\n\t\toverflow: \"hidden\"\n\t});\n\n\t// Style as a string.\n\tIBM.common.util.addCssRule(\".someClassName\", \"overflow: hidden\");"
            ],
            "class": "IBMCore.common.util.addCssRule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 77,
            "description": "Takes a time/number in seconds and formats it to HH:MM:SS, but hours are only shown only if hours are > 1.\nOtherwise it's MM:SS",
            "itemtype": "method",
            "name": "convertSecondsToHMS",
            "params": [
                {
                    "name": "timeInSeconds",
                    "description": "The number of seconds you want to pretty-print as HMS.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Returns a formatted time using convention:  HH:MM:SS",
                "type": "String"
            },
            "class": "IBMCore.common.util.convertSecondsToHMS",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 112,
            "description": "Returns a unique DOM id that is not used by any other element on the page. Useful for dynamically added elements. \n<br />All IDs are in the format: ibm-dynid-<num>",
            "itemtype": "method",
            "name": "generateId",
            "return": {
                "description": "Unique ID.",
                "type": "String"
            },
            "class": "IBMCore.common.util.generateId",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 137,
            "description": "A helper that will get any special named/prefixed data-xxxx attributes. \n<br>For example get all data-attrs that start with \"ibmevent_\", like @data-ibmevent_xxxxxxx.",
            "itemtype": "method",
            "name": "getDataAttributes",
            "params": [
                {
                    "name": "el",
                    "description": "DOM element or jQuery element selector to grab the data attributes from.",
                    "type": "DOM element"
                },
                {
                    "name": "dataPrefix",
                    "description": "The string to look for and grab the data-attrs that start with this.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object containing matching data attributes and values.",
                "type": "Object"
            },
            "example": [
                " \n\tIBMCore.common.util.getDataAttributes($el, \"ibmevent_\")"
            ],
            "class": "IBMCore.common.util.getDataAttributes",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 172,
            "description": "Gets the scrollbar width of the browser being used.\n<br />Used for the freezeScrollbars utility (which is used for overlays.)",
            "itemtype": "method",
            "name": "getScrollbarWidth",
            "return": {
                "description": "Returns the width (in px) of the browser's scrollbar element.",
                "type": "Integer"
            },
            "class": "IBMCore.common.util.getScrollbarWidth",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 209,
            "description": "Tells you if the page is using the fluid 12 grid or not. \n<br>Does the check on first run only, then simply always returns the answer.",
            "itemtype": "method",
            "name": "has12grid",
            "return": {
                "description": "True|False if the 12 grid use was detected.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.has12grid",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 232,
            "description": "Tells you if the element has scrollbars showing or not.",
            "itemtype": "method",
            "name": "hasScrollbars",
            "params": [
                {
                    "name": "el",
                    "description": "The element that you want to know if it currently is showing vertical scrollbars.",
                    "type": "DOM element"
                }
            ],
            "return": {
                "description": "True|False if it currently has scrollbars or not.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.hasScrollbars",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 248,
            "description": "Common public API to set the ipcInfo cookie with passed country and language codes.\n<br>Must use both country and language code.",
            "itemtype": "method",
            "name": "setIpcCookie",
            "params": [
                {
                    "name": "cc",
                    "description": "The two letter country code.",
                    "type": "String"
                },
                {
                    "name": "lc",
                    "description": "The two letter language code.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.util.setIpcCookie",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/misc.js",
            "line": 275,
            "description": "Utility that escapes strings to they are safe for DOM injection.\n<br />It behaves the same as the PHP function htmlspecialchars and encodes &amp;, &lt;, &gt; and &quot;.\n<br />__NOTE:__ Available to all Strings via string prototype (shortcut) setup that simply calls this utility for ease of use. \n(See example below)",
            "itemtype": "method",
            "name": "htmlspecialchars",
            "params": [
                {
                    "name": "str",
                    "description": "String to replace/escape HTML special characters in.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a string with special HTML characters escaped.",
                "type": "String"
            },
            "example": [
                "\n\t// Using the built-in String method.\n\tcomments = someUserInputText.htmlspecialchars();\n\n\t// Or the long way using the actual utility:\n\tcomments = IBMCore.common.util.string.htmlspecialchars(someUserInputText);"
            ],
            "class": "IBMCore.common.util.string.htmlspecialchars",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 48,
            "description": "Adds a new element to the END of the queue and returns a unique id for that element. As soon as\nan element is added the queue starts checking the condition callback (every 50ms) and once this\nfunction returns true the callback is executed once. Afterwards the element is removed from the queue.\n<br/>When the condition (param 1) returns true, your callback function (param 2) is run.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "condition",
                    "description": "Function reference that has to return true or false.",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "Function to be executed once the condition function returns true.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Unique ID for this queue'd listener item. Used when you want to kill/remove your listener.",
                "type": "Integer"
            },
            "class": "IBMCore.common.util.queue",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 66,
            "description": "Adds a new element to the BEGINNING of the queue. Other then that it does exactly the same as\nthe push function.",
            "itemtype": "method",
            "name": "unshift",
            "params": [
                {
                    "name": "condition",
                    "description": "Function reference that has to return true or false.",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "Function to be executed once the condition function returns true.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Unique ID for this queue'd listener item. Used when you want to kill/remove your listener.",
                "type": "Integer"
            },
            "class": "IBMCore.common.util.queue",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 82,
            "description": "Removes the listener with the given id from the queue.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The unique item-ID returned by the push or unshift function.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "True in case the item id was valid and removed, false otherwise.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.queue",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 101,
            "description": "Internal worker function that works off the queue.",
            "itemtype": "method",
            "name": "doWork",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.queue",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/queue.js",
            "line": 135,
            "description": "Waits until a given element (by ID) is available in the DOM and executes the passed callback function. \nIt utilizes the queue system and the call might be some time after the element is available, \nnot exactly when it is available. But overall the performance should be significantly faster than ready function.\nNOTE: If the last parameter \"onload\" is set and the element is not ready once the DOM is loaded\nthe callback function is executed on load. Like a \"whichever is faster\" or a failsafe if you need it.",
            "itemtype": "method",
            "name": "waitForElement",
            "params": [
                {
                    "name": "elementId",
                    "description": "Element ID to be waited for, i.e. \"ibm-com\"",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called once the element is available.",
                    "type": "Function"
                },
                {
                    "name": "onload",
                    "description": "Optional parameter; if set to true the callback is loaded once the DOM is ready.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.util.queue",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/scrolledintoview.js",
            "line": 13,
            "description": "Tells you if an element is visible in the viewport window.\n<br />Use this when you want to wait to animate something or do an action when the element is \"in view\", or use as a helper for infinite scroll functionality.",
            "itemtype": "method",
            "name": "scrolledintoview",
            "params": [
                {
                    "name": "el",
                    "description": "The element you want to know if is currently at least partly visable in the viewport.",
                    "type": "DOM element"
                }
            ],
            "return": {
                "description": "True if it is, false if it isn't.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.scrolledintoview",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/scrolltracker.js",
            "line": 17,
            "description": "Callback from subscription to meta 'dataReady' event publisher.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.util.scrolltracker",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/statshelper.js",
            "line": 16,
            "description": "This fires an event to Coremetrics with whatever data objects are passed to it. The object props are the same\n as they were from Netinsight event.",
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "eventData",
                    "description": "Object with standard IBM metric event properties and values to send to Coremetrics.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.statshelper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/statshelper.js",
            "line": 52,
            "description": "This will get the list of custom metrics events set on an element via data-attr and return an object with the IBM metrics event parameters and values. Only used on videoplayer by default to extend the default tagging for page owners that want to override the default widget event tagging.\n<br />Syntax for the HTML data-attr is:  data-ibmevent_<event param lowercased>=\"some value\"",
            "itemtype": "method",
            "name": "getCustomEventParams",
            "params": [
                {
                    "name": "$el",
                    "description": "The element you want to get the custom data-attr metrics event params from.",
                    "type": "JQuery DOM selector"
                }
            ],
            "return": {
                "description": "eventData  Object with IBM metrics event params and values that were set on the passed element.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.statshelper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 16,
            "description": "Clears the user's browser localStorage (for the owning domain).\n<br />CAUTION: This is the localStorage equivalent of clearing all of the user's cookies for your domain.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "True if localStorage is supported, else false.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.storage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 32,
            "description": "Gets the requested item from browser localStorage.",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key/item to get from localStorage.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The data for the key if localStorage is supported &amp;&amp; if key exists &amp;&amp; key is not expired,\n else returns: null.",
                "type": "Varies"
            },
            "class": "IBMCore.common.util.storage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 72,
            "description": "Checks if browser localStorage is supported by the current user's browser.\n<br />This is used by every method in this utility class so you don't need to use this unless you have special case use for it.\n<br />Provided as a public method purely for your convenience.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "True if localStorage is supported, else false.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.storage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 84,
            "description": "Deletes the requested item from browser localStorage.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key/item to delete from localStorage.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if localStorage is supported, else false.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.storage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/storage.js",
            "line": 99,
            "description": "Stores data in browser localStorage.",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key to use for this data store in localStorage.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value/data to store in localStorage.",
                    "type": "String"
                },
                {
                    "name": "lifetime",
                    "description": "The storage item's TTL (time to live), in <strong>SECONDS</strong>. AKA: How long until it expires.\n If lifetime is not supplied, the storage item TTL is session-only.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "True if localStorage is supported, else false.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.util.storage",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 14,
            "description": "Publishes this event after __main__ translations have been merged __and__ the DOM is ready. \n<br />Kinda dumb, but just a helper so other JS doesn't have to do $(function().. themselves after translation ready event is fired.",
            "itemtype": "event",
            "name": "dataAndDomReady",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 20,
            "description": "Publishes this event after __main__ translations have been merged into common.translations.data{}",
            "itemtype": "event",
            "name": "dataReady",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 25,
            "description": "Publishes this event if there is an error getting the __main__ translations.",
            "itemtype": "event",
            "name": "error",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 49,
            "description": "Callback from subscription to meta \"dataReady\" event publisher. \n<br />Validates cc and lc, etc. If translations exist in storage, \nuses cached copy and passes them to callback, else fetches translation data file for the locale.\n<br />__Note:__ When this runs and publishes ready event, it calls all active subscribers' callback functions.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 87,
            "description": "Listens for translation data file to be loaded, caches them in storage, then fires \"dataReady\" events.",
            "itemtype": "method",
            "name": "setupTranslationsReadyListener",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 114,
            "description": "This uses the \"data\" utility. The data file calls the \"provide\" and automatically puts the translation object as a named\n child in translation.data. This uses 'promises' to work.",
            "itemtype": "method",
            "name": "getV18Translations",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 143,
            "description": "Merges the inbound object into public IBMCore.common.translations.data object.",
            "itemtype": "method",
            "name": "mergeTranslations",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "An object (of translations) to merge into common.translations.data{}",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/translations.js",
            "line": 154,
            "description": "Adds the current locale translations (me.data) into currStoredTranslations{} then saves into localStorage.\n<br>Only stores the latest one, otherwise it builds up with locale change.\n<br />Current TTL for stored translations is 4 hours.",
            "itemtype": "method",
            "name": "storeTranslations",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.translations",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 17,
            "description": "Internal function that does the URL editing of adding/removing params.\n<br />The add/remove APIs call this to do the actual work.",
            "itemtype": "method",
            "name": "editUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataObj",
                    "description": "Object with data:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "action",
                            "description": "What to do... add (replace) or remove a param.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "The URL string to modify.",
                            "type": "String"
                        },
                        {
                            "name": "paramName",
                            "description": "The name of the param to add.",
                            "type": "String"
                        },
                        {
                            "name": "paramValue",
                            "description": "The value of the param to add.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new URL string with the new name/value param added (or replaced if it existed).",
                "type": "String"
            },
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 61,
            "description": "Adds a name/value pair (URL param) to the passed URL string and returns the new URL string.\n<br />NOTE: If param already exists, it will replace the value.",
            "itemtype": "method",
            "name": "addParam",
            "params": [
                {
                    "name": "dataObj",
                    "description": "Object with settings:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The URL string to modify.",
                            "type": "String"
                        },
                        {
                            "name": "paramName",
                            "description": "The name of the param to add.",
                            "type": "String"
                        },
                        {
                            "name": "paramValue",
                            "description": "The value of the param to add.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new URL string with the new name/value param added (or replaced if it existed).",
                "type": "String"
            },
            "example": [
                "\n\tvar newUrl = IBMCore.common.util.url.addParam({\n\t\turl: window.location.href,\n\t\tparamName: \"showtabs\",\n\t\tparamValue: \"yes\"\n\t});"
            ],
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 83,
            "description": "Removes a param from the passed URL string (if exists) and returns the new URL string.",
            "itemtype": "method",
            "name": "removeParam",
            "params": [
                {
                    "name": "dataObj",
                    "description": "Object with settings:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The URL string to modify.",
                            "type": "String"
                        },
                        {
                            "name": "paramName",
                            "description": "The name of the param to remove.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new URL string with the param removed (if it existed).",
                "type": "String"
            },
            "example": [
                "\n\tvar newUrl = IBMCore.common.util.url.removeParam({\n\t\turl: window.location.href,\n\t\tparamName: \"showtabs\",\n\t});"
            ],
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 102,
            "description": "Get all URL params from the browser's current URL as a single object.\n<br />__Note:__ If you just want a single URL param by name, use the \"getParam\" function instead.",
            "itemtype": "method",
            "name": "getAllParams",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to parse the params out of. If none passed, the browser's URL is used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "All params from the URL used as object properties.",
                "type": "Object"
            },
            "example": [
                "\n\tvar urlParams = IBMCore.common.util.url.getAllParams();\n\tvar refCode = urlParams.cm_re;"
            ],
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 128,
            "description": "Get a single URL param from a URL string.\n<br />You can pass in a custom URL string to use, otherwise the browser's URL is used.\n<br />__NOTE:__ If you want to get all params from a URL in one shot, use the \"getAllParams\" function instead.",
            "itemtype": "method",
            "name": "getParam",
            "params": [
                {
                    "name": "paramName",
                    "description": "The param you want to get the value for.",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "A custom URL string to parse. Otherwise the browser's URL is used (default).",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The value of the param *if the param exists*, else returns undefined.",
                "type": "String"
            },
            "example": [
                "\n\tvar refCode = IBMCore.common.util.url.getParam(\"cm_re\");"
            ],
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 153,
            "description": "Get the page's URL. Uses the canonical meta value if exists, else the current browser URL.",
            "itemtype": "method",
            "name": "getUrl",
            "return": {
                "description": "The URL as found in the canonical meta tag value, else the current browser URL minus tracking params.",
                "type": "String"
            },
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 195,
            "description": "Parses all name/value params from a querystring and returns them all in a single object.\n<br />Used onload and automatically puts all URL params into common object.\n<br />See \"parseCurrentUrlParams\" method.",
            "itemtype": "method",
            "name": "paramsToObject",
            "params": [
                {
                    "name": "str",
                    "description": "The string to parse out name/value pair parameters from.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object with all name/value pairs as properties.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 245,
            "description": "Concats a basic object of name/value pairs into a URL param string. Like a \"stringify\" function.",
            "itemtype": "method",
            "name": "objectToQuerystring",
            "params": [
                {
                    "name": "dataObj",
                    "description": "An object with all name/value pairs as properties.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name/value pairs from the inbound object represented as URL params string (separated with &).",
                "type": "String"
            },
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/url.js",
            "line": 274,
            "description": "Gets the browser's current URL's querystring and parses into common object for use by utilities: getParam &amp; getAllParams.",
            "itemtype": "method",
            "name": "parseCurrentUrlParams",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.url",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 64,
            "description": "Publishes this event after we've retrieved the info from the Demandbase web service request.",
            "itemtype": "event",
            "name": "userIpDataReady",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 69,
            "description": "DEPRECATED: Publishes this event after we've retrieved the info from the IBMid web service request.\n<br />Legacy, because IBMid WSRs were consolidated and contains all info now. Publishes at the same time as IBMDataReady.",
            "itemtype": "event",
            "name": "userstateReady",
            "deprecated": true,
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 76,
            "description": "Publishes this event after we've retrieved all the info from the IBMid web service request.",
            "itemtype": "event",
            "name": "userIBMDataReady",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 81,
            "description": "Publishes this event after the initial object is setup. \n<br />Does not necessarily mean the object is populated, but just that the object exists and is ready to be populated.",
            "itemtype": "event",
            "name": "ready",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 87,
            "description": "Publishes this event if there's an error requesting user data, ex: if it's a non-IBM domain.",
            "itemtype": "event",
            "name": "error",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 204,
            "description": "Called from the callback from the user data request to Demandbase.\n<br />Loops thru the fields we want and adds them to a data object and returns to the caller.",
            "itemtype": "method",
            "name": "createUserdataFromServiceRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The JSON object returned from Demandbase.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A data object to merge into the common user object.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 240,
            "description": "Returns the user object with known data about the user. ALL NON-PII stuff.",
            "itemtype": "method",
            "name": "getInfo",
            "return": {
                "description": "The user object populated with available data.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 251,
            "description": "Does same basic cookie check coremetrics does to determine if user is an IBMer or not and adds it to user object.\n<br>Technically you can just add one of these cookies and make it \"true\", but this is a good enough check.\n<br>IOW: There is no assurance here and it shouldn't be used as such.\n <br>NOTE: This does NOT mean they are currently connected to the intranet. Just that they are an IBMer and have used w3/SSO and authenticated at some point.",
            "itemtype": "method",
            "name": "addIBMerCheckData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 268,
            "description": "Tries to get our data from local storage and decrypts the key & value and returns the decrypted object.",
            "itemtype": "method",
            "name": "getUserdataFromStorage",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The stored/cached user data if exists and not expired.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 296,
            "description": "Requests data from the Demandbase service.\n<br />This is only called if no storage data exists (or it was past expiration date).\n<br />If the site is not *.ibm.com (referrer rules for web service), then \"error\" event is published.\n<br />Calls methods to populate and store user data if valid.",
            "itemtype": "method",
            "name": "requestUserIpdataFromService",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 341,
            "description": "Merges the data object into the existing user object.",
            "itemtype": "method",
            "name": "setInfo",
            "params": [
                {
                    "name": "dataObj",
                    "description": "The object to merge with existing user data.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The user object, after populated.",
                "type": "Object"
            },
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 355,
            "description": "Try and get user data from local storage, else calls IP lookup service.\n<br />In the end, populates user object with data which is retrievable via the \"getInfo\" API.",
            "itemtype": "method",
            "name": "setUserIpData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 366,
            "description": "If IP is forced || or no data was retrieved from storage ||\n\tor storage data was compromised (Ex: user screws with localstorage values)\n\tdo WSR and then set data from service,\n\nElse the user had valid stored data, so merge it into the common user object.\n\nNOTE: \"information_level\" is used as a flag since other data is also kept in storage. Don't remove.",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 387,
            "description": "Loops thru each property in the common user object and encodes and stores it in localstorage for repeat view use (cache).",
            "itemtype": "method",
            "name": "storeUserObject",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 417,
            "description": "Gets the ipcInfo cookie and adds it to the user data object for others to use as they wish.",
            "itemtype": "method",
            "name": "addIpcCookieData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 453,
            "description": "Used by KC, keeping for legacy usage.",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 469,
            "description": "Internal helper - common method used when we need to set user data as signed in or not.",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 478,
            "description": "The main gig. Called at run-time of this script since there is no DOM dependency and we can do this ASAP.\n<br />Subscribes and fires event when user data is ready.\n<br />Tries to get data from local storage. If expired, invalid, or the \"ip\" param was used, it makes a service request.\n<br />The common user object gets populated after data retrieved from storage or on WSR callback.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/user.js",
            "line": 548,
            "class": "IBMCore.common.util.user",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/v18pagetracker.js",
            "line": 13,
            "description": "Fires metric event, use \"EvAction\" as filter with value = \"v18 page tracker\"",
            "itemtype": "event",
            "name": "Page features metric event",
            "class": "Other IBM - common v18 page tracker",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/util/v18pagetracker.js",
            "line": 17,
            "description": "Fires on page load using detected page features for values.",
            "itemtype": "method",
            "name": "trackPageFeatures",
            "access": "private",
            "tagname": "",
            "class": "Other IBM - common v18 page tracker",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/alexa-tracking.js",
            "line": 4,
            "description": "This is for Kevin Eagan & John Rosato for Alexa certification and competitive analysis.\n\t<br />Must be kept until explicitly told it can be removed. Verified with Rosato: Nov 2016.\n\t<br />In order to certify to Alexa that John's account is the owner of the ibm.com site and to get better metrics, \n\t we need this on all pages.",
            "class": "IBMCore.common.util.bitly",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/bitly.js",
            "line": 24,
            "description": "Calls bitly web service to get the short URL and returns it to the provided success/error callback. \n<br />This is async/jsonp.",
            "itemtype": "method",
            "name": "shorten",
            "params": [
                {
                    "name": "options",
                    "description": "Object with settings to use for service call:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "Specific URL to use, else uses window.location.href.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "Function to call on success of bitly service request. Passes short URL to function.",
                            "type": "Function"
                        },
                        {
                            "name": "error",
                            "description": "Function to call/run on bitly service request error. Passes original URL to function.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.util.bitly",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/bitly.js",
            "line": 59,
            "description": "Callback executed for bit.ly JSONP web service request and runs user-defined success or error callback function.",
            "itemtype": "method",
            "name": "_callback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "Response",
                    "description": "data from bitly web service request.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.util.bitly",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/jquery-extensions.js",
            "line": 10,
            "description": "This is not a method, but rather a \" :focusable\" selector extension to jQuery.\n<br />This allows you to find focusable elements for tabbing/accessibility.\n<br />Usage:  $(\"someContainer :focusable\")  gives you a list of $elements that you can do .focus() on.",
            "itemtype": "method",
            "name": "focusable",
            "class": "jQuery:focusable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/modernizr-extensions.js",
            "line": 1,
            "description": "Custom modernizr and other random tests/detection setups.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 44,
            "description": "How survey configs are determined which one to use:\nLogic is split into 2 groups for ease of maintenance and sanity. There's no point in trying to figure out what gate the user\n\t  should go to for a flight if they don't even have a ticket to get past security.\nCombining entry % with the other 'active/seen it' logic is just nuts and would make it too complex.\n\tSo...\n\tFirst: Figure out the entry # and if user is even allowed past security. No point in doing any more logic if\n\t\t\tthe don't even have a ticket.\n\tSecond: They are in, now figure out what config to show them based on the # + 3 other properties.\n\n\nIN ORDER OF SIMPLICITY, NOT IN ORDER OF LOGIC REQUIRED TO DETERMINE PROPER CONFIG TO USE.\n\tBelow are cases assuming traffic % match has been met. In other words, the user qualified for a survey\n\t(basic % threshhold has been met) here are the cases on what happens next in logic scheme.\nEach config has three states that determine the logic rules:\n\t - Is still active.\n\t - Has already been seen.\n\t - Replaces default (survey A) or is survey B.\nEXISTING FUNCTIONALITY SINCE INCEPTION:\n\tNo custom intercept config exists (uses default survey A):\n\t\tCase 1: Nothing is set on the page (95% of pages).\n\t\t\tExpect: Global default config used, with global default entry % (5).\n\t\tCase 2: ONLY global_percent is set (means page wants more/less traffic to default intercept)\n\t\t\tExpect: Global default config used, but replace default {intercept.percent} with PAGE global_percent.\n\t\tCase 3: Global % is set to 0 AND NO CUSTOM \"INTERCEPT\" CONFIG EXISTS (nor new alterante).\n\t\t\tExpect: Stop, do nothing. Page doesn't want any intercept survey.\n\t\tCase 4: Global default already seen default (cookie exists)\n\t\t\tExpect: Stop, do nothing. User has already seen this one.\n\n\tCustom intercept config set (replacement for survey A):\n\tCase 5: Custom intercept config is setup (standard usage).\n\t\tExpect: Custom {intercept.percent} is used for traffic % match. Custom intercept config used.\n\tCase 6: Custom intercept config is setup, is active, but already seen (cookie exists).\n\t\tExpect: Stop, do nothing. User has already seen this one.\n\tCase 7: Custom intercept config is setup, but inactive (disabled or not within start/stop date range.)\n\t\tExpect: Custom config is ignored as if it were never set, fall back to defaults, case 1|2.\n\tCase 8: Custom intercept config is setup, but inactive AND default has already seen.\n\t\tExpect: Stop, do nothing. No active custom config and default has already been seen.\n\nNEW FEATURE CASES:\n\tCustom intercept ALTERNATE config ONLY (standard usage, uses \"default\" global as other option). This is a \"survey B\" not a replacement for \"survey A\":\n\t\tCase 9: Custom ALTERNATE config is setup.\n\t\t\tExpect: entry_percent is total traffic entry %, then broken down in settings of:\n\t\t\t\t\tGlobal percent or page global_percent setting is % to use default config.\n\t\t\t\t\t+\n\t\t\t\t\tAlternate config.percent is % to use alternate config.\n\t\t\t\t\tAKA: global_percent + alternate_intercept.percent = entry_percent.\n\t\tCase 10: Custom ALTERNATE config is setup, but already seen OR inactive.\n\t\t\tExpect: No splitting. Custom alternate config is ignored as if it were never set fall back to defaults, case 1|2.\n\t\tCase 11: Custom ALTERNATE config is setup, but DEFAULT already seen (opposite of above).\n\t\t\tExpect: No splitting. Send all entry traffic to use alternate config.\n\t\tCase 12: Custom ALTERNATE config is setup, but already seen or inactive AND default already seen.\n\t\t\tExpect: Stop, do nothing. No valid custom config and default has already been seen.\n\n\n\tCustom intercept AND alternate config set (special usage). Traffic is only ever split if BOTH configs are valid.\n\t\tOtherwise assumes as if the valid one was the only one that existed (ex: all cases above ^):\n\t\tThink of this as simply dynamically choosing the custom intercept config to be used in the above cases.\n\t\tCase 13: Custom intercept and alternate config are setup.\n\t\t\tExpect: entry_percent is total traffic entry %, then broken down in settings of:\n\t\t\t\t\tintercept.percent.\n\t\t\t\t\t+\n\t\t\t\t\tintercept_alternate.percent is % to use alternate config.\n\t\t\t\t\tAKA: intercept.percent + alternate_intercept.percent = entry_percent.\n\t\tCase 14: intercept_alternate config has been seen or inactive.\n\t\t\tExpect: intercept_alternate config is ignored as if it were never set. Send all entry traffic to custom intercept config.\n\t\tCase 15: intercept config has been seen or inactive (opposite of above).\n\t\t\tExpect: intercept config is ignored. Assume as if it were never set. Send all entry traffic to intercept_alternate config.\n\t\tCase 16: intercept AND intercept_alternate config have each been seen.\n\t\t\tExpect: Stop, do nothing. Both configs are still active, just both been seen.\n\t\tCase 17: intercept AND intercept_alternate config are both inactive.\n\t\t\tExpect: No valid custom config, ignore as if they were never set. Fall back to original default case 1|2 option.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 248,
            "description": "This let's us know if the page's intercept survey has expired.",
            "itemtype": "method",
            "name": "isSurveyExpired",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "endDate",
                    "description": "[String] The formatted end date of the survey."
                }
            ],
            "return": {
                "description": "[Boolean] True or false, if today's date is past the survey stop date."
            },
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 266,
            "description": "This let's us know if the page's intercept survey has passed the \"start\" date set.",
            "itemtype": "method",
            "name": "isSurveyStarted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "startDate",
                    "description": "[String] The formatted start date of the survey."
                }
            ],
            "return": {
                "description": "[Boolean] True or false, if today is past the survey start date."
            },
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 384,
            "description": "This is the public function to call to open a feedback survey. It can be called from on click of a link, or\n\t\t programatically after some process or user event.",
            "itemtype": "method",
            "name": "autoInit",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 419,
            "description": "First do quick check to see if the traffic entry % even matches.\nIt's useless to do anything if user don't even qualify to get in the door.\n\nIf there's an alternate set:\n\tIf alt is active: use new 'entry_percent',\n\tOtherwise it's like alt wasn't coded and treat like normal page custom intercept...\nElse if there's a regular custom config (only); if that's active use that local % (existing functionality custom intercept)\nOtherwise all cases use page global default setting.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 504,
            "itemtype": "method",
            "name": "initFeedback",
            "params": [
                {
                    "name": "conf",
                    "description": "The settings for the feedback survey that you want to show.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 736,
            "description": "Creating Intercept Survey Invitation overlay.\n\nIt will pop up on the page loading, and asking for participating to the survey.\n\n 1) If User clicks on yes button, means they wish to participate on survey then, open survey overlay and hide invitation overlay\n 2) If user clicks on no button, means they do not wish to participate on survey.\n 3) Create a cookie on hiding of the invitation overlay, as global barrier for 30 days to restrict them to participate on another survey from IBM.com.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 888,
            "description": "Creating Intercept Survey overlay.\n\nIt will pop up after user clicks on yes button from invitation overlay, which will load the survey with in IFRAME from external/internal sources.\n\n1) Create a cookie on hiding of the survey overlay, as local barrier till end date for the survey, to restrict them to participate on current survey again.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 938,
            "description": "Tracking by coremetrics code for intercept shown",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 960,
            "description": "Events created for invitation overlay form,\n\n1) Yes button:               If user clicks on yes button, then open survey overlay\n2) No button:                If user clicks on no button, then hide the invitaiton overlay\n3) About feedback at IBM:    If user clicks on 'About feedback at IBM', then show the IBM privaly policy window on the invitation overlay.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 994,
            "description": "Tracking by coremetrics code for if user clicks yes button",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 1021,
            "description": "Creating survey URL.\n\nBased on the survey type, survey URL will vary from different sources.\nThis function is making URL for the particular survey based on the survey type.\n\n1) Creating survey URL\n2) Adding metadata with the URL if user given in configuration (This is now only appicable to ASM survey's, rest of the survey type meta information will add up later)",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 1037,
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 1083,
            "description": "Creating survey meta data format.",
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/vendor/survey-ccfintercept.js",
            "line": 1283,
            "class": "IBMCore.common.widget.ccfintercept",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 75,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init carousels HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting your widget HTML after onload, call this plug-in on your injected carousel container.",
            "itemtype": "method",
            "name": "$.fn.carousel",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 90,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new carousel object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createCarousel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The carousel widget instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 108,
            "description": "Published on widget's DOM element after carousel has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_carousel_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t\t// Carousel widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 119,
            "description": "Carousel object/constructor for our public jQuery plugin.\n<br />Called by \"createCarousel\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).carousel() plug-in method to dynamically init and create a carousel.",
            "itemtype": "method",
            "name": "Carousel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_carousel_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 157,
            "description": "This is a method of the \"Carousel\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Carousel.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 170,
            "description": "This is a method of the \"Carousel\" constructor.\n<br />Called by our public jQuery plug-in after a new Carousel object has been created and returned by \"createCarousel\".\n<br />Automatically inits the carousel plug-in (slick carousel) on the passed element, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Carousel.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM element"
                }
            ],
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 216,
            "description": "This sets up the config and HTML for init'ing.",
            "itemtype": "method",
            "name": "mergeSettings",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 245,
            "description": "This is called if randomize setting is used on carousel. Picks a random slide and MOVES it to be the first one.",
            "itemtype": "method",
            "name": "randomizeFirstPanel",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/carousel.js",
            "line": 256,
            "description": "This does the actual slick carousel init'ing.",
            "itemtype": "method",
            "name": "initHtml",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.carousel",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/datatable.js",
            "line": 41,
            "description": "Published on widget's DOM element after datatable has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_table_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // datatable widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.datatable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/datatable.js",
            "line": 52,
            "description": "Automatically called onload on any &lt;table> that has @data-widget=\"datatable\".\n<br />Automatically inits the datatable plug-in (datatables.net) on the passed element, merging in any manually passed settings, the &lt;table> @data-xxxx settings, and our default settings. You should never call this function unless you are dynamically injecting a table \"post-DOMready\" and you need to initialize the table widget manually.\n<br />In the case when you are doing AJAX or dynamically injecting or changing a table, this allows for dynamic injection of a table w/o the need to add all the @data-xxxx settings just to set it up on your .init() call. You can simply pass the setting object with the element when you call .init().\n<br />This also does some adjustments to make the table look right with caption element and mapping lowercase data-* attributes to their mixed-case options for the plug-in. @data-xxxx attributes are always lowercase. If you need to do mixed case settings put a \"-\" in front of the letter:  data-my-property-name=\"some value\" comes out as   myPropertyName: \"some value\".",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "tableEl",
                    "description": "The &lt;table> element you want to init the datatable widget on.",
                    "type": "DOM element"
                },
                {
                    "name": "passedSettings",
                    "description": "Settings to use for the datatable widget. Optional use instead of @data-xxxx attributes on the &lt;table> when dynamically injecting a &lt;table>",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The data table widget instance.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.datatable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/datatable.js",
            "line": 144,
            "description": "Finds the search field in the passed context if it exists, and replaces the field label of \"Search\" with the translated version from v18 translation data file.",
            "itemtype": "method",
            "name": "translateSearch",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.datatable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/datepicker.js",
            "line": 39,
            "description": "Init function called on load for any date or time pickers that exist on the page at time of load.\n<br />Inits the pickatime/date plug-in using any user settings to override default that v18 sets.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The &lt;input> element you want to add the widget to.",
                    "type": "DOM element"
                },
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.datepicker",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 43,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init dynamic tab HTML that exist on the page on DOM ready.",
            "itemtype": "method",
            "name": "$.fn.dyntabs",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 57,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new dynamit tabs object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createDynTabs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The dynamic tab object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 75,
            "description": "Publishes this event if there was an error creating the widget.",
            "itemtype": "event",
            "name": "error",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 80,
            "description": "Published on widget's DOM element after dyntabs has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_tabwidget_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // dynamic tabs widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 91,
            "description": "Dynamic tabs object/constructor for our public jQuery plugin.\n<br />Called by \"createDynTabs\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).dyntabs() plug-in method to dynamically init and create dynamic tabs.",
            "itemtype": "method",
            "name": "DynTabs",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_tabwidget_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 119,
            "description": "This is a method of the \"Dyntabs\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Dyntabs.destroy",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 139,
            "description": "This is a method of the widget constructor.\n<br />Called by our public jQuery plug-in after a new DynTabs object has been created and returned by \"createDynTabs\".\n<br />Automatically inits the Dyntabs plug-in on the passed element, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "DynTabs.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 190,
            "description": "Adds the IDs of the tabs in the set to an array. Used for showAll and ID checking.",
            "itemtype": "method",
            "name": "initData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 204,
            "description": "Adds a11y tagging to tabs. \n<br />Need to verify this with Matt King that it's correct.",
            "itemtype": "method",
            "name": "initHtml",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 236,
            "description": "Binds the tabs to fire an event onclick.",
            "itemtype": "method",
            "name": "initEvents",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 270,
            "description": "Makes sure the DOM element has an ID. Creates a dynamic one if it doesn't.",
            "itemtype": "method",
            "name": "ensureIdExists",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 282,
            "description": "Strips the pound sign (#) from a content item's id if there is one.",
            "itemtype": "method",
            "name": "normalizeId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The ID, with or without the preceding pound sign.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The bare ID.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 294,
            "description": "Highlight the specified tab.",
            "itemtype": "method",
            "name": "setActiveTabItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the content item whose tab to make active, or \"__show_all_tabs__\".",
                    "type": "String"
                },
                {
                    "name": "hideOthers",
                    "description": "If you want to hide all other tab contents or not. Typically true.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 313,
            "description": "Show the selected content item.",
            "itemtype": "method",
            "name": "setActiveContentItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the content item to make active, or \"__show_all_tabs__\".",
                    "type": "String"
                },
                {
                    "name": "hideOthers",
                    "description": "If you want to hide all other tab contents or not. Typically true.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 339,
            "description": "Save selected item to local storage.",
            "itemtype": "method",
            "name": "saveActiveItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "Id of the tab to save.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 356,
            "description": "Get the id of the active tab from local storage, if it exists.",
            "itemtype": "method",
            "name": "retrieveActiveItem",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The ID of the tab to activate from storage, or undefined if not found.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 371,
            "description": "Fire a stats event for this widget.",
            "itemtype": "method",
            "name": "fireStatsEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventType",
                    "description": "Type of event, either \"load\" or \"click.\"",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The ID of the tab.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 390,
            "description": "Determine which tab to set active initially. Determined in three steps:\n<br />1. If the url has \"#tab_<tabname>\" at the end of it, that is used.\n<br />2. Else if localstorage has a saved entry, use that.\n<br />3. Lastly, default to the first tab in the list.",
            "itemtype": "method",
            "name": "startingTabId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The ID of the content item to make active.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 437,
            "description": "This is a method of the widget constructor.\n<br>Make the indicated tab active.",
            "itemtype": "method",
            "name": "DynTabs.showTab",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the content element to make active, with or without the # sign.",
                    "type": "String"
                }
            ],
            "example": [
                " \n\tjQuery(\"<your_tabwidget_container_selector>\").data(\"widget\").showTab(\"mytabID\");"
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 469,
            "description": "This is a method of the widget constructor.\n<br>Make the content of all tabs visible.",
            "itemtype": "method",
            "name": "DynTabs.showAllTabs",
            "example": [
                " \n\tjQuery(\"<your_tabwidget_container_selector>\").data(\"widget\").showAllTabs();"
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 488,
            "description": "This is a method of the widget constructor.\n<br>Method to retrieve the active tab's ID.",
            "itemtype": "method",
            "name": "DynTabs.activeTabId",
            "return": {
                "description": "The ID of the current active tab.",
                "type": "String"
            },
            "example": [
                " \n\tjQuery(\"<your_tabwidget_container_selector>\").data(\"widget\").activeTabId();"
            ],
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/dyntabs.js",
            "line": 503,
            "description": "Enables primary tabnav as dyntabs in burger menu to change the selected burger menu item and then close the menu.\n<br />Also adds binding to primary tabnav dyntabs to simply change the burger menu selected item (to keep them visually in sync).",
            "itemtype": "method",
            "name": "setupDyntabsInMobilemenu",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.dyntabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/expertise.js",
            "line": 1,
            "description": "Expertise widget.\n\tService has been shut down for various reasons. Service is no longer available.",
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 42,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init file input HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting and initing file inputs post-load, call this plug-in on your injected input.",
            "itemtype": "method",
            "name": "$.fn.fileinput",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 57,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new file input object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createFileinput",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 75,
            "description": "Published on widget's DOM element after the widget has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_file_input_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // fileinput widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 86,
            "description": "File input object/constructor for our public jQuery plugin.\n<br />Called by \"createFileinput\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).fileinput() plug-in method to dynamically \ninit and create a file input widget.",
            "itemtype": "method",
            "name": "Fileinput",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_input_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 114,
            "description": "This is a method of the \"Fileinput\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Fileinput.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 127,
            "description": "This is a method of the \"Fileinput\" constructor.\n<br />Called by our public jQuery plug-in after a new file input object has been created and returned by \"createFileinput\".\n<br />Automatically inits the file input plug-in on the passed element, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Fileinput.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 163,
            "description": "Use the inbound element (input@file) and adjust it's name if needed based on type.",
            "itemtype": "method",
            "name": "Fileinput.adjustInputName",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "The element you want to turn into a file input widget.",
                    "type": "JQuery selector"
                }
            ],
            "return": {
                "description": "Returns the passed jQuery selector/element, but with new @name.",
                "type": "JQuery selector"
            },
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 186,
            "description": "Creates a new file input control clone/template to inject when needed.",
            "itemtype": "method",
            "name": "Fileinput.createNewFileInput",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 196,
            "description": "Takes or creates a file input and wraps it in the ibm-fileinput wrapper with associated add/remove controls.",
            "itemtype": "method",
            "name": "Fileinput.createNewFileInputContainer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$input",
                    "description": "The file input to create a container/widget for.",
                    "type": "JQuery input selector"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 210,
            "description": "Setup the initial set of controls (add/remove and new input) and replace original with this.\n<br />This kills the original $elem. Always use $elem.clone or $widgetContainer for the outer span wrapper.",
            "itemtype": "method",
            "name": "Fileinput.setupInitialControls",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$elem",
                    "description": "The input element to setup file upload controls for, for the widget.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 241,
            "description": "Creates or updates file upload control text/container.",
            "itemtype": "method",
            "name": "Fileinput.adjustFileInputControlLinks",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 259,
            "description": "Callback for clicking on \"Remove\" button.\n<br />case 1: If we click on Browse, a file chooser popup will open and allows us to browse and select the file\n<br />case 2: If we click on Remove, either of the cases will be executes\n<br />case 2.a: For Sigle file browse, the elemnt is replaced with Browse option\n<br />case 2.b: for file multi browser, it replaces the remove with browse button if there exists with only remove option\n\telse, it destroys the remove option.",
            "itemtype": "method",
            "name": "Fileinput.doRemoveClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event.",
                    "type": "Event"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 282,
            "description": "Callback for clicking the \"Browse\" (upload) link/button.",
            "itemtype": "method",
            "name": "Fileinput.doUploadClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The click event.",
                    "type": "Event"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/fileinput.js",
            "line": 294,
            "description": "When we select a file from file chooser, this onchange() function will be invoked:\n<br />Displays selected file name, removed \"browse\" button and adds \"remove\" button.\n<br />If it's a multi-input class: adds \"add another\" link which adds another set of input controls.",
            "itemtype": "method",
            "name": "Fileinput.doFileChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The onclick event.",
                    "type": "Event"
                }
            ],
            "class": "IBMCore.common.widget.fileinput",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/forms-misc.js",
            "line": 18,
            "description": "Published on line form DOM element after line form has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_form_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // line form is setup.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.forms",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/forms-misc.js",
            "line": 29,
            "description": "Line form fields init.\n<br>Sets up line form text fields and binds them to add/remove class to move the label on focus.",
            "itemtype": "method",
            "name": "setupLineFormFields",
            "class": "IBMCore.common.widget.forms",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "line": 37,
            "description": "Published on form DOM element after validator has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_form_selector>\")[0].addEventListener(\"ibm-formvalidator-init\", function (evt) {\n\t\t// form validator widget is setup.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-formvalidator-init",
            "class": "IBMCore.common.widget.formvalidator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "line": 49,
            "description": "Automatically called onload on any &lt;form> that has @data-formvalidator=\"enable\".\n<br />Inits the form validator and binds on form submit click, keydown, paste, change of fields.\n<br />In the case that you need to inject the form dynamically and init the widget, call this function, passing it the\n form element to enable the validator widget on.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "formEl",
                    "description": "The &lt;form> element you want to add the validator to.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.formvalidator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "line": 63,
            "description": "Calls markInput and checks if input is valid and marks parent &lt;p> with 'ibm-error' class in case that input is invalid.",
            "itemtype": "method",
            "name": "checkInputValidity",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$input",
                    "description": "The input to check if valid.",
                    "type": "JQuery selector"
                }
            ],
            "return": {
                "description": "If the input is valid or not.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.widget.formvalidator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/formvalidator.js",
            "line": 96,
            "description": "Method to add or remove the \"ibm-error\" class to the input's parent &lt;p> based on if the field is valid or not.",
            "itemtype": "method",
            "name": "markInput",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$input",
                    "description": "The $input to mark as valid or not.",
                    "type": "JQuery selector"
                },
                {
                    "name": "valid",
                    "description": "True if field is valid, false if not.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the same \"valid param that was passed\".",
                "type": "Boolean"
            },
            "class": "IBMCore.common.widget.formvalidator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/hiresimageswap.js",
            "line": 1,
            "description": "Hi-res image swap widget - SUNSET\n\t<br />SUNSET. Does nothing now.",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/hiresimageswap.js",
            "line": 9,
            "description": "SUNSET. Does nothing.",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 52,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init leaving IBM links that exist on the page on DOM ready.\n<br />If you are dynamically injecting leaving IBM links post-load, call this plug-in on your injected links that require it.",
            "itemtype": "method",
            "name": "$.fn.leavingibm",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 94,
            "description": "Called by our jQuery plug-in.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createLeavingOverlay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 109,
            "description": "Published on link DOM element after leaving IBM widget has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_link_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // leaving IBM overlay widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 120,
            "description": "Leaving IBM overlay object/constructor for our public jQuery plugin.\n<br />Called by \"createLeavingOverlay\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).leavingibm() plug-in method to dynamically turn your link into the widget.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 140,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 154,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Called by our public jQuery plug-in after a new leaving IBM object has been created and returned by \"createLeavingOverlay\".\n<br />Automatically inits the leavigibm plug-in on the passed link(s), \n merging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 203,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Takes the passed settings variables and returns the overlay HTML using them.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.overlayHtml",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "setting",
                    "description": "Object with title, text, cancel and continue values to put into overlay HTML template.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 217,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Parses link URL and sets raw URL variable; the URL to goto on \"continue\".",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.initData",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 232,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Sets up events bindings for overlay and fires metrics.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.initEvents",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/leavingibm.js",
            "line": 294,
            "description": "This is a method of the \"LeavingIBMOverlay\" constructor.\n<br />Parses link URL from @href and returns the decoded URL to goto.",
            "itemtype": "method",
            "name": "LeavingIBMOverlay.extractUrl",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.leavingibm",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/masonry.js",
            "line": 32,
            "description": "Published on widget's DOM element after masonry has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_widget_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // Masonry plug-in is setup.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.masonry",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 48,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init overlay HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting overlay HTML post-load, call this plug-in on your injected overlay container.",
            "itemtype": "method",
            "name": "$.fn.overlay",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 80,
            "description": "Debugging: Loop thru each overlay in the \"registered overlays\" array console out all registered overlays.",
            "itemtype": "method",
            "name": "consoleAll",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 91,
            "description": "Returns the overlay widget that is currently showing, else returns null.\n<br />Use this if you want to know if an overlay is already showing before you show an \"automated\" one.\n<br />If return is __not__ null, you can then hide the showing overlay by calling the \"hide\" method on the returned object.",
            "itemtype": "method",
            "name": "currentShowingOverlay",
            "return": {
                "description": "Returns the currently showing overlay widget instance, so you can close it if you decide to.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 103,
            "description": "Destroys/removes an overlay by name (ID). Gets the widget for the named ID and calls object destroy method on it.\n<br />This will restore the overlay's HTML to it's original coded HTML as it was on plug-in init and \n returns the element with the passed ID (the original coded overlay element).\n<br />If the overlay was dynamically generated via contentHtml and no HTML DOM element was injected, it simply removes the dynamic overlay element from the DOM.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "id",
                    "description": "The @id of the overlay that you want to remove/destroy.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The original coded HTML overlay DOM element (via the ID you called destroy with) if exists.",
                "type": "JQuery Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 119,
            "description": "Gets a particular overlay widget instance via original DOM element ID.\nAllows you to get the overlay widget object instance using your original @id since it gets wrapped and attached to\n a special div@id. Prevents needing to know what that dynamic/auto gen'd ID is and removes dependency on it\n  in the case that we change it. Thanks to John Zimmermann for this idea.",
            "itemtype": "method",
            "name": "getWidget",
            "params": [
                {
                    "name": "id",
                    "description": "The @id of the overlay that you want to get the widget instance for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The widget instance for the overlay, so you can run the methods on it.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 133,
            "description": "Hides an overlay (via @id value).",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "id",
                    "description": "The @id of the overlay to hide.",
                    "type": "String"
                },
                {
                    "name": "closeAlert",
                    "description": "Pass this as true to force hiding of an alert type overlay.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 144,
            "description": "Loops thru each overlay in the \"registered overlays\" array and hide it.",
            "itemtype": "method",
            "name": "hideAllOverlays",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 155,
            "description": "Shows an overlay (via @id value).",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "id",
                    "description": "The @id of the overlay to show.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 165,
            "description": "Called by our jQuery plug-in.\n<br />Alternate way to create an overlay - Dynamically create one\".\n<br />This creates a new overlay widget and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createOverlay",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "example": [
                "\n\tmyOverlay = IBMCore.common.widget.overlay.createOverlay({settings here});"
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 184,
            "description": "Fires a stats event for this widget.",
            "itemtype": "method",
            "name": "fireStatsEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventType",
                    "description": "Type of event that happened.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The @id of the widget it happened on.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 201,
            "description": "Shows/hides the \"screen\" and sets it's opacity.",
            "itemtype": "method",
            "name": "updateBackdrop",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 230,
            "description": "Published on widget's DOM element (overlay) after overlay has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_overlay_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // overlay widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 241,
            "description": "Publishes this event after the overlay is hidden.",
            "itemtype": "event",
            "name": "hide",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 245,
            "description": "Publishes this event after the trigger is clicked, but before the actual \"showing\" of the overlay.",
            "itemtype": "event",
            "name": "pre-show",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 249,
            "description": "Publishes this event after the overlay is shown.",
            "itemtype": "event",
            "name": "show",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 253,
            "description": "Overlay object/constructor for our public jQuery plugin.\n<br />Called by \"createOverlay\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).overlay() plug-in method to turn your overlay HTML into an overlay widget.",
            "itemtype": "method",
            "name": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tIBMCore.common.widget.overlay.getWidget(\"<your_overlay_id>\")"
            ],
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 334,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Destroys the overlay and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Overlay.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 357,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Called by our public jQuery plug-in after a new overlay object has been created and returned by \"createOverlay\".\n<br />Automatically inits the overlay plug-in merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Overlay.init",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 491,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Returns the @id of this overlay widget instance.",
            "itemtype": "method",
            "name": "Overlay.getId",
            "return": {
                "description": "The @id of the overlay widget.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 502,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Inserts the provided content HTML into the overlay in the proper place.\n<br />If passed an empty string (literally), it will hide the overlay.",
            "itemtype": "method",
            "name": "Overlay.setHtml",
            "params": [
                {
                    "name": "html",
                    "description": "HTML (content) to put in the overlay.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 521,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Manually sets the width of the overlay using the given # (in px).\n<br />You probably never want to use this. This was legacy support for IE8/9.",
            "itemtype": "method",
            "name": "Overlay.setWidth",
            "deprecated": true,
            "params": [
                {
                    "name": "px",
                    "description": "The width in px to set overlay to. If none given (null), it sets it to \"auto\".",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 540,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Manually sets the height of the overlay using the given # (in px).\n<br />You probably never want to use this. This was legacy support for IE8/9.",
            "itemtype": "method",
            "name": "Overlay.setHeight",
            "deprecated": true,
            "params": [
                {
                    "name": "px",
                    "description": "The height in px to set overlay to. If none given (null), it sets it to \"auto\".",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 559,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Sets the background color of the overlay using the given RGB string.",
            "itemtype": "method",
            "name": "Overlay.setBackground",
            "params": [
                {
                    "name": "rgb",
                    "description": "The RGB string for the color to set the background to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 586,
            "description": "DOES NOTHING. Will be removed soon.",
            "itemtype": "method",
            "name": "Ovelay.setPosition",
            "deprecated": true,
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 598,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Gets and returns the index of the overlay in the stack of overlays that are showing.",
            "itemtype": "method",
            "name": "Ovelay.getStackIndex",
            "deprecated": true,
            "return": {
                "description": "The index # of the overlay in the stack that's showing.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 620,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Actually shows the overlay.",
            "itemtype": "method",
            "name": "Ovelay.show",
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 663,
            "description": "__Deprecated__. Don't use.",
            "itemtype": "method",
            "name": "setStackZIndex",
            "deprecated": true,
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 675,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Gets and returns the z-index property of this overlay instance.",
            "itemtype": "method",
            "name": "Ovelay.getZindex",
            "deprecated": true,
            "return": {
                "description": "The z-index of this overlay instance.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 687,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Hides the overlay.",
            "itemtype": "method",
            "name": "Ovelay.hide",
            "params": [
                {
                    "name": "closeAlert",
                    "description": "Must pass this as true to hide an 'alert' type overlay.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 736,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Toggles the overlay: Shows if currently hidden, hides if currently showing (DUH).",
            "itemtype": "method",
            "name": "Ovelay.toggle",
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 755,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Tells you if the overlay is currently showing or not.",
            "itemtype": "method",
            "name": "Ovelay.isShowing",
            "return": {
                "description": "True or False.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/overlay.js",
            "line": 768,
            "description": "This is a method of the \"Overlay\" constructor.\n<br />Getter or setter; based on if you pass a param or not:\n<br />If no param passed, it will tell you if the overlay is seamless or not.\n<br />If you pass a boolean (true | false), it will set the overlay to be seamless or not (add/remove class).",
            "itemtype": "method",
            "name": "Ovelay.seamless",
            "params": [
                {
                    "name": "bool",
                    "description": "Set or remove the seamless style on the overlay object.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The overlay widget object you called it on.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.overlay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/parallaxscroll.js",
            "line": 38,
            "description": "Published on widget's DOM element after parallax scroll has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_div_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t\t// parallax scroll widget is enabled.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.parallaxscroll",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/parallaxscroll.js",
            "line": 49,
            "description": "Inits the parallax scroll widget on the passed element.\n<br />This is automatically called onload by the v18 JS for each element that has the data-widget attribute and is not disabled.\n<br />If you are dynamically injecting a div.ibm-band HTML, call this function after DOM injection, passing your .ibm-band element to it.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to enable parallax scrolling on.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.parallaxscroll",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 41,
            "description": "Published on widget's DOM element after RSS display widget has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_rss_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // RSS widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 52,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting and initing the widget HTML post-load, call this plug-in on your injected container.",
            "itemtype": "method",
            "name": "$.fn.rssdisplay",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 67,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new rssdisplay object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createRssdisplayWidget",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The rssdisplayWidget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 85,
            "description": "rssdisplayWidget object/constructor for our public jQuery plugin.\n<br />Called by \"createRssdisplayWidget\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).rssdisplay() plug-in method to initialize the widget.",
            "itemtype": "method",
            "name": "rssdisplayWidget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 106,
            "description": "This is a method of the \"rssdisplayWidget\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "rssdisplayWidget.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 119,
            "description": "This is a method of the \"rssdisplayWidget\" constructor.\n<br />Called by our public jQuery plug-in after a new rssdisplayWidget object has been created and returned by \"createRssdisplayWidget\".\n<br />Automatically inits the rssdisplayWidget plug-in on the passed element, merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "rssdisplayWidget.init",
            "params": [
                {
                    "name": "$elem",
                    "description": "The element you want to turn into a widget.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/rssdisplay.js",
            "line": 154,
            "description": "This is a method of the \"rssdisplayWidget\" constructor.\n<br />This is the callback for the service request to get the feed data.\n<br />This loops thru the WSR data, creates the actual widget HTML, and echoes it on the glass into the container.",
            "itemtype": "method",
            "name": "serviceCallback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data JSON object returned from the SWWIF service call.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.widget.rssdisplay",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 39,
            "description": "Published on widget's DOM element after setSameHeight widget has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_widget_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // setSameHeight widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 50,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting and initing the widget HTML post-load, call this plug-in on your injected container.",
            "itemtype": "method",
            "name": "$.fn.setsameheight",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 65,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new SameHeight object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createSameHeightWidget",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The SameHeight object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 83,
            "description": "SameHeight object/constructor for our public jQuery plugin.\n<br />Called by \"createSameHeightWidget\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).setsameheight() plug-in method to initialize the widget.",
            "itemtype": "method",
            "name": "SameHeight",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_sameHeightWidget_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 109,
            "description": "This is a method of the \"SameHeight\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "SameHeight.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 124,
            "description": "This is a method of the \"SameHeight\" constructor.\n<br />Called by our public jQuery plug-in after a new SameHeight object has been created and returned by \"createSameHeightWidget\".\n<br />Automatically inits the setsameheight plug-in on the passed element, merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings. \n<br />This binds the widget to re-eval heights on window resize. Calls 'adjustheights'.",
            "itemtype": "method",
            "name": "SameHeight.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to turn into a widget.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/sameheight.js",
            "line": 199,
            "description": "This is a method of the \"SameHeight\" constructor.\n<br />This does the actual height adjustments on resize. BUT it will only resize the heights if \nthe grid has changed since last time it set the height.\n<br />If you use data-always=\"true\" attribute, it will void the above and always \n(re)set the heights (needed for fluid grid).\n<br />If you dynamically add/remove/update an item that's part of the item set, you should call \nthis passing it a boolean \"true\" to force it to recalculate the heights of the elements.",
            "itemtype": "method",
            "name": "SameHeight.adjustHeights",
            "params": [
                {
                    "name": "force",
                    "description": "Set this to true to force a height recalculation and adjustment.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.widget.setsameheight",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 35,
            "description": "Published on widget's DOM element after scrollable has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_scrollable_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // scrollable widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 46,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init scrollable sections that exist on the page on DOM ready.\n<br />If you are dynamically injecting and initing a scrollable section post-load, call this plug-in on your injected scrollable container.",
            "itemtype": "method",
            "name": "$.fn.scrollable",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 62,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new scrollable object and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createScrollable",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The scrollable object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 80,
            "description": "Scrollable object/constructor for our public jQuery plugin.\n<br />Called by \"createScrollable\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).scrollable() plug-in method to dynamically init and create a scrollable container.",
            "itemtype": "method",
            "name": "Scrollable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_scrollable_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 101,
            "description": "This is a method of the \"Scrollable\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Scrollable.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/scrollable.js",
            "line": 117,
            "description": "This is a method of the \"Scrollable\" constructor.\n<br />Called by our public jQuery plug-in after a new Scrollable object has been created and returned by \"createScrollable\".\n<br />Automatically inits the Scrollable plug-in on the passed element, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Scrollable.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.scrollable",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlist.js",
            "line": 40,
            "description": "Published on widget's DOM element after select2 has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_select_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // select2 widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.selectlist",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlist.js",
            "line": 51,
            "description": "Inits the select2 widget on the passed element.\n<br />This is automatically called onload by the v18 JS for each select element that is not disabled with data-init=\"false\".",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The select element to convert to the select2 widget.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.selectlist",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 39,
            "description": "Published on widget's DOM element (form) after selectlistnav has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_form_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // selectlistnav widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 50,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init selectlistnav forms HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting and initing HTML post-load, call this plug-in on your injected selectlistnav __form__.",
            "itemtype": "method",
            "name": "$.fn.selectlistnav",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 65,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new selectlistnav form widget.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createSelectlistNav",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 81,
            "description": "SelectlistNav object/constructor for our public jQuery plugin.\n<br />Called by \"createSelectlistNav\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).selectlistnav() plug-in method.",
            "itemtype": "method",
            "name": "SelectlistNav",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_form_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 100,
            "description": "This is a method of the \"SelectlistNav\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "SelectlistNav.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 116,
            "description": "This is a method of the \"SelectlistNav\" constructor.\n<br />Called by our public jQuery plug-in after a new SelectlistNav form object has been created and returned by \"createSelectlistNav\".\n<br />Automatically inits the plug-in on the passed form, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 150,
            "description": "Alters HTML for widget (removes submit button).",
            "itemtype": "method",
            "name": "initHtml",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/selectlistnav.js",
            "line": 160,
            "description": "Sets up and binds select list to goto selected opion's URL (option value) if not blank.",
            "itemtype": "method",
            "name": "initEvents",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.selectlistnav",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 35,
            "description": "TODO: Santelia: This is a hack Mike C did using indexes. Change to use stored/cached pointers instead for more effecient processing and just maintenance sanity.",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 45,
            "description": "Published on widget's DOM element after show/hide has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_showhide_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // show/hide widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 57,
            "description": "Public jQuery plug-in definition. Initializes the widget on the set of DOM nodes the plug-in was called on.",
            "itemtype": "method",
            "name": "$.fn.showhide",
            "example": [
                " jQuery(\"#myWidgetDivID\").showhide();"
            ],
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 71,
            "description": "Called by our jQuery plug-in.\n<br />Creates a new widget instance and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createShowHide",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 87,
            "description": "Fires a stats event for this widget when show/hide is clicked, tags event as \"show\" or \"hide\".",
            "itemtype": "method",
            "name": "fireStatsEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventType",
                    "description": "Type of event that happened.",
                    "type": "String"
                },
                {
                    "name": "clickedText",
                    "description": "The text of the show/hide that was clicked.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 104,
            "description": "ShowHide object/constructor for our public jQuery plugin.\n<br />Called by \"createShowHide\".",
            "itemtype": "method",
            "name": "ShowHide",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_showhide_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 127,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br />Destroys the widget and restores original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "ShowHide.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 148,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br />Called by our public jQuery plug-in after a new widget object has been created and returned.\n<br />Automatically inits the plug-in, merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "ShowHide.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 179,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br />Sets the clicked heading to display as \"collapsed\" and then animates the collapse of the section.",
            "itemtype": "method",
            "name": "ShowHide.closePanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$headingLink",
                    "description": "The heading link (<a>) that was clicked.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 200,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Main init for the standard +/- show hide panel: Adjusts HTML, closes any not tagged to be open by default, \n sets up click bindings for show/hide.",
            "itemtype": "method",
            "name": "ShowHide.initPanelShowhide",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 227,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Sets ALL headings to display as \"collapsed\" and animates the collapse of ALL open sections (covers accordion).\n<br />Then sets clicked heading and contents to show.",
            "itemtype": "method",
            "name": "ShowHide.openPanel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$headingLink",
                    "description": "The heading link (<a>) that was clicked.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 255,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Sets up bindings and actions for the single and multi-panel (accordion) show/hiding.",
            "itemtype": "method",
            "name": "ShowHide.setupPanelBindings",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 285,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Runs any descendent sameheight widgets AFTER the show/hide is shown, so the heights are \n adjusted and (re)calculated automatically.",
            "itemtype": "method",
            "name": "ShowHide.adjustSameHeightWidgets",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 306,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Sets up bindings for the basic \"description toggle\" type show/hide.",
            "itemtype": "method",
            "name": "ShowHide.setupSimpleBindings",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/show-hide.js",
            "line": 339,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br>Sets the display (only) of the heading link as open or closed +/-",
            "itemtype": "method",
            "name": "ShowHide.showHeadingAsOpened",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$headingLink",
                    "description": "The show/hide trigger link <a> that you want display as open or closed.",
                    "type": "JQuery selector"
                },
                {
                    "name": "showit",
                    "description": "True/false; to display it as open or not.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.widget.showhide",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 33,
            "description": "Published on widget's DOM element after stepindicator has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_stepindicator_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // stepindicator widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 44,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init step indicator HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting step indicator HTML post-load, call this plug-in on your injected step indicator container.",
            "itemtype": "method",
            "name": "$.fn.stepindicator",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 59,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new step indicator widget and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createStepIndicator",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 75,
            "description": "StepIndicator object/constructor for our public jQuery plugin.\n<br />Called by \"createStepIndicator\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).stepindicator() plug-in method to turn your step indicator HTML into a widget.",
            "itemtype": "method",
            "name": "StepIndicator",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_stepindicator_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 105,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "StepIndicator.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 120,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Called by our public jQuery plug-in after a new step indicator object has been created and returned by \"createStepIndicator\".\n<br />Automatically inits the step indicator plug-in merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "StepIndicator.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The jQuery selector element to init the plug-in on.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 200,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Returns the current step #.",
            "itemtype": "method",
            "name": "StepIndicator.getCurrentStep",
            "return": {
                "description": "The current step #.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 219,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Returns the total # of steps.",
            "itemtype": "method",
            "name": "StepIndicator.totalSteps",
            "return": {
                "description": "The total # of steps.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 230,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Tells you if the user is on the first step.",
            "itemtype": "method",
            "name": "StepIndicator.isOnFirst",
            "return": {
                "description": "True | False if the user is on the first step.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 241,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Tells you if the user is on the last step.",
            "itemtype": "method",
            "name": "StepIndicator.isOnLast",
            "return": {
                "description": "True | False if the user is on the last step.",
                "type": "Boolean"
            },
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 252,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Advances to the named step #.",
            "itemtype": "method",
            "name": "StepIndicator.goToStep",
            "params": [
                {
                    "name": "index",
                    "description": "The step # to go to.",
                    "type": "Integer"
                }
            ],
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 293,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Advances to the next step #.",
            "itemtype": "method",
            "name": "StepIndicator.next",
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stepindicator.js",
            "line": 305,
            "description": "This is a method of the \"StepIndicator\" constructor.\n<br />Advances to the previous step #.",
            "itemtype": "method",
            "name": "StepIndicator.prev",
            "class": "IBMCore.common.widget.stepindicator",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 31,
            "description": "Published on widget's DOM element after stickytabs has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tdocument.getElementById(\"ibm-primary-tabs\").addEventListener(\"ibm-init\", function (evt) {\n\t    // stickytabs widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 42,
            "description": "jQuery plug-in definition.\n<br />Used onload to auto-init this widget on elements that have the data-widget attribute on page load.",
            "itemtype": "method",
            "name": "$.fn.stickytabs",
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 55,
            "description": "Called by our jQuery plug-in.\n<br />Creates a new widget instance and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createStickytabs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 73,
            "description": "Stickytabs object/constructor for our public jQuery plugin.\n<br />Called by \"createStickytabs\".",
            "itemtype": "method",
            "name": "Stickytabs",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(document.getElementById(\"ibm-primary-tabs\")).data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 94,
            "description": "This is a method of the \"Stickytabs\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Stickytabs.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 109,
            "description": "This is a method of the \"ShowHide\" constructor.\n<br />Toggles the tabs between sticky and not. Does minor pos. calc, and just adds/removes a class.\n<br />CSS does the rest.",
            "itemtype": "method",
            "name": "Stickytabs.toggleStickyTabs",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/stickytabs.js",
            "line": 145,
            "description": "This is a method of the \"Stickytabs\" constructor.\n<br />Called by our public jQuery plug-in after a new object has been created and returned by \"create\" function.\n<br />Automatically inits the plug-in on the passed element, merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Stickytabs.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.stickytabs",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/syntaxhighlighter.js",
            "line": 41,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init syntaxhighlighter HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting code HTML post-load, call this plug-in on your injected &lt;pre> container.",
            "itemtype": "method",
            "name": "$.fn.syntaxhighlighter",
            "class": "IBMCore.common.widget.syntaxhighlighter",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/syntaxhighlighter.js",
            "line": 54,
            "description": "Called by our jQuery plug-in.\n<br />This initializes a new syntaxhighlighter widget on the passed DOM element.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createSyntaxHighlighter",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element to turn into a syntaxHighlighter widget.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.syntaxhighlighter",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tablerowselector.js",
            "line": 31,
            "description": "Published on widget's DOM element after table row selector has been initialized.\n<br>Note: This is slightly different and namespaced with \"tablesrowselector\" because it can be used in conjunction\n with data table widget and will prevent collision with init events between the two.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_table_selector>\")[0].addEventListener(\"ibm-tablesrowselector-init\", function (evt) {\n\t    // table row selector widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-tablesrowselector-init",
            "class": "IBMCore.common.widget.tablerowselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tablerowselector.js",
            "line": 44,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init tables HTML that have the data-widget attribute that exist on the page on DOM ready.\n<br />If you are dynamically injecting table/row HTML post-load, call this plug-in on your injected &lt;table>.",
            "itemtype": "method",
            "name": "$.fn.tablesrowselector",
            "class": "IBMCore.common.widget.tablerowselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tablerowselector.js",
            "line": 57,
            "description": "Called by our jQuery plug-in.\n<br />This initializes a new table row selector widget on the passed table DOM element.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createTableRowSelector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "The table element to add the table row selector widget to.",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.tablerowselector",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 37,
            "description": "Published on widget's DOM element after tooltip has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_tooltip_trigger_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // tooltip widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 48,
            "description": "Public jQuery plug-in definition.\n<br />Used by core v18 JS file to auto-init tooltip HTML that exist on the page on DOM ready.\n<br />If you are dynamically injecting tooltip HTML post-load, call this plug-in on your injected tooltip element.",
            "itemtype": "method",
            "name": "$.fn.tooltip",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 64,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new tooltip widget and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createTooltip",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 83,
            "description": "Tooltip object/constructor for our public jQuery plugin.\n<br />Called by \"createTooltip\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).tooltip() plug-in method to turn your tooltip element HTML into a tooltip widget.",
            "itemtype": "method",
            "name": "Tooltip",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_tooltip_trigger_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 112,
            "description": "This is a method of the \"Tooltip\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Tooltip.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/tooltip.js",
            "line": 125,
            "description": "This is a method of the \"Tooltip\" constructor.\n<br />Called by our public jQuery plug-in after a new tooltip object has been created and returned by \"createTooltip\".\n<br />Automatically inits the tooltip plug-in.",
            "itemtype": "method",
            "name": "Tooltip.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.tooltip",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 33,
            "description": "Published on widget's DOM element after twisty has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_twisty_container_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // twisty widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 44,
            "description": "Public jQuery plug-in definition. Initializes the widget on the set of DOM nodes the plug-in was called on.",
            "itemtype": "method",
            "name": "$.fn.twisty",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 57,
            "description": "Called by our jQuery plug-in.\n<br />Creates a new widget instance and registers the instance into array of all this widget instances.\n<br />The jQuery plug-in abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createTwisty",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 73,
            "description": "Fires a stats event for this widget when the twisty is clicked.",
            "itemtype": "method",
            "name": "fireStatsEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventType",
                    "description": "Type of event that happened.",
                    "type": "String"
                },
                {
                    "name": "clickedText",
                    "description": "The text of the show/hide that was clicked.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 90,
            "description": "Twisty object/constructor for our public jQuery plugin.\n<br />Called by \"createTwisty\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).twisty() plug-in method to turn your element HTML into a widget.",
            "itemtype": "method",
            "name": "Twisty",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_twisty_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 110,
            "description": "This is a method of the \"Twisty\" constructor.\n<br />Destroys the widget and restores original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Twisty.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 123,
            "description": "This is a method of the \"Twisty\" constructor.\n<br />Called by our public jQuery plug-in after a new widget object has been created and returned.\n<br />Automatically inits the plug-in, merging in any manually passed settings,",
            "data": "-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "Twisty.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 151,
            "description": "This is a method of the \"Twisty\" constructor.\n<br>Alters HTML for widget initialization.",
            "itemtype": "method",
            "name": "Twisty.initHtml",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 182,
            "description": "This is a method of the \"Twisty\" constructor.\n<br>Opens or closes the twisty based on boolean passed.",
            "itemtype": "method",
            "name": "Twisty.openTwisty",
            "params": [
                {
                    "name": "$li",
                    "description": "The LI that was clicked to open/close.",
                    "type": "JQuery selector"
                },
                {
                    "name": "openit",
                    "description": "True to open it, false to close it.",
                    "type": "Boolean"
                }
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 202,
            "description": "This is a method of the \"Twisty\" constructor.\n<br>Sets up and binds HTML to do show/hide actions.",
            "itemtype": "method",
            "name": "Twisty.initEvents",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/twisty.js",
            "line": 216,
            "description": "This is a method of the \"Twisty\" constructor.\n<br>Toggles the twisty open or closed... whatever is the opposite of it's current state.",
            "itemtype": "method",
            "name": "Twisty.toggleTwisty",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$li",
                    "description": "The LI that was clicked to expand/collapse.",
                    "type": "JQuery selector"
                }
            ],
            "class": "IBMCore.common.widget.twisty",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 32,
            "description": "Published on widget's DOM element after videolooper has been initialized.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_video_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // videolooper widget is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 43,
            "description": "Public jQuery plug-in definition. Initializes the widget on the set of DOM nodes the plug-in was called on.",
            "itemtype": "method",
            "name": "$.fn.videolooper",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 56,
            "description": "Called by our jQuery plug-in.\n<br />This creates a new widget and registers the instance into array of all this widget instances.\n<br />The jQuery plugin abstracts this and makes behind-the-scenes changes easy.",
            "itemtype": "method",
            "name": "createVideoLooper",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The widget object instance created.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 74,
            "description": "VideoLooper object/constructor for our public jQuery plugin.\n<br />Called by \"createVideoLooper\".\n<br />You can't use this directly. Use the standard jQuery(xxxx).videolooper() plug-in method to init the widget.",
            "itemtype": "method",
            "name": "VideoLooper",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 92,
            "description": "This is a method of the \"Videolooper\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Videolooper.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videolooper.js",
            "line": 106,
            "description": "This is a method of the \"Videolooper\" constructor.\n<br />Called by our public jQuery plug-in after a new object has been created and returned by \"create\" function.\n<br />Automatically inits the plug-in on the passed element, \nmerging in any manually passed settings, @data-xxxxx settings, and our default settings.",
            "itemtype": "method",
            "name": "VideoLooper.init",
            "params": [
                {
                    "name": "elem",
                    "description": "The element you want to init the widget on.",
                    "type": "JQuery/DOM element"
                }
            ],
            "class": "IBMCore.common.widget.videolooper",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 14,
            "description": "Notes:\n\nKaltura API/events:  http://www.kaltura.org/demos/kdp3/docs.html\nReusing a player (just change loaded video, for playlist with thumbs):  http://player.kaltura.com/docs/changeMedia",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 50,
            "description": "Published on widget's DOM element after Kaltura placeholder trigger is clicked and video player is injected.\n<br><strong>Example usage</strong>:\n<pre>\n  jQuery(\"&lt;your_widget_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n      // Kaltura player widget is embedded and API is available.\n  });\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 61,
            "description": "Creates the API URL using the object data.",
            "itemtype": "method",
            "name": "createApiUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "Object with data values to populate API template varaibles.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The API URL to call.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 78,
            "description": "Returns the Kaltura player UID to use.\n<br />There are different one for prod vs. dev KT environment. Manually set to dev if you need to test something\nin Kaltura dev environment. Usually you don't need to.",
            "itemtype": "method",
            "name": "getPlayerId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The UID of the Kaltura player to use.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 92,
            "description": "Loads the Kaltura IFRAME API for the player. Only runs once, based on empty api status/flag.",
            "itemtype": "method",
            "name": "loadApi",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 112,
            "description": "Player contructor object for the Kaltura video player.\n<br />Dependency: videoplayer.js\n<br />Used by the video player factory in videoplayer.js file, which is used by the jQuery plug-in.\n<br />You can't use this directly. Use the standard jQuery(xxxx).videoplayer() plug-in method to create a video player.",
            "itemtype": "method",
            "name": "Player",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n  // You can access your widget object that was created (this) using the standard convention:\n  jQuery(\"<your_player_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 198,
            "description": "This is a method of the \"Player\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Player.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 226,
            "description": "This is a method of the \"Player\" constructor.\n<br />Called by videoplayer.js jQuery plugin after the factory returns a player object (an instance of this \"Player\" object).\n<br />Creates a player and injects it on the page.",
            "itemtype": "method",
            "name": "Player.init",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 252,
            "description": "EVENTS functions (for metrics).",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 256,
            "description": "This is a method of the \"Player\" constructor.\n<br>Fires a metrics event when the video was played. Pass events to common metrics event.\n<br />Uses Youtube player states:\n<br />0 = ended, 1 = played, 2 = paused, 3 = error.",
            "itemtype": "method",
            "name": "Player.fireMetricsEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "playerState",
                    "description": "The player state, using the same numbering syste Youtube uses.",
                    "type": "Integer"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 293,
            "description": "This is a method of the \"Player\" constructor.\n<br>Callback fired when the video is played.\n<br />Uses Youtube player states:\n<br />0 = ended, 1 = played, 2 = paused, 3 = error.",
            "itemtype": "method",
            "name": "Player.onPlayerPlayed",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 306,
            "description": "This is a method of the \"Player\" constructor.\n<br>Callback fired when the video is __paused__.\n<br />Uses Youtube player states:\n<br />0 = ended, 1 = played, 2 = paused, 3 = error.",
            "itemtype": "method",
            "name": "Player.onPlayerPause",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 319,
            "description": "This is a method of the \"Player\" constructor.\n<br>Callback fired when the video has __ended__.\n<br />Uses Youtube player states:\n<br />0 = ended, 1 = played, 2 = paused, 3 = error.",
            "itemtype": "method",
            "name": "Player.onPlayerEnd",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 332,
            "description": "WIDGET functions.",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 336,
            "description": "This is a method of the \"Player\" constructor.\n<br>Takes the @data-overlayplayersize and converts that preset to the proper width and classes needed for the\nplayer and the overlay\n<br />Optional based on embed settings.",
            "itemtype": "method",
            "name": "Player.setOverlayPresets",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 361,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the aria-label to the trigger for better a11y so screen reader reads name of hosting service also.",
            "itemtype": "method",
            "name": "PLayer.addAriaLabel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The placeholder trigger element where we're putting the aria-label.",
                    "type": "JQuery DOM selector"
                },
                {
                    "name": "customText",
                    "description": "Custom text (existing) to use, else uses video title.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 381,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the video description, name, and formatted time to the placeholder.\n<br />Optional based on embed settings.",
            "itemtype": "method",
            "name": "Player.addPlaceholderInfo",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 451,
            "description": "This is a method of the \"Player\" constructor.\n<br>Calculates a height for a given number using the default video apect ratio (16/9).",
            "itemtype": "method",
            "name": "Player.calcHeight",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "num",
                    "description": "The number to use as a width to calculate the proper height for.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "The number to use as a height for the given width.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 468,
            "description": "This is a method of the \"Player\" constructor.\n<br>Takes settings from defaults or data-attrs and converts appropriate ones to playerVars for use with KT embed API.",
            "itemtype": "method",
            "name": "Player.convertSettingsToPlayerVars",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 497,
            "description": "This is a method of the \"Player\" constructor.\n<br>Embed the video. Builds and calls KT script which injects player into original element's child playercontainer.",
            "itemtype": "method",
            "name": "Player.createInlinePlayer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elementId",
                    "description": "The ID where we're putting the placeholder.",
                    "type": "String"
                },
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 510,
            "description": "This is a method of the \"Player\" constructor.\n<br>Take the video ID and get the image.\n<br />Create, bind, and replace origEl innerHTML with: a->img.\n<br />Onclick of the <a> we injected, embed the video player (and play it).",
            "itemtype": "method",
            "name": "Player.createPlayerTrigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder/trigger for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 550,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the &lt;span> to the placeholder container right before the image which shows the overlay'd\n play button on top of whatever image is used.",
            "itemtype": "method",
            "name": "Player.addPlaybutton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$triggerLink",
                    "description": "The placeholder element in which to add the overlay'd play button over the image.",
                    "type": "JQuery element"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 566,
            "description": "This is a method of the \"Player\" constructor.\n<br>Does the actual video player embed.",
            "itemtype": "method",
            "name": "Player.embedVideo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elementId",
                    "description": "The ID where we're putting the placeholder.",
                    "type": "String"
                },
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 629,
            "description": "This is a method of the \"Player\" constructor.\n<br>Takes user-defined playerVars from data-xxxxx naming convention and returns them to be merged into applied settings.",
            "itemtype": "method",
            "name": "Player.getUserDefinedPlayerVars",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An object containing the settings to use for the video embed.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 644,
            "description": "This is a method of the \"Player\" constructor.\n<br>Calls API to get video info and passes JSON to callback function.",
            "itemtype": "method",
            "name": "Player.getVideoInfo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "videoId",
                    "description": "The video (ID) we want to get info for",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "The function to call and pass the returned data object to.",
                    "type": "Function"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 676,
            "description": "This is a method of the \"Player\" constructor.\n<br />Called onclick of the user's link, or the auto-generated image that serves as the overlay trigger.\n<br />Public method to use to programatically open and play the associated video. Or you can just do: $(\"myTrigger a\").click();",
            "itemtype": "method",
            "name": "Player.showOverlayAndPlay",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 703,
            "description": "This is a method of the \"Player\" constructor.\n<br>This is our KT player factory.\n<br />Called by init(). This is like our sub-factory.\n<br />Based on the display type, it calls the proper functions to make the proper widget elements for that type.\n<br />This is ONLY called after KT API is loaded, so assume all kWidget APIs are available.",
            "itemtype": "method",
            "name": "Player.setupPlayerWidget",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 931,
            "description": "// Get video info from videoinfo API using CSV of IDs.\n$.getJSON(api.playlistVideos.replace(\"{playlistId}\", appliedSettings.videoplaylistid).replace(\"{maxResults}\", appliedSettings.maxnumvideos)).done(function (jsonObj) {\n  var videoIds = \"\";\n\n  $.each(jsonObj.items, function(){\n    videoIds += \",\" + this.contentDetails.videoId;\n  });\n\n  videoIds = videoIds.substring(1);\n\n  // Take CSV of video IDs and generate placeholder divs in a carousel, then init both.\n  ibmVp.createVideoCarousel(videoIds, appliedSettings);\n});",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 961,
            "description": "Map common player actions to an abstracted API for cross-player ease of use.\nSafety check to make sure the lower level function is there before calling it.\n\"me\" here is == $el.data(\"widget\")\nSo \"me.playVideo\" here is letting the page JS say:  $(\"widgetContainer\").data(\"widget\").playVideo();",
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 968,
            "description": "This is a method of the \"Player\" constructor.\n<br>This plays the video.",
            "itemtype": "method",
            "name": "Player.playVideo",
            "example": [
                "\n  jQuery(\"<your_table_container_selector>\").data(\"widget\").playVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 982,
            "description": "This is a method of the \"Player\" constructor.\n<br>This plays the video starting at a specific point on the timeline (# of seconds).",
            "itemtype": "method",
            "name": "Player.playVideoAt",
            "params": [
                {
                    "name": "timesec",
                    "description": "The time, in seconds, where to seek to and play the video.",
                    "type": "String"
                }
            ],
            "example": [
                "\n  jQuery(\"<your_table_container_selector>\").data(\"widget\").playVideoAt();"
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 997,
            "description": "This is a method of the \"Player\" constructor.\n<br>This pauses the video.",
            "itemtype": "method",
            "name": "Player.pauseVideo",
            "example": [
                "\n  jQuery(\"<your_table_container_selector>\").data(\"widget\").pauseVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-kaltura.js",
            "line": 1011,
            "description": "This is a method of the \"Player\" constructor.\n<br>This stops the video.",
            "itemtype": "method",
            "name": "Player.stopVideo",
            "example": [
                "\n  jQuery(\"<your_table_container_selector>\").data(\"widget\").stopVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.kaltura",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 14,
            "description": "Notes: \n\nUstream video player widget subclass.\n\nDependency: videoplayer.js\n\nDocumentation: \n\thttp://developers.ustream.tv/player-api/player.html\n\nAPI required:\n\thttp://static.ustream.tv/js/libs/ustream-embedapi.min.js\n\nExample iframe:\n\t<iframe id=\"UstreamIframe\" src=\"//www.ustream.tv/embed/1524\" width=\"640\" height=\"480\" allowfullscreen webkitallowfullscreen></iframe>\n\nProcess flow:\n\tFor each DOM element that has data-widget=video and is ustream, one of these object is created \n\t  and attached to it via: $EL.data(\"widget\").player\n\t  \n\tAfter the new object is created, .init() is run. Init loads the YT api if it doesn't exist already (glob var), \n\t   and then creates the video players for inline and overlay players.\n\tEach video player creates a new YT player object, which injects a YT iframe and replaces the $EL that was tagged for a video widget and the rest is history.\n\tIf the player is in an overlay, we do an extra step (before) and create an overlay, inject it, then embed the YT Player in the overlay.",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 45,
            "description": "Published on widget's DOM element after Ustream placeholder trigger is clicked and video player is injected.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_widget_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // Ustream player widget is embedded and API is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 56,
            "description": "Player contructor object for the Ustream video player. \n<br />Dependency: videoplayer.js\n<br />Used by the video player factory in videoplayer.js file, which is used by the jQuery plug-in.\n<br />You can't use this directly. Use the standard jQuery(xxxx).videoplayer() plug-in method to create a video player.",
            "itemtype": "method",
            "name": "Player",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_player_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 106,
            "description": "This is a method of the \"Player\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Player.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 123,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called by videoplayer.js jQuery plugin after the factory returns a player object (an instance of this \"Player\" object).\n<br />If YT API doesn't exist on the page already; include it, wait for it to be available, then create this player widget.\n<br />Else if we've already included the API, create this player widget.",
            "itemtype": "method",
            "name": "Player.init",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 137,
            "description": "EVENTS functions (for metrics).",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 141,
            "description": "This is a method of the \"Player\" constructor.\n<br>Fires a metrics event when this video player state changes (hits play, pause, ended, etc).\n<br />States are only played: true | false.",
            "itemtype": "method",
            "name": "Player.onPlayerStateChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The player state change event object.",
                    "type": "Object"
                },
                {
                    "name": "isPlaying",
                    "description": "A code from the Ustream player passed to us.",
                    "type": "Integer"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 177,
            "description": "WIDGET functions.",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 182,
            "description": "This is a method of the \"Player\" constructor.\n<br>Player and the overlay\n<br>Takes the @data-overlayplayersize and converts that preset to the proper width and classes needed for the \n<br />Optional based on embed settings.",
            "itemtype": "method",
            "name": "Player.setOverlayPresets",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 203,
            "description": "This is a method of the \"Player\" constructor.\n<br>Wrap the original element in a div since we REPLACE it with the youtube player and attach the player widget object to it.\n<br />Then embed the video, replacing the original element (that the plugin was called on).",
            "itemtype": "method",
            "name": "Player.createInlinePlayer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The element where we're putting the placeholder.",
                    "type": "JQuery DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 216,
            "description": "This is a method of the \"Player\" constructor.\n<br>Take the video ID and get the image.\n<br />Create, bind, and replace origEl innerHTML with: a->img.\n<br />Onclick of the <a> we injected, embed the video player (and play it).",
            "itemtype": "method",
            "name": "Player.createPlayerTrigger",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 242,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the &lt;span> to the placeholder container right before the image which shows the overlay'd \n play button on top of whatever image is used.",
            "itemtype": "method",
            "name": "Player.addPlaybutton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$triggerLink",
                    "description": "The placeholder element in which to add the overlay'd play button over the image.",
                    "type": "JQuery element"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 255,
            "description": "This is a method of the \"Player\" constructor.\n<br>Does the actual video player embed.",
            "itemtype": "method",
            "name": "Player.embedVideo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The element where we're embedding the video.",
                    "type": "JQuery DOM selector"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 285,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called onclick of the user's link, or the auto-generated image that serves as the overlay trigger. \n<br />Public method to use to programatically open and play the associated video.",
            "itemtype": "method",
            "name": "Player.showOverlayAndPlay",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 311,
            "description": "This is a method of the \"Player\" constructor.\n<br>This is our Ustream player factory.\n<br />Called by init(). This is like our sub-factory. \n<br />Based on the display type, it calls the proper functions to make the proper widget elements for that type.\n<br />This is ONLY called after Ustream API is loaded, so assume all APIs are available.",
            "itemtype": "method",
            "name": "Player.setupPlayerWidget",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 405,
            "description": "Map common player actions to an abstracted API for cross-player ease of use.\nSafety check to make sure the lower level function is there before calling it.\n\"me\" here is == $el.data(\"widget\")\nSo \"me.playVideo\" here is letting the page JS say:  $(\"widgetContainer\").data(\"widget\").playVideo();",
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 412,
            "description": "This is a method of the \"Player\" constructor.\n<br>This plays the video.",
            "itemtype": "method",
            "name": "Player.playVideo",
            "example": [
                "\n\tjQuery(\"<your_video_container_selector>\").data(\"widget\").playVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 426,
            "description": "This is a method of the \"Player\" constructor.\n<br>This plays the video starting at a specific point on the timeline (# of seconds).",
            "itemtype": "method",
            "name": "Player.playVideoAt",
            "params": [
                {
                    "name": "timesec",
                    "description": "The time, in seconds, where to seek to and play the video.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tjQuery(\"<your_video_container_selector>\").data(\"widget\").playVideoAt();"
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 441,
            "description": "This is a method of the \"Player\" constructor.\n<br>This pauses the video.",
            "itemtype": "method",
            "name": "Player.pauseVideo",
            "example": [
                "\n\tjQuery(\"<your_video_container_selector>\").data(\"widget\").pauseVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-ustream.js",
            "line": 455,
            "description": "This is a method of the \"Player\" constructor.\n<br>This stops the video.",
            "itemtype": "method",
            "name": "Player.stopVideo",
            "example": [
                "\n\tjQuery(\"<your_video_container_selector>\").data(\"widget\").stopVideo();"
            ],
            "class": "IBMCore.common.widget.videoplayer.ustream",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 14,
            "description": "Youtube video player widget subclass.\nDependency: videoplayer.js\nYoutube API documentation URLs:\n\t\tIFRAME api reference:\n\t\t\thttps://developers.google.com/youtube/iframe_api_reference\n\tPlayerVars parameters:\n\t\t\thttps://developers.google.com/youtube/player_parameters#Parameters\n\tJS API (used to \"externally\" control a video player):\n\t\t\thttps://developers.google.com/youtube/js_api_reference\n\tData API v2 (DEPRECATED, what v17 used):\n\t\t\thttps://gdata.youtube.com/feeds/api/videos/<videoID>?v=2&alt=json&callback=someCallbackName\n\tData API v3 (need to use key):\n\t\t\thttps://developers.google.com/youtube/v3/\n\tGet a video's image/thumb:\n\t\t\thttps://i.ytimg.com/vi/<videoID>/hqdefault.jpg  or \"maxresdefault.jpg\"\n\tGet info (title, descr, duration) about a video (accepts CSV list of videoIDs):\n\t\t\thttps://www.googleapis.com/youtube/v3/videos?part=contentDetails%2C+snippet&id=<videoid>&key=<apikey>\n\tGet list of videos from a playlist ID:\n\t\t\thttps://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=<maxNum>&playlistId=<playlistid>&key=<apikey>\nAPI NOTE:\n\t\tThe API key is owned by Michael Santelia. Keys to use can be generated and daily usage limits can be checked from\n\t\t the Google developer console:\n\thttps://console.developers.google.com/project\n\tThe API limit is 50 MILLION units per 24 hours. Each video request, depending on data requested is ~30 units worth.\n\t\tIf there are issues or we hit the limit, contact Michael Santelia to check the quota.\n\t\tWe can always create multiple keys and randomize which one is used to spread out the usage.",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 57,
            "description": "Process flow:\n\t\tFor each DOM element that has data-widget=video and is youtube, one of these object is created\n\t\t  and attached to it via: $EL.data(\"widget\").player\n\t\t  If there is an overlay object it's at: $EL.data().widget.overlay and the trigger is at: $EL.data.widget.trigger\n\tAfter the new object is created, .init() is run. Init loads the YT api if it doesn't exist already (glob var),\n\t\t   and then creates the video players for inline and overlay players.\n\t\tEach video player creates a new YT player object, which injects a YT iframe and replaces the $EL that was tagged for a video widget and the rest is history.\n\t\tIf the player is in an overlay, we do an extra step (before) and create an overlay, inject it, then embed the YT Player in the overlay.",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 76,
            "description": "Published on widget's DOM element AFTER YOUTUBE PLACEHOLDER TRIGGER IS CLICKED and actual video player is injected.\n<br><strong>Example usage</strong>:\n<pre>\n\tjQuery(\"&lt;your_widget_selector>\")[0].addEventListener(\"ibm-init\", function (evt) {\n\t    // Youtube player widget is embedded and API is available.\n\t});\n</pre>",
            "itemtype": "event",
            "name": "ibm-init",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 87,
            "description": "Take Youtube video duration string and format it to standard HH:MM:SS time stamp.",
            "itemtype": "method",
            "name": "formatVideoDuration",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "isoFormatedDuration",
                    "description": "The video duration value from the Kaltura API.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The formatted duration in standard formatting: HH:MM:SS.",
                "type": "String"
            },
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 120,
            "description": "Loads the Youtube IFRAME API. Only runs once, based on empty api status/flag.",
            "itemtype": "method",
            "name": "loadApi",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 140,
            "description": "Player contructor object for the Youtube video player.\n<br />Dependency: videoplayer.js\n<br />Used by the video player factory in videoplayer.js file, which is used by the jQuery plug-in.\n<br />You can't use this directly. Use the standard jQuery(xxxx).videoplayer() plug-in method to create a video player.",
            "itemtype": "method",
            "name": "Player",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "Settings to override defaults and element's @data-xxxx attributes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// You can access your widget object that was created (this) using the standard convention:\n\tjQuery(\"<your_player_container_selector>\").data(\"widget\");"
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 265,
            "description": "This is a method of the \"Player\" constructor.\n<br />Destroys the widget and puts back the original HTML element that existed before the widget initialized.",
            "itemtype": "method",
            "name": "Player.destroy",
            "return": {
                "description": "The original element that was put back (that you called widget destroy on).",
                "type": "JQuery/DOM element"
            },
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 293,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called by videoplayer.js jQuery plugin after the factory returns a player object (an instance of this \"Player\" object).\n<br />If YT API doesn't exist on the page already; include it, wait for it to be available, then create this player widget.\n<br />Else if we've already included the API, create this player widget.",
            "itemtype": "method",
            "name": "Player.init",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 331,
            "description": "EVENTS functions (for metrics).",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 335,
            "description": "This is a method of the \"Player\" constructor.\n<br>Fires a metrics event when this video player state changes (hits play, pause, ended, etc).\n<br />Uses Youtube player states:\n<br />0 = ended, 1 = played, 2 = paused, 3 = error.",
            "itemtype": "method",
            "name": "Player.onPlayerStateChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The player state change event object.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 368,
            "description": "This is a method of the \"Player\" constructor.\n<br>Converts the Youtube state to the coremetrics state for special metrics reporting.",
            "itemtype": "method",
            "name": "Player.convertToCoremetricsState",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The player state change event object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The coremetrics player state number.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 408,
            "description": "This is a method of the \"Player\" constructor.\n<br>Fires a metrics event when the video player throws an error (invalid param, video 404, not allowed to be embedded, etc).",
            "itemtype": "method",
            "name": "Player.onPlayerError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The player state change event object.",
                    "type": "Object"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 432,
            "description": "WIDGET functions.",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 436,
            "description": "This is a method of the \"Player\" constructor.\n<br>Takes the @data-overlayplayersize and converts that preset to the proper width and classes needed for the\n<br />Optional based on embed settings.",
            "itemtype": "method",
            "name": "Player.setOverlayPresets",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 460,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the aria-label to the trigger for better a11y so screen reader reads name of hosting service also.",
            "itemtype": "method",
            "name": "PLayer.addAriaLabel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The placeholder trigger element where we're putting the aria-label.",
                    "type": "JQuery DOM selector"
                },
                {
                    "name": "customText",
                    "description": "Custom text (existing) to use, else uses video title.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 480,
            "description": "This is a method of the \"Player\" constructor.\n<br>Adds the video description, name, and formatted time to the placeholder.\n<br />Optional based on embed settings.",
            "itemtype": "method",
            "name": "PLayer.addPlaceholderInfo",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 554,
            "description": "This is a method of the \"Player\" constructor.\n<br>Calculates a height for a given number using the default video apect ratio (16/9).",
            "itemtype": "method",
            "name": "Player.calcHeight",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "num",
                    "description": "The number to use as a width to calculate the proper height for.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "The number to use as a height for the given width.",
                "type": "Integer"
            },
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 570,
            "description": "This is a method of the \"Player\" constructor.\n<br>Checks that maxres exists from API data, and if not, switches image to medium res one.",
            "itemtype": "method",
            "name": "Player.createInlinePlayer",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 585,
            "description": "This is a method of the \"Player\" constructor.\n<br>Wrap the original element in a div since we REPLACE it with the youtube player and attach the player widget object to it.\n<br />Then embed the video, replacing the original element (that the plugin was called on).",
            "itemtype": "method",
            "name": "Player.createInlinePlayer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$el",
                    "description": "The element where we're putting the placeholder.",
                    "type": "JQuery DOM selector"
                },
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 600,
            "description": "This is a method of the \"Player\" constructor.\n<br>Take the video ID and get the image.\n<br />Create, bind, and replace origEl innerHTML with: a->img.\n<br />Onclick of the <a> we injected, embed the video player (and play it).",
            "itemtype": "method",
            "name": "Player.createPlayerTrigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder/trigger for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 642,
            "description": "This is a method of the \"Player\" constructor.\n<br>Converts the Youtube state to the coremetrics state for special metrics reporting.",
            "itemtype": "method",
            "name": "Player.addPlaybutton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The trigger element to inject a play button into.",
                    "type": "JQuery DOM object"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 657,
            "description": "This is a method of the \"Player\" constructor.\n<br>Does the actual video player embed.",
            "itemtype": "method",
            "name": "Player.embedVideo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$ell",
                    "description": "The element where we're putting the placeholder.",
                    "type": "JQuery DOM selector"
                },
                {
                    "name": "videoId",
                    "description": "The video (ID) we're embedding the placeholder for.",
                    "type": "String"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 687,
            "description": "This is a method of the \"Player\" constructor.\n<br>Takes user-defined playerVars from data-xxxxx naming convention and returns them to be merged into applied settings.",
            "itemtype": "method",
            "name": "Player.getUserDefinedPlayerVars",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An object containing the settings to use for the video embed.",
                "type": "Object"
            },
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 702,
            "description": "This is a method of the \"Player\" constructor.\n<br>Calls API to get video info and stores in a var and fires event for subscribers.",
            "itemtype": "method",
            "name": "Player.getVideoInfo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "videoId",
                    "description": "The video (ID) we want to get info for",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "The function to call and pass the returned data object to.",
                    "type": "Function"
                }
            ],
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 728,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called on a widget instance if the Youtube API is unavailable/blocked by ISP, country, Gov't, etc.\n<br>This looks for the Kaltura fallback video ID attribute, and if it exists it changes the widget to a Kaltura\nvideo player and inits the KT video player widget.",
            "itemtype": "method",
            "name": "Player.fallbackToKaltura",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 757,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called on player state change, if new state is \"play\".\n<br>Finds any active widgets that aren't this one and automatically pauses them when a new one is played.",
            "itemtype": "method",
            "name": "Player.pauseOtherVideos",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 778,
            "description": "This is a method of the \"Player\" constructor.\n<br>Called onclick of the user's link, or the auto-generated image that serves as the overlay trigger.\n<br />Public method to use to programatically open and play the associated video. Or you can just do: $(\"myTrigger a\").click();",
            "itemtype": "method",
            "name": "Player.showOverlayAndPlay",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer-youtube.js",
            "line": 806,
            "description": "This is a method of the \"Player\" constructor.\n<br>This is our YT player factory.\n<br />Called by init(). This is like our sub-factory.\n<br />Based on the display type, it calls the proper functions to make the proper widget elements for that type.\n<br />This is ONLY called after KT API is loaded, so assume all kWidget APIs are available.",
            "itemtype": "method",
            "name": "Player.setupPlayerWidget",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.common.widget.videoplayer.youtube",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer.js",
            "line": 65,
            "description": "The IBM video player plug-in.\n<br />\n<br />This",
            "class": "IBMCore.common.widget.videoplayer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer.js",
            "line": 108,
            "description": "Video player factory.\nCreates and returns the proper vendor plugin object.\nThis is the only thing that should be touched, and it's only when you need to add/remove a type of player from the factory.\n\nInit is called after new videoplayer() above in createVideoPlayer.\nThis decides what type of sub-class/object player to create.\nThat sub class/object player is responsible for everything.",
            "class": "IBMCore.common.widget.videoplayer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/videoplayer.js",
            "line": 138,
            "description": "Common video player methods and helers.",
            "class": "IBMCore.common.widget.videoplayer",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/widget-manager.js",
            "line": 15,
            "description": "Cross browser, basic common reusable event dispatcher.\n<br>Automatically prefixes \"ibm-\" to every event that passes thru here for namespacing.\n<br>Note: For browsers like IE11 that don't support CustomEvent constructor, \n \"detail\" property will not be passed to the event because \"createEvent\" doesn't support it.",
            "itemtype": "method",
            "name": "publishCustomElementEvent",
            "params": [
                {
                    "name": "data",
                    "description": "Object with event data:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "evtEl",
                            "description": "The element to publish the event on.",
                            "type": "DOM element"
                        },
                        {
                            "name": "evtName",
                            "description": "The event name to publish.",
                            "type": "String"
                        },
                        {
                            "name": "evtDetail",
                            "description": "The event detail property to send with the CustomEvent, used by subscribers.",
                            "type": "Multi"
                        }
                    ]
                }
            ],
            "class": "IBMCore.common.widget.manager",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/widgets/widget-manager.js",
            "line": 46,
            "description": "Shortcut for common widget \"init\" event.\n<br>Adds the \"processed\" state class and then fires a common init event on DOM element where data-widget existed.",
            "itemtype": "method",
            "name": "dispatchInitEvent",
            "params": [
                {
                    "name": "el",
                    "description": "The element to fire the event and add the class on (the one with @data-widget on it).",
                    "type": "DOM element"
                }
            ],
            "class": "IBMCore.common.widget.manager",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/init.js",
            "line": 19,
            "description": "Called on DOM ready only if contentwidgets are enabled (default setting).\n<br />Anything in here will only run if content space widgets are enabled for the page. (default).",
            "itemtype": "method",
            "name": "runOnloadIfWidgetsEnabled",
            "access": "private",
            "tagname": "",
            "class": "Other IBM - common init",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/init.js",
            "line": 160,
            "description": "Runs on DOM ready\nAllows us to disable all auto-init content space widgets via a single config setting.",
            "class": "Other IBM - common init",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/setconfig.js",
            "line": 1,
            "description": "This is where all the defaults are set for WWW.\n\tConfigurations and what\"s enabled or not by default.\n\tThis is WWW ONLY.",
            "requires": [
                ": IBMCore.common.config"
            ],
            "class": "IBMCore.www.module.dynamiccontactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/setconfig.js",
            "line": 65,
            "description": "Module default configurations below",
            "class": "IBMCore.www.module.dynamiccontactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/common/setconfig.js",
            "line": 211,
            "description": "Check to see if we need to override some of the production settings with different environment settings.\nAllows you to use a different environment build using non-production values. The order is:\n\t1. Production (default).\n\t2. Override via COOKIE value through our special cookie. Settable here:\n\t\thttp://www.ibm.com/common/test/v18/v18-env-switcher.html",
            "class": "IBMCore.www.module.dynamiccontactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/modules/dynamic-contact-module.js",
            "line": 35,
            "description": "Waits for meta to be ready then adds a request to the bundled service request \nfor a contact module based on the WTMcategory value.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.www.module.dynamiccontactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/modules/dynamic-contact-module.js",
            "line": 53,
            "description": "Callback for service request.\n<br />If a contact module was returned and if the contact module container exists on the page, inject the new one into the container.",
            "itemtype": "method",
            "name": "contactboxcallback",
            "class": "IBMCore.www.module.dynamiccontactmodule",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/modules/notice-choice-loader.js",
            "line": 1,
            "description": "This file simply subscribes to DOM ready event and dynamically injects the Notice/Choice JS file (notice-choice.js)\n\t if the page meets the specified criteria and adds the proper form fields based on the page's settings.",
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/modules/notice-choice-loader.js",
            "line": 9,
            "description": "Automatically run on DOM ready.\n<br />Validates if we need to fetch the NC script file and simply injects it. It's set for autorun, so \nit's expecting META to be ready.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/vendor/truste.js",
            "line": 20,
            "description": "Waits for meta to be ready then includes the truste code.",
            "itemtype": "method",
            "name": "init",
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/vendor/truste.js",
            "line": 36,
            "description": "Injects the \"cookie preferences\" link into the footer on enabled countries.\n<br />This runs on publish of the footer \"ready\" event.",
            "itemtype": "method",
            "name": "injectLink",
            "access": "private",
            "tagname": "",
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/vendor/truste.js",
            "line": 60,
            "description": "Gets the cookie consent decision for the user: If they opted out of cookie tracking or not.\n<br />Returns a simple numeric code by default. Or you can use the param option to get the full data object back.",
            "itemtype": "method",
            "name": "getConsentDecision",
            "params": [
                {
                    "name": "domain",
                    "description": "Allows you to specify an alternate domain if not ibm.com.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "dump",
                    "description": "If you want the full data object dump instead of a simple yes/no code.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the consent code (default) or the data object if you wanted the full dump.",
                "type": "Integer"
            },
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/www/vendor/truste.js",
            "line": 84,
            "description": "Shortcut function to call before setting a UI cookie (remembering a locale selection, a dynamic tab that's showing, etc)\n<br>Pass it the TTL that you *want*, and it will validate if you are allowed to use that\n\tbased on the user's cookie consent level setting.\n<br>It will return the TTL in seconds that you want to use, \n\tor the max TTL in seconds for 'no consent' as per ePrivacy law (4 hours).\n<br>If you do not respect the consent decision for cookies and localstorage, you are breaking the ePrivacy law\n\twhich carries a hefty fine.",
            "itemtype": "method",
            "name": "getUiAllowedStorageTtl",
            "params": [
                {
                    "name": "Expire",
                    "description": "time in seconds, from now.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Returns the allowed expired time, in seconds, based on if user allows UI consent or not.",
                "type": "Integer"
            },
            "class": "IBMCore.www.module.truste",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/perf.js",
            "line": 5,
            "description": "Performance functions that use the high-resolution timers\nof the web performance API to mark and measure events, code loading, etc",
            "class": "IBMCore.common.util.perf",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/temp-cookie-validator.js",
            "line": 4,
            "description": "Temp addition to validate ipcinfo cookie and find the offender of it, for corp webmaster team.",
            "class": "",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/temp-css-tester.js",
            "line": 1,
            "description": "This is to allow the testing of the latest css code on a v18 page\n\t<br />Checks that the page is being loaded from an iframe and switches the CSS to the latest version",
            "class": "",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/temp-http-checker.js",
            "line": 4,
            "description": "Temp addition to see if any css/script/images are using forced http on URLs.",
            "class": "",
            "module": "IBMCore"
        },
        {
            "file": "src/js/sources/ibm/temp-wat-loader.js",
            "line": 1,
            "description": "This is for Jeff Florentino\n\t<br />Web asset tracker for GDPR auditing. Checks the page to ensure it has tealium/CM on it and if not, fires a tag.",
            "class": "",
            "module": "IBMCore"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/js/sources/ibm/common/lib/select2.js:51"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/js/sources/ibm/common/lib/select2.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:49"
        },
        {
            "message": "unknown tag: media screen and (max-width: ' + (mainlinksmin+100) + 'px) { \n\t.ibm-sitenav-menu-container .ibm-sitenav-menu-list > ul > li {\n\t\tdisplay:none\n\t}\n\t.ibm-sitenav-menu-container .ibm-sitenav-menu-list > ul > .ibm-sitenav-menu-item-right {\n\t\tdisplay:block\n\t}\n}\n@media screen and (min-width: ' + (mainlinksmin+101) + 'px) { \n\t.ibm-mobilemenu-sitenavmenu > ul > li {\n\t\tdisplay:none\n\t}\n} \n@media screen and (max-width: ' + (rightlinksmin+100) + 'px) { \n\t.ibm-sitenav-menu-list > ul > .ibm-sitenav-menu-item-right { \n\t\tdisplay:none\n\t}\n}\n@media screen and (min-width: ' + (rightlinksmin+101) + 'px) { \n\t.ibm-mobilemenu-sitenavmenu > ul > .ibm-sitenav-menu-item-right { \n\t\tdisplay:none\n\t}\n}",
            "line": " src/js/sources/ibm/common/modules/sitenav-menu.js:336"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/util/accessibility.js:595"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/overlay.js:357"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/rssdisplay.js:119"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/sameheight.js:124"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/show-hide.js:148"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/stepindicator.js:120"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/stickytabs.js:145"
        },
        {
            "message": "unknown tag: data",
            "line": " src/js/sources/ibm/common/widgets/twisty.js:123"
        },
        {
            "message": "Missing item type\nSyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushCss.js:1"
        },
        {
            "message": "Missing item type\nSyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushJScript.js:1"
        },
        {
            "message": "Missing item type\nSyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shBrushXml.js:1"
        },
        {
            "message": "Missing item type\nSyntaxhighlighter does stupid shit and overwrites the native string.replace() method, \nbut they didn't check for replacement to be null or undefined.\nThis is a patch for that.",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shCore-ibmcustom.js:1"
        },
        {
            "message": "Missing item type\nSyntaxHighlighter\nhttp://alexgorbatchev.com/SyntaxHighlighter\n\nSyntaxHighlighter is donationware. If you are using it, please donate.\nhttp://alexgorbatchev.com/SyntaxHighlighter/donate.html",
            "line": " src/js/sources/ibm/common/lib/syntaxhighlighter/shCore.js:1"
        },
        {
            "message": "Missing item type\nEvEmitter v1.1.0\nLil' event emitter\nMIT License",
            "line": " src/js/sources/ibm/common/lib/imagesloaded.js:7"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/lib/imagesloaded.js:196"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/lib/imagesloaded.js:248"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/lib/imagesloaded.js:308"
        },
        {
            "message": "Missing item type\nGlobals and constants",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:22"
        },
        {
            "message": "Missing item type\nThe date picker constructor",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:31"
        },
        {
            "message": "Missing item type\nSet a datepicker item object.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:150"
        },
        {
            "message": "Missing item type\nGet a datepicker item object.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:194"
        },
        {
            "message": "Missing item type\nCreate a picker date object.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:202"
        },
        {
            "message": "Missing item type\nCreate a range limit object using an array, date object,\nliteral “true”, or integer relative to another time.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:253"
        },
        {
            "message": "Missing item type\nCheck if a date unit falls within a date range object.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:290"
        },
        {
            "message": "Missing item type\nCheck if two date range objects overlap.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:299"
        },
        {
            "message": "Missing item type\nGet the date today.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:315"
        },
        {
            "message": "Missing item type\nNavigate to next/prev month.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:327"
        },
        {
            "message": "Missing item type\nNormalize a date by setting the hours to midnight.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:384"
        },
        {
            "message": "Missing item type\nMeasure the range of dates.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:393"
        },
        {
            "message": "Missing item type\nCreate a viewset object based on navigation.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:419"
        },
        {
            "message": "Missing item type\nValidate a date as enabled and shift if needed.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:427"
        },
        {
            "message": "Missing item type\nCheck if a date is disabled.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:550"
        },
        {
            "message": "Missing item type\nParse a string into a usable type.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:592"
        },
        {
            "message": "Missing item type\nVarious formats to display the object in.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:641"
        },
        {
            "message": "Missing item type\nCheck if two date units are the exact.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:750"
        },
        {
            "message": "Missing item type\nCheck if two date units overlap.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:782"
        },
        {
            "message": "Missing item type\nFlip the “enabled” state.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:809"
        },
        {
            "message": "Missing item type\nMark a collection of dates as “disabled”.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:818"
        },
        {
            "message": "Missing item type\nMark a collection of dates as “enabled”.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:877"
        },
        {
            "message": "Missing item type\nCreate a string for the nodes in the picker.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:969"
        },
        {
            "message": "Missing item type\nThe date picker defaults.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:1272"
        },
        {
            "message": "Missing item type\nExtend the picker to add the date picker.",
            "line": " src/js/sources/ibm/common/lib/picker.date.js:1345"
        },
        {
            "message": "Missing item type\nThe picker constructor that creates a blank picker.",
            "line": " src/js/sources/ibm/common/lib/picker.js:29"
        },
        {
            "message": "Missing item type\nInitialize everything",
            "line": " src/js/sources/ibm/common/lib/picker.js:74"
        },
        {
            "message": "Missing item type\nRender a new picker",
            "line": " src/js/sources/ibm/common/lib/picker.js:167"
        },
        {
            "message": "Missing item type\nDestroy everything",
            "line": " src/js/sources/ibm/common/lib/picker.js:185"
        },
        {
            "message": "Missing item type\nOpen up the picker",
            "line": " src/js/sources/ibm/common/lib/picker.js:226"
        },
        {
            "message": "Missing item type\nClose the picker",
            "line": " src/js/sources/ibm/common/lib/picker.js:338"
        },
        {
            "message": "Missing item type\nClear the values",
            "line": " src/js/sources/ibm/common/lib/picker.js:395"
        },
        {
            "message": "Missing item type\nSet something",
            "line": " src/js/sources/ibm/common/lib/picker.js:403"
        },
        {
            "message": "Missing item type\nGet something",
            "line": " src/js/sources/ibm/common/lib/picker.js:451"
        },
        {
            "message": "Missing item type\nBind events on the things.",
            "line": " src/js/sources/ibm/common/lib/picker.js:494"
        },
        {
            "message": "Missing item type\nUnbind events on the things.",
            "line": " src/js/sources/ibm/common/lib/picker.js:534"
        },
        {
            "message": "Missing item type\nFire off method events.",
            "line": " src/js/sources/ibm/common/lib/picker.js:550"
        },
        {
            "message": "Missing item type\nWrap the picker holder components together.",
            "line": " src/js/sources/ibm/common/lib/picker.js:569"
        },
        {
            "message": "Missing item type\nPrepare the input element with all bindings.",
            "line": " src/js/sources/ibm/common/lib/picker.js:610"
        },
        {
            "message": "Missing item type\nPrepare the root picker element with all bindings.",
            "line": " src/js/sources/ibm/common/lib/picker.js:656"
        },
        {
            "message": "Missing item type\nPrepare the holder picker element with all bindings.",
            "line": " src/js/sources/ibm/common/lib/picker.js:664"
        },
        {
            "message": "Missing item type\nPrepare the hidden input element along with all bindings.",
            "line": " src/js/sources/ibm/common/lib/picker.js:765"
        },
        {
            "message": "Missing item type\nThe default classes and prefix to use for the HTML classes.",
            "line": " src/js/sources/ibm/common/lib/picker.js:877"
        },
        {
            "message": "Missing item type\nCheck if the default theme is being used.",
            "line": " src/js/sources/ibm/common/lib/picker.js:903"
        },
        {
            "message": "Missing item type\nGet the width of the browser’s scrollbar.\nTaken from: https://github.com/VodkaBears/Remodal/blob/master/src/jquery.remodal.js",
            "line": " src/js/sources/ibm/common/lib/picker.js:926"
        },
        {
            "message": "Missing item type\nPickerConstructor helper methods.",
            "line": " src/js/sources/ibm/common/lib/picker.js:960"
        },
        {
            "message": "Missing item type\nCreate a group of nodes. Expects:\n`\n       {\n           min:    {Integer},\n           max:    {Integer},\n           i:      {Integer},\n           node:   {String},\n           item:   {Function}\n       }\n`",
            "line": " src/js/sources/ibm/common/lib/picker.js:965"
        },
        {
            "message": "Missing item type\nCreate a dom node string",
            "line": " src/js/sources/ibm/common/lib/picker.js:1010"
        },
        {
            "message": "Missing item type\nLead numbers below 10 with a zero.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1032"
        },
        {
            "message": "Missing item type\nTrigger a function otherwise return the value.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1040"
        },
        {
            "message": "Missing item type\nIf the second character is a digit, length is 2 otherwise 1.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1048"
        },
        {
            "message": "Missing item type\nTell if something is a date object.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1056"
        },
        {
            "message": "Missing item type\nTell if something is an integer.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1064"
        },
        {
            "message": "Missing item type\nCreate ARIA attribute strings.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1072"
        },
        {
            "message": "Missing item type\nExtend the picker with a component and defaults.",
            "line": " src/js/sources/ibm/common/lib/picker.js:1080"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/lib/select2.js:51"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " src/js/sources/ibm/common/lib/select2.js:76"
        },
        {
            "message": "Missing item type\nMakes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "line": " src/js/sources/ibm/common/lib/select2.js:252"
        },
        {
            "message": "Missing item type\nJust drops the config on the floor, but returns req in case\nthe config return value is used.",
            "line": " src/js/sources/ibm/common/lib/select2.js:445"
        },
        {
            "message": "Missing item type\nExpose module registry for debugging and tooling",
            "line": " src/js/sources/ibm/common/lib/select2.js:453"
        },
        {
            "message": "Missing item type\nThis method will transfer the tabindex attribute from the rendered\nselection to the search box. This allows for the search box to be used as\nthe primary focus instead of the selection container.",
            "line": " src/js/sources/ibm/common/lib/select2.js:1995"
        },
        {
            "message": "Missing item type\nOverride the trigger method to automatically trigger pre-events when\nthere are events that can be prevented.",
            "line": " src/js/sources/ibm/common/lib/select2.js:5460"
        },
        {
            "message": "Missing item type\nUstream Embed API\nhttp://ustream.tv/\n\nEnables sites using Ustream embed iframe to build and adapt on the embed player.\nThe Ustream Embed API provides basic methods to control the live stream\nor video playback, and enables the user to access essential events\nof the live stream or played video.",
            "line": " src/js/sources/ibm/common/lib/ustream-embedapi.js:1"
        },
        {
            "message": "Missing item type\nTODO: Santelia: This needs general refactoring and clean up:\n- Remove the DOM injection placement logic from this file and put it in the footer and footer menu ones. \n\t\tSince they generate the elements, they know where it should go.\n\t- It should simply be a module that does nothing except generate a DOM element in a var that others can pickup.\n\t- You subscribe to ready event, and when ready you inject it where you want/need it.\n\t\tEx: \n\t\t\tFootermenu subscribes and injects in there.\n\t\t\tFooter (alternate) subscribes and injects in there.",
            "line": " src/js/sources/ibm/common/modules/localeselector.js:1"
        },
        {
            "message": "Missing item type\nSets the data url for the banner",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:9"
        },
        {
            "message": "Missing item type\nKey name for caching the banner content in session storage",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:17"
        },
        {
            "message": "Missing item type\nFetches the banner data before injecting",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:32"
        },
        {
            "message": "Missing item type\nChecks if the wildcard list appears in the pathname",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:49"
        },
        {
            "message": "Missing item type\nChecks if the criteria is met before injecting the banner:\n- bannerActive is true\n- current location.pathname is in the whitelist\n- lang content (lc-cc) exists",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:65"
        },
        {
            "message": "Missing item type\nRenders the banner above the masthead",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:102"
        },
        {
            "message": "Missing item type\nRenders the Think Banner",
            "line": " src/js/sources/ibm/common/modules/masthead-banner.js:146"
        },
        {
            "message": "Missing item type\nHow the masthead works:\n\t\t#1. Popup - This is the absolute minimal, \"logo-only\" masthead only used on popup windows.\n\t\t\tThis is the base, with all modules disabled.\n\t\t#2. Alternate - This is the \"application masthead\". This is the same as default, but without the main link items\n\t\t#3. Full - This is the DEFAULT. This includes main link items and the megamenu. Inline links are hidden when browser is not wide enough.\n\tPage owners can override and choose either \"alternate\" or \"popup\" masthead type via a page config.\nIf you are going to try and read this and understand how it all works, grab yourself a tall cup of coffee.\n\tThe file is long, technically, but there are a LOT of comments in here.\n\tIt's not complicated, it's just complex. There are functions for everything, and it's really not that hard.\n\tThe masthead is just comprised of a bunch of pieces of things that can be enabled/disabled and configured.",
            "line": " src/js/sources/ibm/common/modules/masthead.js:1"
        },
        {
            "message": "Missing item type\nFirst we ONLY inject the links we need on the glass and any swizzling to get them out ASAP.\n\t\t\t\tThen we defer all \"setup\" functionality.\n\t\t\t\tEach of the createMasthead_____ functions adds a class that makes styling easy, based on the type of masthead.\nCases from minimal to maximum. What is always there, what isn't:\nIf popup:\n\t\t\t\t\t- Disable and hide all\n\t\t\t\t\t- Stop.\nIf alternate:\n\t\t\t\t\t- Search\n\t\t\t\t\t- Iconsonly\nIf full: (Same as minimal but with visible catnav & mega & dropdown menus):\n\t\t\t\t\t- Main nav items\n\t\t\t\t\t- Search\n\t\t\t\t\t- Iconsonly\n\t\t\t\t\t- Megamenu",
            "line": " src/js/sources/ibm/common/modules/masthead.js:163"
        },
        {
            "message": "Missing item type\ndataObj = {\n\tlinkContents: \"\", // The text we'd show on the screen.\n\tlinkAlt: \"\",  // The aria-label for blind user who can't see the visual meaning \"you're signed in\"\n\tbackgroundImage: \"\"  // The image to use for the button.\n\ttype: \"default|text|image\"  // What type of \"signed-in\" visual to display.\n};",
            "line": " src/js/sources/ibm/common/modules/masthead.js:709"
        },
        {
            "message": "Missing item type\nPage using it in v17:  \n\thttps://www-03.ibm.com/financing/us/contact_rep.html\n\nExample WSR URL: \n\thttps://www.ibm.com/gateway/secstate/?&cc=us&lc=en&format=json&ts=1455038215811&industry=ZZ&dc_subject=OE600&currenturl=%2F%2Fwww.ibm.com%2Fsystems%2Fpower%2Fsoftware%2Faix%2Fsolutions.html&ctype=CT528&ww=&cb=102%3A__tcb99391%40106%3A__tcb11910 \n\nSample WSR returned data:\n\t__tcb99391({\"results\":[{\"imgsrc\":\"//www.ibm.com/i/v16/promo/Systems_power_20140428_168x64.jpg\",\"fileExtension\":\"\",\"externalUrl\":0,\"imgh\":\"64\",\"imgalt\":\"\",\"linktext\":\"Learn more\",\"tid\":\"1\",\"trackOnLoad\":1,\"imgw\":\"168\",\"linkurl\":\"http://www-03.ibm.com/financing/us/hardware/powersystems.html?cm_sp=MTE29908\",\"title\":\"Financing for Power Systems\",\"weight\":\"0.0\",\"type\":\"DEF\",\"description\":\"0% 24 month financing for select Power Systems servers, Maximize your investment with IBM Global Financing.\",\"fileSize\":\"\",\"spotid\":29908}]})",
            "line": " src/js/sources/ibm/common/modules/mte.js:13"
        },
        {
            "message": "Missing item type\nNotes on layouts, from v17:\n\n(mteLocation)-(item.tid):\n\n---------------------------------------------------------------\n5-1:\n\n\t1-1:  (image + h2 + descr + standalone link)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t1-2:  (1-1 w/ \"alternate\" class)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t1-3:  (image + h2 + descr)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t1-4:  (1-2 without an image: h2 + descr + standalone link)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n6-1:\n\n\t2-1: (1-1 with \"crop\" class;  image + h2 + descr + standalone)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t2-2 & 4:  (Same as 1-4) \n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t2-3:  (1-3 with \"crop\" class;  image + h2 + standalone)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n\n6-2:\n\n\t3-1 & 4:  (Same as 1-4)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t</div>\n\t\t<ul class=\"ibm-link-list\">\n\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t</ul>\n\t\thiddenFields\n\t</div>\n\n\t3-2:  (Portrait module (use media object instead))\n\t<div class=\"ibm-container alternate ibm-portrait-module\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<div class=\"ibm-module-text\">\n\t\t\t\t<h2>' + item.title + '</h2>\n\t\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t\t\t<ul class=\"ibm-link-list\">\n\t\t\t\t\t<li><a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\">' + item.linktext + fileSizeText + '</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t\thiddenFields\n\t</div> \n\n\t3-3:  (h2 + descr)\n\t<div class=\"ibm-container alternate\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<h2>' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n---------------------------------------------------------------\n\n#ibm-related-content:\n\n\t4-1:  (Same as 2-1; 1-1 with crop class)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2 class=\"ibm-third\">' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + '</a></p>\n\t\t\t<p class=\"ibm-ind-link\">' + '<a class=\"' + urlLinkClass + '\" href=\"' + leavingIBMLink + item.linkurl + '\" >' + item.linktext + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t4-3:  (Same as 1-3, with crop)\n\t<div class=\"ibm-container\">\n\t\t<div class=\"ibm-container-body\">\n\t\t\t<div class=\"ibm-module-image' + crop + '\"><img border=\"0\" src=\"' + item.imgsrc + '\" alt=\"' + item.imgalt + '\" /></div>\n\t\t\t<h2 class=\"ibm-third\">' + item.title + '</h2>\n\t\t\t<p><a href=\"' + leavingIBMLink + item.linkurl + '\">' + item.description + fileSizeText + '</a></p>\n\t\t</div>\n\t\thiddenFields\n\t</div>\n\n\t4-2 & 4 ignored in footer.\n\n---------------------------------------------------------------",
            "line": " src/js/sources/ibm/common/modules/mte.js:420"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/modules/sitenav-menu.js:336"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/util/accessibility.js:758"
        },
        {
            "message": "Missing item type\nShim for console for browsers that don't support the full range of console functions.\n\t<br />This ensures that a console function won't throw an error if the browser doesn't support it/have it defined.",
            "line": " src/js/sources/ibm/common/util/console.js:1"
        },
        {
            "message": "Missing item type\nLEGACY Service ID List - just to have it somewhere.\nSome of these are turned off.\n100 - Greeting \n101 - Scoped Search // SERVICE DISABLED\n102 - Merchandising\n103 - Easy Access link displayed on Public site.\n104 - My Interests display // SERVICE DISABLED\n105 -  Incremental profiling // SERVICE DISABLED\n106 -  InterCountry navigation // SERVICE DISABLED\n107 - Pre-filled forms // SERVICE DISABLED\n109 - Sign in/FastPath\n110 - E-mail this page\n115 - IBM Bookmarks // SERVICE DISABLED\n125 - IBM Social Share Service // SERVICE DISABLED\n119 -  Instant Signin // SERVICE DISABLED\n1000 - Masthead links and rollover menus // SERVICE DISABLED\n1001 - Print this page // SERVICE DISABLED\n1002 - Turn off All Page tools // SERVICE DISABLED\n1003 - Turn off Masthead Greeting and Sign in services (Don't display grey bar below masthead.) // SERVICE DISABLED\n1004 - All page tools / Also handles IBM Feeds // SERVICE DISABLED\n1005 - Delicious page tool // SERVICE DISABLED\n1006 - Digg page tool // SERVICE DISABLED\n1007 - Turn off SBS icons (leaves Print and Mail intact) // SERVICE DISABLED\n1010 -  Social navigation // SERVICE DISABLED\n122 - IBM QuickPoll // SERVICE DISABLED\n\nDetails on https://w3.tap.ibm.com/w3ki07/display/CWTBNG/Dynamivnav%20Regression%20Test",
            "line": " src/js/sources/ibm/common/util/coreservices.js:18"
        },
        {
            "message": "Missing item type\nUses getCurrentGridSize utility to add a class to HTML element so CSS can be applied generically \n\tper-grid size by pages without needing to do media queries or match v18 media queries.\n\t<br />Grid classes are same conventin as hidden-xxxx classes so everything matches up.",
            "line": " src/js/sources/ibm/common/util/grid.js:1"
        },
        {
            "message": "Missing item type\nRandom small utilities that don't deserve their own file.\n\tEach one declares a class then documents the function.",
            "line": " src/js/sources/ibm/common/util/misc.js:1"
        },
        {
            "message": "Missing item type\nIf IP is forced || or no data was retrieved from storage ||\n\tor storage data was compromised (Ex: user screws with localstorage values)\n\tdo WSR and then set data from service,\n\nElse the user had valid stored data, so merge it into the common user object.\n\nNOTE: \"information_level\" is used as a flag since other data is also kept in storage. Don't remove.",
            "line": " src/js/sources/ibm/common/util/user.js:366"
        },
        {
            "message": "Missing item type\nUsed by KC, keeping for legacy usage.",
            "line": " src/js/sources/ibm/common/util/user.js:453"
        },
        {
            "message": "Missing item type\nInternal helper - common method used when we need to set user data as signed in or not.",
            "line": " src/js/sources/ibm/common/util/user.js:469"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/util/user.js:548"
        },
        {
            "message": "Missing item type\nThis is for Kevin Eagan & John Rosato for Alexa certification and competitive analysis.\n\t<br />Must be kept until explicitly told it can be removed. Verified with Rosato: Nov 2016.\n\t<br />In order to certify to Alexa that John's account is the owner of the ibm.com site and to get better metrics, \n\t we need this on all pages.",
            "line": " src/js/sources/ibm/common/vendor/alexa-tracking.js:4"
        },
        {
            "message": "Missing item type\nCustom modernizr and other random tests/detection setups.",
            "line": " src/js/sources/ibm/common/vendor/modernizr-extensions.js:1"
        },
        {
            "message": "Missing item type\nHow survey configs are determined which one to use:\nLogic is split into 2 groups for ease of maintenance and sanity. There's no point in trying to figure out what gate the user\n\t  should go to for a flight if they don't even have a ticket to get past security.\nCombining entry % with the other 'active/seen it' logic is just nuts and would make it too complex.\n\tSo...\n\tFirst: Figure out the entry # and if user is even allowed past security. No point in doing any more logic if\n\t\t\tthe don't even have a ticket.\n\tSecond: They are in, now figure out what config to show them based on the # + 3 other properties.\n\n\nIN ORDER OF SIMPLICITY, NOT IN ORDER OF LOGIC REQUIRED TO DETERMINE PROPER CONFIG TO USE.\n\tBelow are cases assuming traffic % match has been met. In other words, the user qualified for a survey\n\t(basic % threshhold has been met) here are the cases on what happens next in logic scheme.\nEach config has three states that determine the logic rules:\n\t - Is still active.\n\t - Has already been seen.\n\t - Replaces default (survey A) or is survey B.\nEXISTING FUNCTIONALITY SINCE INCEPTION:\n\tNo custom intercept config exists (uses default survey A):\n\t\tCase 1: Nothing is set on the page (95% of pages).\n\t\t\tExpect: Global default config used, with global default entry % (5).\n\t\tCase 2: ONLY global_percent is set (means page wants more/less traffic to default intercept)\n\t\t\tExpect: Global default config used, but replace default {intercept.percent} with PAGE global_percent.\n\t\tCase 3: Global % is set to 0 AND NO CUSTOM \"INTERCEPT\" CONFIG EXISTS (nor new alterante).\n\t\t\tExpect: Stop, do nothing. Page doesn't want any intercept survey.\n\t\tCase 4: Global default already seen default (cookie exists)\n\t\t\tExpect: Stop, do nothing. User has already seen this one.\n\n\tCustom intercept config set (replacement for survey A):\n\tCase 5: Custom intercept config is setup (standard usage).\n\t\tExpect: Custom {intercept.percent} is used for traffic % match. Custom intercept config used.\n\tCase 6: Custom intercept config is setup, is active, but already seen (cookie exists).\n\t\tExpect: Stop, do nothing. User has already seen this one.\n\tCase 7: Custom intercept config is setup, but inactive (disabled or not within start/stop date range.)\n\t\tExpect: Custom config is ignored as if it were never set, fall back to defaults, case 1|2.\n\tCase 8: Custom intercept config is setup, but inactive AND default has already seen.\n\t\tExpect: Stop, do nothing. No active custom config and default has already been seen.\n\nNEW FEATURE CASES:\n\tCustom intercept ALTERNATE config ONLY (standard usage, uses \"default\" global as other option). This is a \"survey B\" not a replacement for \"survey A\":\n\t\tCase 9: Custom ALTERNATE config is setup.\n\t\t\tExpect: entry_percent is total traffic entry %, then broken down in settings of:\n\t\t\t\t\tGlobal percent or page global_percent setting is % to use default config.\n\t\t\t\t\t+\n\t\t\t\t\tAlternate config.percent is % to use alternate config.\n\t\t\t\t\tAKA: global_percent + alternate_intercept.percent = entry_percent.\n\t\tCase 10: Custom ALTERNATE config is setup, but already seen OR inactive.\n\t\t\tExpect: No splitting. Custom alternate config is ignored as if it were never set fall back to defaults, case 1|2.\n\t\tCase 11: Custom ALTERNATE config is setup, but DEFAULT already seen (opposite of above).\n\t\t\tExpect: No splitting. Send all entry traffic to use alternate config.\n\t\tCase 12: Custom ALTERNATE config is setup, but already seen or inactive AND default already seen.\n\t\t\tExpect: Stop, do nothing. No valid custom config and default has already been seen.\n\n\n\tCustom intercept AND alternate config set (special usage). Traffic is only ever split if BOTH configs are valid.\n\t\tOtherwise assumes as if the valid one was the only one that existed (ex: all cases above ^):\n\t\tThink of this as simply dynamically choosing the custom intercept config to be used in the above cases.\n\t\tCase 13: Custom intercept and alternate config are setup.\n\t\t\tExpect: entry_percent is total traffic entry %, then broken down in settings of:\n\t\t\t\t\tintercept.percent.\n\t\t\t\t\t+\n\t\t\t\t\tintercept_alternate.percent is % to use alternate config.\n\t\t\t\t\tAKA: intercept.percent + alternate_intercept.percent = entry_percent.\n\t\tCase 14: intercept_alternate config has been seen or inactive.\n\t\t\tExpect: intercept_alternate config is ignored as if it were never set. Send all entry traffic to custom intercept config.\n\t\tCase 15: intercept config has been seen or inactive (opposite of above).\n\t\t\tExpect: intercept config is ignored. Assume as if it were never set. Send all entry traffic to intercept_alternate config.\n\t\tCase 16: intercept AND intercept_alternate config have each been seen.\n\t\t\tExpect: Stop, do nothing. Both configs are still active, just both been seen.\n\t\tCase 17: intercept AND intercept_alternate config are both inactive.\n\t\t\tExpect: No valid custom config, ignore as if they were never set. Fall back to original default case 1|2 option.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:44"
        },
        {
            "message": "Missing item type\nFirst do quick check to see if the traffic entry % even matches.\nIt's useless to do anything if user don't even qualify to get in the door.\n\nIf there's an alternate set:\n\tIf alt is active: use new 'entry_percent',\n\tOtherwise it's like alt wasn't coded and treat like normal page custom intercept...\nElse if there's a regular custom config (only); if that's active use that local % (existing functionality custom intercept)\nOtherwise all cases use page global default setting.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:419"
        },
        {
            "message": "Missing item type\nCreating Intercept Survey Invitation overlay.\n\nIt will pop up on the page loading, and asking for participating to the survey.\n\n 1) If User clicks on yes button, means they wish to participate on survey then, open survey overlay and hide invitation overlay\n 2) If user clicks on no button, means they do not wish to participate on survey.\n 3) Create a cookie on hiding of the invitation overlay, as global barrier for 30 days to restrict them to participate on another survey from IBM.com.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:736"
        },
        {
            "message": "Missing item type\nCreating Intercept Survey overlay.\n\nIt will pop up after user clicks on yes button from invitation overlay, which will load the survey with in IFRAME from external/internal sources.\n\n1) Create a cookie on hiding of the survey overlay, as local barrier till end date for the survey, to restrict them to participate on current survey again.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:888"
        },
        {
            "message": "Missing item type\nTracking by coremetrics code for intercept shown",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:938"
        },
        {
            "message": "Missing item type\nEvents created for invitation overlay form,\n\n1) Yes button:               If user clicks on yes button, then open survey overlay\n2) No button:                If user clicks on no button, then hide the invitaiton overlay\n3) About feedback at IBM:    If user clicks on 'About feedback at IBM', then show the IBM privaly policy window on the invitation overlay.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:960"
        },
        {
            "message": "Missing item type\nTracking by coremetrics code for if user clicks yes button",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:994"
        },
        {
            "message": "Missing item type\nCreating survey URL.\n\nBased on the survey type, survey URL will vary from different sources.\nThis function is making URL for the particular survey based on the survey type.\n\n1) Creating survey URL\n2) Adding metadata with the URL if user given in configuration (This is now only appicable to ASM survey's, rest of the survey type meta information will add up later)",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:1021"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:1037"
        },
        {
            "message": "Missing item type\nCreating survey meta data format.",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:1083"
        },
        {
            "message": "Missing item type",
            "line": " src/js/sources/ibm/common/vendor/survey-ccfintercept.js:1283"
        },
        {
            "message": "Missing item type\nExpertise widget.\n\tService has been shut down for various reasons. Service is no longer available.",
            "line": " src/js/sources/ibm/common/widgets/expertise.js:1"
        },
        {
            "message": "Missing item type\nHi-res image swap widget - SUNSET\n\t<br />SUNSET. Does nothing now.",
            "line": " src/js/sources/ibm/common/widgets/hiresimageswap.js:1"
        },
        {
            "message": "Missing item type\nSUNSET. Does nothing.",
            "line": " src/js/sources/ibm/common/widgets/hiresimageswap.js:9"
        },
        {
            "message": "Missing item type\nTODO: Santelia: This is a hack Mike C did using indexes. Change to use stored/cached pointers instead for more effecient processing and just maintenance sanity.",
            "line": " src/js/sources/ibm/common/widgets/show-hide.js:35"
        },
        {
            "message": "Missing item type\nNotes:\n\nKaltura API/events:  http://www.kaltura.org/demos/kdp3/docs.html\nReusing a player (just change loaded video, for playlist with thumbs):  http://player.kaltura.com/docs/changeMedia",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-kaltura.js:14"
        },
        {
            "message": "Missing item type\nEVENTS functions (for metrics).",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-kaltura.js:252"
        },
        {
            "message": "Missing item type\nWIDGET functions.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-kaltura.js:332"
        },
        {
            "message": "Missing item type\n// Get video info from videoinfo API using CSV of IDs.\n$.getJSON(api.playlistVideos.replace(\"{playlistId}\", appliedSettings.videoplaylistid).replace(\"{maxResults}\", appliedSettings.maxnumvideos)).done(function (jsonObj) {\n  var videoIds = \"\";\n\n  $.each(jsonObj.items, function(){\n    videoIds += \",\" + this.contentDetails.videoId;\n  });\n\n  videoIds = videoIds.substring(1);\n\n  // Take CSV of video IDs and generate placeholder divs in a carousel, then init both.\n  ibmVp.createVideoCarousel(videoIds, appliedSettings);\n});",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-kaltura.js:931"
        },
        {
            "message": "Missing item type\nMap common player actions to an abstracted API for cross-player ease of use.\nSafety check to make sure the lower level function is there before calling it.\n\"me\" here is == $el.data(\"widget\")\nSo \"me.playVideo\" here is letting the page JS say:  $(\"widgetContainer\").data(\"widget\").playVideo();",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-kaltura.js:961"
        },
        {
            "message": "Missing item type\nNotes: \n\nUstream video player widget subclass.\n\nDependency: videoplayer.js\n\nDocumentation: \n\thttp://developers.ustream.tv/player-api/player.html\n\nAPI required:\n\thttp://static.ustream.tv/js/libs/ustream-embedapi.min.js\n\nExample iframe:\n\t<iframe id=\"UstreamIframe\" src=\"//www.ustream.tv/embed/1524\" width=\"640\" height=\"480\" allowfullscreen webkitallowfullscreen></iframe>\n\nProcess flow:\n\tFor each DOM element that has data-widget=video and is ustream, one of these object is created \n\t  and attached to it via: $EL.data(\"widget\").player\n\t  \n\tAfter the new object is created, .init() is run. Init loads the YT api if it doesn't exist already (glob var), \n\t   and then creates the video players for inline and overlay players.\n\tEach video player creates a new YT player object, which injects a YT iframe and replaces the $EL that was tagged for a video widget and the rest is history.\n\tIf the player is in an overlay, we do an extra step (before) and create an overlay, inject it, then embed the YT Player in the overlay.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-ustream.js:14"
        },
        {
            "message": "Missing item type\nEVENTS functions (for metrics).",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-ustream.js:137"
        },
        {
            "message": "Missing item type\nWIDGET functions.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-ustream.js:177"
        },
        {
            "message": "Missing item type\nMap common player actions to an abstracted API for cross-player ease of use.\nSafety check to make sure the lower level function is there before calling it.\n\"me\" here is == $el.data(\"widget\")\nSo \"me.playVideo\" here is letting the page JS say:  $(\"widgetContainer\").data(\"widget\").playVideo();",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-ustream.js:405"
        },
        {
            "message": "Missing item type\nYoutube video player widget subclass.\nDependency: videoplayer.js\nYoutube API documentation URLs:\n\t\tIFRAME api reference:\n\t\t\thttps://developers.google.com/youtube/iframe_api_reference\n\tPlayerVars parameters:\n\t\t\thttps://developers.google.com/youtube/player_parameters#Parameters\n\tJS API (used to \"externally\" control a video player):\n\t\t\thttps://developers.google.com/youtube/js_api_reference\n\tData API v2 (DEPRECATED, what v17 used):\n\t\t\thttps://gdata.youtube.com/feeds/api/videos/<videoID>?v=2&alt=json&callback=someCallbackName\n\tData API v3 (need to use key):\n\t\t\thttps://developers.google.com/youtube/v3/\n\tGet a video's image/thumb:\n\t\t\thttps://i.ytimg.com/vi/<videoID>/hqdefault.jpg  or \"maxresdefault.jpg\"\n\tGet info (title, descr, duration) about a video (accepts CSV list of videoIDs):\n\t\t\thttps://www.googleapis.com/youtube/v3/videos?part=contentDetails%2C+snippet&id=<videoid>&key=<apikey>\n\tGet list of videos from a playlist ID:\n\t\t\thttps://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=<maxNum>&playlistId=<playlistid>&key=<apikey>\nAPI NOTE:\n\t\tThe API key is owned by Michael Santelia. Keys to use can be generated and daily usage limits can be checked from\n\t\t the Google developer console:\n\thttps://console.developers.google.com/project\n\tThe API limit is 50 MILLION units per 24 hours. Each video request, depending on data requested is ~30 units worth.\n\t\tIf there are issues or we hit the limit, contact Michael Santelia to check the quota.\n\t\tWe can always create multiple keys and randomize which one is used to spread out the usage.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-youtube.js:14"
        },
        {
            "message": "Missing item type\nProcess flow:\n\t\tFor each DOM element that has data-widget=video and is youtube, one of these object is created\n\t\t  and attached to it via: $EL.data(\"widget\").player\n\t\t  If there is an overlay object it's at: $EL.data().widget.overlay and the trigger is at: $EL.data.widget.trigger\n\tAfter the new object is created, .init() is run. Init loads the YT api if it doesn't exist already (glob var),\n\t\t   and then creates the video players for inline and overlay players.\n\t\tEach video player creates a new YT player object, which injects a YT iframe and replaces the $EL that was tagged for a video widget and the rest is history.\n\t\tIf the player is in an overlay, we do an extra step (before) and create an overlay, inject it, then embed the YT Player in the overlay.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-youtube.js:57"
        },
        {
            "message": "Missing item type\nEVENTS functions (for metrics).",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-youtube.js:331"
        },
        {
            "message": "Missing item type\nWIDGET functions.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer-youtube.js:432"
        },
        {
            "message": "Missing item type\nThe IBM video player plug-in.\n<br />\n<br />This",
            "line": " src/js/sources/ibm/common/widgets/videoplayer.js:65"
        },
        {
            "message": "Missing item type\nVideo player factory.\nCreates and returns the proper vendor plugin object.\nThis is the only thing that should be touched, and it's only when you need to add/remove a type of player from the factory.\n\nInit is called after new videoplayer() above in createVideoPlayer.\nThis decides what type of sub-class/object player to create.\nThat sub class/object player is responsible for everything.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer.js:108"
        },
        {
            "message": "Missing item type\nCommon video player methods and helers.",
            "line": " src/js/sources/ibm/common/widgets/videoplayer.js:138"
        },
        {
            "message": "Missing item type\nRuns on DOM ready\nAllows us to disable all auto-init content space widgets via a single config setting.",
            "line": " src/js/sources/ibm/common/init.js:160"
        },
        {
            "message": "Missing item type\nThis is where all the defaults are set for WWW.\n\tConfigurations and what\"s enabled or not by default.\n\tThis is WWW ONLY.",
            "line": " src/js/sources/ibm/common/setconfig.js:1"
        },
        {
            "message": "Missing item type\nModule default configurations below",
            "line": " src/js/sources/ibm/common/setconfig.js:65"
        },
        {
            "message": "Missing item type\nCheck to see if we need to override some of the production settings with different environment settings.\nAllows you to use a different environment build using non-production values. The order is:\n\t1. Production (default).\n\t2. Override via COOKIE value through our special cookie. Settable here:\n\t\thttp://www.ibm.com/common/test/v18/v18-env-switcher.html",
            "line": " src/js/sources/ibm/common/setconfig.js:211"
        },
        {
            "message": "Missing item type\nThis file simply subscribes to DOM ready event and dynamically injects the Notice/Choice JS file (notice-choice.js)\n\t if the page meets the specified criteria and adds the proper form fields based on the page's settings.",
            "line": " src/js/sources/ibm/www/modules/notice-choice-loader.js:1"
        },
        {
            "message": "Missing item type\nPerformance functions that use the high-resolution timers\nof the web performance API to mark and measure events, code loading, etc",
            "line": " src/js/sources/ibm/perf.js:5"
        },
        {
            "message": "Missing item type\nTemp addition to validate ipcinfo cookie and find the offender of it, for corp webmaster team.",
            "line": " src/js/sources/ibm/temp-cookie-validator.js:4"
        },
        {
            "message": "Missing item type\nThis is to allow the testing of the latest css code on a v18 page\n\t<br />Checks that the page is being loaded from an iframe and switches the CSS to the latest version",
            "line": " src/js/sources/ibm/temp-css-tester.js:1"
        },
        {
            "message": "Missing item type\nTemp addition to see if any css/script/images are using forced http on URLs.",
            "line": " src/js/sources/ibm/temp-http-checker.js:4"
        },
        {
            "message": "Missing item type\nThis is for Jeff Florentino\n\t<br />Web asset tracker for GDPR auditing. Checks the page to ensure it has tealium/CM on it and if not, fires a tag.",
            "line": " src/js/sources/ibm/temp-wat-loader.js:1"
        }
    ]
}